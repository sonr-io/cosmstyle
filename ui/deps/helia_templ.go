// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package deps

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

// Additional component for file operations
func HeliaFileOperations() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"helia-file-operations\"><h3>File Operations</h3><div class=\"operation-container\"><h4>Add File</h4><input type=\"file\" id=\"fileInput\"> <button id=\"addFileBtn\">Add File</button><div id=\"addFileResult\"></div></div><div class=\"operation-container\"><h4>Retrieve File by CID</h4><input type=\"text\" id=\"cidInput\" placeholder=\"Enter CID\"> <button id=\"retrieveFileBtn\">Retrieve</button><div id=\"retrieveFileResult\"></div></div><script>\n            (() => {\n                document.addEventListener('DOMContentLoaded', () => {\n                    // Wait until Helia is initialized\n                    const checkHeliaInterval = setInterval(() => {\n                        if (window.helia && window.heliaFs) {\n                            clearInterval(checkHeliaInterval)\n                            setupFileOperations()\n                        }\n                    }, 500)\n                    \n                    function setupFileOperations() {\n                        const addFileBtn = document.getElementById('addFileBtn')\n                        const retrieveFileBtn = document.getElementById('retrieveFileBtn')\n                        \n                        addFileBtn.addEventListener('click', async () => {\n                            const fileInput = document.getElementById('fileInput')\n                            const resultEl = document.getElementById('addFileResult')\n                            \n                            if (!fileInput.files || fileInput.files.length === 0) {\n                                resultEl.textContent = 'Please select a file'\n                                return\n                            }\n                            \n                            try {\n                                const file = fileInput.files[0]\n                                resultEl.textContent = 'Adding file...'\n                                \n                                const cid = await window.heliaFs.addFile(file)\n                                resultEl.textContent = `File added with CID: ${cid.toString()}`\n                            } catch (err) {\n                                resultEl.textContent = `Error adding file: ${err.message}`\n                                console.error('Error adding file:', err)\n                            }\n                        })\n                        \n                        retrieveFileBtn.addEventListener('click', async () => {\n                            const cidInput = document.getElementById('cidInput')\n                            const resultEl = document.getElementById('retrieveFileResult')\n                            \n                            if (!cidInput.value) {\n                                resultEl.textContent = 'Please enter a CID'\n                                return\n                            }\n                            \n                            try {\n                                resultEl.textContent = 'Retrieving file...'\n                                \n                                const cid = cidInput.value\n                                const chunks = []\n                                \n                                for await (const chunk of window.heliaFs.cat(cid)) {\n                                    chunks.push(chunk)\n                                }\n                                \n                                const content = new TextDecoder().decode(\n                                    chunks.reduce((acc, chunk) => {\n                                        const combined = new Uint8Array(acc.length + chunk.length)\n                                        combined.set(acc)\n                                        combined.set(chunk, acc.length)\n                                        return combined\n                                    }, new Uint8Array(0))\n                                )\n                                \n                                resultEl.textContent = `Retrieved content (first 100 chars): ${content.substring(0, 100)}${content.length > 100 ? '...' : ''}`\n                            } catch (err) {\n                                resultEl.textContent = `Error retrieving file: ${err.message}`\n                                console.error('Error retrieving file:', err)\n                            }\n                        })\n                    }\n                })\n            })()\n        </script></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
