// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package themes

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func ThemeToggle(id string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"theme-toggle\"><button id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(id)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `ui/themes/theme.templ`, Line: 6, Col: 10}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\" type=\"button\" class=\"theme-toggle__button\" aria-label=\"Toggle theme\" onclick=\"toggleTheme()\"><svg class=\"theme-toggle__icon theme-toggle__icon--sun\" aria-hidden=\"true\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 18C8.68629 18 6 15.3137 6 12C6 8.68629 8.68629 6 12 6C15.3137 6 18 8.68629 18 12C18 15.3137 15.3137 18 12 18ZM12 16C14.2091 16 16 14.2091 16 12C16 9.79086 14.2091 8 12 8C9.79086 8 8 9.79086 8 12C8 14.2091 9.79086 16 12 16ZM11 1H13V4H11V1ZM11 20H13V23H11V20ZM3.51472 4.92893L4.92893 3.51472L7.05025 5.63604L5.63604 7.05025L3.51472 4.92893ZM16.9497 18.364L18.364 16.9497L20.4853 19.0711L19.0711 20.4853L16.9497 18.364ZM19.0711 3.51472L20.4853 4.92893L18.364 7.05025L16.9497 5.63604L19.0711 3.51472ZM5.63604 16.9497L7.05025 18.364L4.92893 20.4853L3.51472 19.0711L5.63604 16.9497ZM23 11V13H20V11H23ZM4 11V13H1V11H4Z\"></path></svg> <svg class=\"theme-toggle__icon theme-toggle__icon--moon\" aria-hidden=\"true\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M10 7C10 10.866 13.134 14 17 14C18.9584 14 20.729 13.1957 21.9995 11.8995C22 11.933 22 11.9665 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C12.0335 2 12.067 2 12.1005 2.00049C10.8043 3.27105 10 5.04157 10 7ZM4 12C4 16.4183 7.58172 20 12 20C15.0583 20 17.7158 18.2839 19.062 15.7621C18.3945 15.9187 17.7035 16 17 16C12.0294 16 8 11.9706 8 7C8 6.29648 8.08133 5.60547 8.2379 4.938C5.71611 6.28423 4 8.9417 4 12Z\"></path></svg></button></div><script>\n    function toggleTheme() {\n      const html = document.documentElement;\n      const currentTheme = html.classList.contains('sl-theme-dark') ? 'dark' : 'light';\n      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n      \n      // Remove existing theme class\n      html.classList.remove('sl-theme-dark', 'sl-theme-light');\n      \n      // Add new theme class\n      html.classList.add(`sl-theme-${newTheme}`);\n      \n      // Store theme preference\n      localStorage.setItem('sl-theme', newTheme);\n    }\n\n    // Initialize theme based on stored preference or system preference\n    (function initializeTheme() {\n      const html = document.documentElement;\n      const storedTheme = localStorage.getItem('sl-theme');\n      \n      if (storedTheme) {\n        html.classList.add(`sl-theme-${storedTheme}`);\n      } else {\n        // Check system preference\n        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        if (prefersDark) {\n          html.classList.add('sl-theme-dark');\n        } else {\n          html.classList.add('sl-theme-light');\n        }\n      }\n    })();\n  </script><style>\n    .theme-toggle {\n      display: inline-flex;\n    }\n    \n    .theme-toggle__button {\n      background: none;\n      border: none;\n      padding: 0.5rem;\n      cursor: pointer;\n      border-radius: 50%;\n      color: var(--sl-color-neutral-700);\n      transition: color var(--sl-transition-medium), background-color var(--sl-transition-medium);\n    }\n    \n    .theme-toggle__button:hover {\n      color: var(--sl-color-primary-600);\n      background-color: var(--sl-color-neutral-100);\n    }\n    \n    .theme-toggle__icon {\n      display: block;\n      width: 24px;\n      height: 24px;\n    }\n    \n    /* Show/hide icons based on theme */\n    .sl-theme-light .theme-toggle__icon--moon,\n    .theme-toggle__icon--sun {\n      display: block;\n    }\n    \n    .sl-theme-light .theme-toggle__icon--sun,\n    .theme-toggle__icon--moon {\n      display: none;\n    }\n    \n    .sl-theme-dark .theme-toggle__icon--moon {\n      display: block;\n    }\n    \n    .sl-theme-dark .theme-toggle__icon--sun {\n      display: none;\n    }\n    \n    @media (prefers-color-scheme: dark) {\n      .theme-toggle__icon--moon {\n        display: block;\n      }\n      \n      .theme-toggle__icon--sun {\n        display: none;\n      }\n      \n      .sl-theme-light .theme-toggle__icon--moon {\n        display: none;\n      }\n      \n      .sl-theme-light .theme-toggle__icon--sun {\n        display: block;\n      }\n    }\n  </style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// Component for theme setup in <head>
func ThemeInit() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<style>\n    /* Prevent flash of unstyled content */\n    html:not(.sl-theme-dark):not(.sl-theme-light) {\n      visibility: hidden;\n    }\n  </style><script>\n    // Immediately apply theme to prevent flash\n    (function() {\n      const html = document.documentElement;\n      const storedTheme = localStorage.getItem('sl-theme');\n      \n      if (storedTheme) {\n        html.classList.add(`sl-theme-${storedTheme}`);\n      } else {\n        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        html.classList.add(prefersDark ? 'sl-theme-dark' : 'sl-theme-light');\n      }\n    })();\n  </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
