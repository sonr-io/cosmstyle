// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package charts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"encoding/json"
	"fmt"
	"time"
)

type CandleData struct {
	Open  float64
	Close float64
	High  float64
	Low   float64
	Date  time.Time
}

// D3 script handle for deduplication
var d3Handle = templ.NewOnceHandle()

// D3 component for loading D3.js
func D3() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script type=\"module\">\n            import * as d3 from \"https://cdn.jsdelivr.net/npm/d3@7/+esm\";\n            window.d3 = d3;\n        </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = d3Handle.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// CandleChart component
func CandleChart(data []CandleData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = D3().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div id=\"candleChart\" class=\"@container relative\"><div class=\"relative h-72 w-full\" style=\"--marginTop: 10px; --marginRight: 60px; --marginBottom: 56px; --marginLeft: 30px;\"></div></div><script type=\"module\">\n        // Convert Go data to JavaScript\n        const chartData = {\n            templ.Safe(formatDataForJS(data))\n        };\n\n        // D3 Chart Implementation\n        const margin = {\n            top: 10,\n            right: 60,\n            bottom: 56,\n            left: 30\n        };\n\n        const container = d3.select(\"#candleChart > div\");\n        const width = container.node().getBoundingClientRect().width;\n        const height = container.node().getBoundingClientRect().height;\n        const chartWidth = width - margin.left - margin.right;\n        const chartHeight = height - margin.top - margin.bottom;\n\n        // Clear any existing chart\n        container.selectAll(\"*\").remove();\n\n        // Create SVG\n        const svg = container.append(\"svg\")\n            .attr(\"viewBox\", `0 0 ${width} ${height}`)\n            .attr(\"class\", \"overflow-visible w-full h-full\")\n            .attr(\"preserveAspectRatio\", \"none\");\n\n        // Create chart group\n        const g = svg.append(\"g\")\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        // Create scales\n        const xScale = d3.scaleBand()\n            .domain(chartData.map(d => d.date))\n            .range([0, chartWidth])\n            .padding(0.3);\n\n        const yScale = d3.scaleLinear()\n            .domain([\n                d3.min(chartData, d => d.low),\n                d3.max(chartData, d => d.high)\n            ])\n            .range([chartHeight, 0]);\n\n        // Add grid lines\n        g.selectAll(\"grid-line\")\n            .data(yScale.ticks(6))\n            .enter()\n            .append(\"line\")\n            .attr(\"x1\", 0)\n            .attr(\"x2\", chartWidth)\n            .attr(\"y1\", d => yScale(d))\n            .attr(\"y2\", d => yScale(d))\n            .attr(\"stroke\", \"currentColor\")\n            .attr(\"class\", \"text-gray-300/80 dark:text-gray-800/80\")\n            .attr(\"stroke-dasharray\", \"6,5\")\n            .attr(\"stroke-width\", 0.5)\n            .attr(\"vector-effect\", \"non-scaling-stroke\");\n\n        // Add Y-axis labels\n        g.selectAll(\"y-label\")\n            .data(yScale.ticks(6))\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", chartWidth + 10)\n            .attr(\"y\", d => yScale(d))\n            .attr(\"dy\", \"0.32em\")\n            .attr(\"class\", \"text-xs text-gray-400\")\n            .text(d => d.toFixed(2));\n\n        // Add candlesticks\n        const candlesticks = g.selectAll(\"candlestick\")\n            .data(chartData)\n            .enter()\n            .append(\"g\");\n\n        // Add wicks (high-low lines)\n        candlesticks.append(\"line\")\n            .attr(\"x1\", d => xScale(d.date) + xScale.bandwidth() / 2)\n            .attr(\"x2\", d => xScale(d.date) + xScale.bandwidth() / 2)\n            .attr(\"y1\", d => yScale(d.high))\n            .attr(\"y2\", d => yScale(d.low))\n            .attr(\"stroke\", \"currentColor\")\n            .attr(\"class\", \"text-zinc-300 dark:text-zinc-700\")\n            .attr(\"stroke-width\", 1)\n            .attr(\"vector-effect\", \"non-scaling-stroke\");\n\n        // Add bodies (open-close rectangles)\n        candlesticks.append(\"rect\")\n            .attr(\"x\", d => xScale(d.date))\n            .attr(\"y\", d => yScale(Math.max(d.open, d.close)))\n            .attr(\"width\", xScale.bandwidth())\n            .attr(\"height\", d => Math.abs(yScale(d.open) - yScale(d.close)))\n            .attr(\"class\", d => d.open < d.close \n                ? \"fill-emerald-500\" \n                : \"fill-red-500\");\n\n        // Add X-axis labels\n        g.selectAll(\"x-label\")\n            .data(chartData.filter((_, i) => i % 10 === 0))\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", d => xScale(d.date) + xScale.bandwidth() / 2)\n            .attr(\"y\", chartHeight + 20)\n            .attr(\"class\", \"text-xs text-gray-400\")\n            .attr(\"transform\", d => `rotate(45, ${xScale(d.date) + xScale.bandwidth() / 2}, ${chartHeight + 20})`)\n            .text(d => {\n                const date = new Date(d.date);\n                return `${date.getMonth() + 1}/${date.getDate()} - ${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;\n            });\n\n        // Handle resize\n        const resizeObserver = new ResizeObserver(() => {\n            // Implement resize logic here if needed\n        });\n\n        resizeObserver.observe(container.node());\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// formatDataForJS converts the Go data structure to a JavaScript-compatible JSON string
func formatDataForJS(data []CandleData) string {
	type jsData struct {
		Date  string  `json:"date"`
		Open  float64 `json:"open"`
		Close float64 `json:"close"`
		High  float64 `json:"high"`
		Low   float64 `json:"low"`
	}

	jsDataArray := make([]jsData, len(data))
	for i, d := range data {
		jsDataArray[i] = jsData{
			Date:  d.Date.Format(time.RFC3339),
			Open:  d.Open,
			Close: d.Close,
			High:  d.High,
			Low:   d.Low,
		}
	}

	jsonBytes, err := json.Marshal(jsDataArray)
	if err != nil {
		return "[]"
	}
	return string(jsonBytes)
}

var _ = templruntime.GeneratedTemplate
