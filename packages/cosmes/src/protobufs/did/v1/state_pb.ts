// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file did/v1/state.proto (package did.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message did.v1.Account
 */
export class Account extends Message<Account> {
  /**
   * The unique identifier of the assertion
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * The authentication of the DID
   *
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * Origin of the authentication
   *
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * string is the verification method
   *
   * @generated from field: string public_key_hex = 4;
   */
  publicKeyHex = "";

  /**
   * AssertionType is the assertion type
   *
   * @generated from field: string assertion_type = 5;
   */
  assertionType = "";

  /**
   * Metadata of the authentication
   *
   * @generated from field: map<string, bytes> accumulator = 6;
   */
  accumulator: { [key: string]: Uint8Array } = {};

  /**
   * CreationBlock is the block number of the creation of the authentication
   *
   * @generated from field: int64 creation_block = 7;
   */
  creationBlock = protoInt64.zero;

  constructor(data?: PartialMessage<Account>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Account";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public_key_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "assertion_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "accumulator", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
    { no: 7, name: "creation_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Account {
    return new Account().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJsonString(jsonString, options);
  }

  static equals(a: Account | PlainMessage<Account> | undefined, b: Account | PlainMessage<Account> | undefined): boolean {
    return proto3.util.equals(Account, a, b);
  }
}

/**
 * PublicKey represents a public key
 *
 * @generated from message did.v1.PublicKey
 */
export class PublicKey extends Message<PublicKey> {
  /**
   * The unique identifier of the controller
   *
   * @generated from field: uint64 number = 1;
   */
  number = protoInt64.zero;

  /**
   * The unique identifier of the controller
   *
   * @generated from field: string did = 2;
   */
  did = "";

  /**
   * The DID of the controller
   *
   * @generated from field: string sonr_address = 3;
   */
  sonrAddress = "";

  /**
   * The DID of the controller
   *
   * @generated from field: string eth_address = 4;
   */
  ethAddress = "";

  /**
   * The DID of the controller
   *
   * @generated from field: string btc_address = 5;
   */
  btcAddress = "";

  /**
   * string is the verification method
   *
   * @generated from field: string public_key_hex = 6;
   */
  publicKeyHex = "";

  /**
   * Pointer to the Keyshares
   *
   * @generated from field: string ks_val = 7;
   */
  ksVal = "";

  /**
   * The block number of when a user claimed the controller
   *
   * @generated from field: int64 claimed_block = 8;
   */
  claimedBlock = protoInt64.zero;

  /**
   * CreationBlock is the block number of the creation of the controller
   *
   * @generated from field: int64 creation_block = 9;
   */
  creationBlock = protoInt64.zero;

  constructor(data?: PartialMessage<PublicKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.PublicKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sonr_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "eth_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "btc_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "public_key_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "ks_val", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "claimed_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "creation_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicKey {
    return new PublicKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicKey {
    return new PublicKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicKey {
    return new PublicKey().fromJsonString(jsonString, options);
  }

  static equals(a: PublicKey | PlainMessage<PublicKey> | undefined, b: PublicKey | PlainMessage<PublicKey> | undefined): boolean {
    return proto3.util.equals(PublicKey, a, b);
  }
}

/**
 * Verification represents a verification method
 *
 * @generated from message did.v1.Verification
 */
export class Verification extends Message<Verification> {
  /**
   * The unique identifier of the verification
   *
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * The controller of the verification
   *
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * The DIDNamespace of the verification
   *
   * @generated from field: string did_method = 3;
   */
  didMethod = "";

  /**
   * The value of the linked identifier
   *
   * @generated from field: string issuer = 4;
   */
  issuer = "";

  /**
   * The subject of the verification
   *
   * @generated from field: string subject = 5;
   */
  subject = "";

  /**
   * The public key of the verification
   *
   * @generated from field: string public_key_hex = 6;
   */
  publicKeyHex = "";

  /**
   * The verification method type
   *
   * @generated from field: string verification_type = 7;
   */
  verificationType = "";

  /**
   * Metadata of the verification
   *
   * @generated from field: map<string, string> metadata = 8;
   */
  metadata: { [key: string]: string } = {};

  /**
   * CreationBlock is the block number of the creation of the controller
   *
   * @generated from field: int64 creation_block = 9;
   */
  creationBlock = protoInt64.zero;

  constructor(data?: PartialMessage<Verification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Verification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "did_method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "public_key_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "verification_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 9, name: "creation_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Verification {
    return new Verification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Verification {
    return new Verification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Verification {
    return new Verification().fromJsonString(jsonString, options);
  }

  static equals(a: Verification | PlainMessage<Verification> | undefined, b: Verification | PlainMessage<Verification> | undefined): boolean {
    return proto3.util.equals(Verification, a, b);
  }
}

