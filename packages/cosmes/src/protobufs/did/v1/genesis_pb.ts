// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file did/v1/genesis.proto (package did.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * GenesisState defines the module genesis state
 *
 * @generated from message did.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * Params defines all the parameters of the module.
   *
   * @generated from field: did.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Params defines the set of module parameters.
 *
 * @generated from message did.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: repeated did.v1.Attenuation attenuations = 1;
   */
  attenuations: Attenuation[] = [];

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attenuations", kind: "message", T: Attenuation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * Attenuation defines the attenuation of a resource
 *
 * @generated from message did.v1.Attenuation
 */
export class Attenuation extends Message<Attenuation> {
  /**
   * @generated from field: did.v1.Resource resource = 1;
   */
  resource?: Resource;

  /**
   * @generated from field: repeated did.v1.Capability capabilities = 2;
   */
  capabilities: Capability[] = [];

  constructor(data?: PartialMessage<Attenuation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Attenuation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Resource },
    { no: 2, name: "capabilities", kind: "message", T: Capability, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attenuation {
    return new Attenuation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attenuation {
    return new Attenuation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attenuation {
    return new Attenuation().fromJsonString(jsonString, options);
  }

  static equals(a: Attenuation | PlainMessage<Attenuation> | undefined, b: Attenuation | PlainMessage<Attenuation> | undefined): boolean {
    return proto3.util.equals(Attenuation, a, b);
  }
}

/**
 * Capability reprensents the available capabilities of a decentralized web node
 *
 * @generated from message did.v1.Capability
 */
export class Capability extends Message<Capability> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string parent = 2;
   */
  parent = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: repeated string resources = 4;
   */
  resources: string[] = [];

  constructor(data?: PartialMessage<Capability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Capability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "resources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Capability {
    return new Capability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Capability {
    return new Capability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Capability {
    return new Capability().fromJsonString(jsonString, options);
  }

  static equals(a: Capability | PlainMessage<Capability> | undefined, b: Capability | PlainMessage<Capability> | undefined): boolean {
    return proto3.util.equals(Capability, a, b);
  }
}

/**
 * Resource reprensents the available resources of a decentralized web node
 *
 * @generated from message did.v1.Resource
 */
export class Resource extends Message<Resource> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string template = 2;
   */
  template = "";

  constructor(data?: PartialMessage<Resource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Resource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "template", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resource {
    return new Resource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJsonString(jsonString, options);
  }

  static equals(a: Resource | PlainMessage<Resource> | undefined, b: Resource | PlainMessage<Resource> | undefined): boolean {
    return proto3.util.equals(Resource, a, b);
  }
}

/**
 * Document defines a DID document
 *
 * @generated from message did.v1.Document
 */
export class Document extends Message<Document> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The DID of the controller
   *
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * @generated from field: repeated string authentication = 3;
   */
  authentication: string[] = [];

  /**
   * @generated from field: repeated string assertion_method = 4;
   */
  assertionMethod: string[] = [];

  /**
   * @generated from field: repeated string capability_delegation = 5;
   */
  capabilityDelegation: string[] = [];

  /**
   * @generated from field: repeated string capability_invocation = 6;
   */
  capabilityInvocation: string[] = [];

  /**
   * @generated from field: repeated string service = 7;
   */
  service: string[] = [];

  constructor(data?: PartialMessage<Document>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.Document";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "authentication", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "assertion_method", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "capability_delegation", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "capability_invocation", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Document {
    return new Document().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Document {
    return new Document().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Document {
    return new Document().fromJsonString(jsonString, options);
  }

  static equals(a: Document | PlainMessage<Document> | undefined, b: Document | PlainMessage<Document> | undefined): boolean {
    return proto3.util.equals(Document, a, b);
  }
}

