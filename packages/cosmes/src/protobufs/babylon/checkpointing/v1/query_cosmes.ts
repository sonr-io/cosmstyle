// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file babylon/checkpointing/v1/query.proto (package babylon.checkpointing.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryBlsPublicKeyListRequest, QueryBlsPublicKeyListResponse, QueryEpochStatusRequest, QueryEpochStatusResponse, QueryLastCheckpointWithStatusRequest, QueryLastCheckpointWithStatusResponse, QueryRawCheckpointListRequest, QueryRawCheckpointListResponse, QueryRawCheckpointRequest, QueryRawCheckpointResponse, QueryRawCheckpointsRequest, QueryRawCheckpointsResponse, QueryRecentEpochStatusCountRequest, QueryRecentEpochStatusCountResponse } from "./query_pb.js";

const TYPE_NAME = "babylon.checkpointing.v1.Query";

/**
 * RawCheckpointList queries all checkpoints that match the given status.
 *
 * @generated from rpc babylon.checkpointing.v1.Query.RawCheckpointList
 */
export const QueryRawCheckpointListService = {
  typeName: TYPE_NAME,
  method: "RawCheckpointList",
  Request: QueryRawCheckpointListRequest,
  Response: QueryRawCheckpointListResponse,
} as const;

/**
 * RawCheckpoint queries a checkpoints at a given epoch number.
 *
 * @generated from rpc babylon.checkpointing.v1.Query.RawCheckpoint
 */
export const QueryRawCheckpointService = {
  typeName: TYPE_NAME,
  method: "RawCheckpoint",
  Request: QueryRawCheckpointRequest,
  Response: QueryRawCheckpointResponse,
} as const;

/**
 * RawCheckpoints queries checkpoints for a epoch range specified in pagination params.
 *
 * @generated from rpc babylon.checkpointing.v1.Query.RawCheckpoints
 */
export const QueryRawCheckpointsService = {
  typeName: TYPE_NAME,
  method: "RawCheckpoints",
  Request: QueryRawCheckpointsRequest,
  Response: QueryRawCheckpointsResponse,
} as const;

/**
 * BlsPublicKeyList queries a list of bls public keys of the validators at a
 * given epoch number.
 *
 * @generated from rpc babylon.checkpointing.v1.Query.BlsPublicKeyList
 */
export const QueryBlsPublicKeyListService = {
  typeName: TYPE_NAME,
  method: "BlsPublicKeyList",
  Request: QueryBlsPublicKeyListRequest,
  Response: QueryBlsPublicKeyListResponse,
} as const;

/**
 * EpochStatus queries the status of the checkpoint at a given epoch
 *
 * @generated from rpc babylon.checkpointing.v1.Query.EpochStatus
 */
export const QueryEpochStatusService = {
  typeName: TYPE_NAME,
  method: "EpochStatus",
  Request: QueryEpochStatusRequest,
  Response: QueryEpochStatusResponse,
} as const;

/**
 * RecentEpochStatusCount queries the number of epochs with each status in
 * recent epochs
 *
 * @generated from rpc babylon.checkpointing.v1.Query.RecentEpochStatusCount
 */
export const QueryRecentEpochStatusCountService = {
  typeName: TYPE_NAME,
  method: "RecentEpochStatusCount",
  Request: QueryRecentEpochStatusCountRequest,
  Response: QueryRecentEpochStatusCountResponse,
} as const;

/**
 * LastCheckpointWithStatus queries the last checkpoint with a given status or
 * a more matured status
 *
 * @generated from rpc babylon.checkpointing.v1.Query.LastCheckpointWithStatus
 */
export const QueryLastCheckpointWithStatusService = {
  typeName: TYPE_NAME,
  method: "LastCheckpointWithStatus",
  Request: QueryLastCheckpointWithStatusRequest,
  Response: QueryLastCheckpointWithStatusResponse,
} as const;

