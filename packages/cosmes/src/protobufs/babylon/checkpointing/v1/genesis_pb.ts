// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/checkpointing/v1/genesis.proto (package babylon.checkpointing.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { BlsKey } from "./bls_key_pb.js";
import { PubKey } from "../../../cosmos/crypto/ed25519/keys_pb.js";

/**
 * GenesisState defines the checkpointing module's genesis state.
 *
 * @generated from message babylon.checkpointing.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * genesis_keys defines the public keys for the genesis validators
   *
   * @generated from field: repeated babylon.checkpointing.v1.GenesisKey genesis_keys = 1;
   */
  genesisKeys: GenesisKey[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.checkpointing.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "genesis_keys", kind: "message", T: GenesisKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * GenesisKey defines public key information about the genesis validators
 *
 * @generated from message babylon.checkpointing.v1.GenesisKey
 */
export class GenesisKey extends Message<GenesisKey> {
  /**
   * validator_address is the address corresponding to a validator
   *
   * @generated from field: string validator_address = 1;
   */
  validatorAddress = "";

  /**
   * bls_key defines the BLS key of the validator at genesis
   *
   * @generated from field: babylon.checkpointing.v1.BlsKey bls_key = 2;
   */
  blsKey?: BlsKey;

  /**
   * val_pubkey defines the ed25519 public key of the validator at genesis
   *
   * @generated from field: cosmos.crypto.ed25519.PubKey val_pubkey = 3;
   */
  valPubkey?: PubKey;

  constructor(data?: PartialMessage<GenesisKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.checkpointing.v1.GenesisKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bls_key", kind: "message", T: BlsKey },
    { no: 3, name: "val_pubkey", kind: "message", T: PubKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisKey {
    return new GenesisKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisKey {
    return new GenesisKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisKey {
    return new GenesisKey().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisKey | PlainMessage<GenesisKey> | undefined, b: GenesisKey | PlainMessage<GenesisKey> | undefined): boolean {
    return proto3.util.equals(GenesisKey, a, b);
  }
}

