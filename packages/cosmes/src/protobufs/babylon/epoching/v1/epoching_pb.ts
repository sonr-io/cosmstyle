// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/epoching/v1/epoching.proto (package babylon.epoching.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { MsgBeginRedelegate, MsgCancelUnbondingDelegation, MsgCreateValidator, MsgDelegate, MsgUndelegate } from "../../../cosmos/staking/v1beta1/tx_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * BondState is the bond state of a validator or delegation
 *
 * @generated from enum babylon.epoching.v1.BondState
 */
export enum BondState {
  /**
   * CREATED is when the validator/delegation has been created
   *
   * @generated from enum value: CREATED = 0;
   */
  CREATED = 0,

  /**
   * CREATED is when the validator/delegation has become bonded
   *
   * @generated from enum value: BONDED = 1;
   */
  BONDED = 1,

  /**
   * CREATED is when the validator/delegation has become unbonding
   *
   * @generated from enum value: UNBONDING = 2;
   */
  UNBONDING = 2,

  /**
   * CREATED is when the validator/delegation has become unbonded
   *
   * @generated from enum value: UNBONDED = 3;
   */
  UNBONDED = 3,

  /**
   * CREATED is when the validator/delegation has been removed
   *
   * @generated from enum value: REMOVED = 4;
   */
  REMOVED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(BondState)
proto3.util.setEnumType(BondState, "babylon.epoching.v1.BondState", [
  { no: 0, name: "CREATED" },
  { no: 1, name: "BONDED" },
  { no: 2, name: "UNBONDING" },
  { no: 3, name: "UNBONDED" },
  { no: 4, name: "REMOVED" },
]);

/**
 * Epoch is a structure that contains the metadata of an epoch
 *
 * @generated from message babylon.epoching.v1.Epoch
 */
export class Epoch extends Message<Epoch> {
  /**
   * epoch_number is the number of this epoch
   *
   * @generated from field: uint64 epoch_number = 1;
   */
  epochNumber = protoInt64.zero;

  /**
   * current_epoch_interval is the epoch interval at the time of this epoch
   *
   * @generated from field: uint64 current_epoch_interval = 2;
   */
  currentEpochInterval = protoInt64.zero;

  /**
   * first_block_height is the height of the first block in this epoch
   *
   * @generated from field: uint64 first_block_height = 3;
   */
  firstBlockHeight = protoInt64.zero;

  /**
   * last_block_time is the time of the last block in this epoch.
   * Babylon needs to remember the last header's time of each epoch to complete
   * unbonding validators/delegations when a previous epoch's checkpoint is
   * finalised. The last_block_time field is nil in the epoch's beginning, and
   * is set upon the end of this epoch.
   *
   * @generated from field: google.protobuf.Timestamp last_block_time = 4;
   */
  lastBlockTime?: Timestamp;

  /**
   * app_hash_root is the Merkle root of all AppHashs in this epoch
   * It will be used for proving a block is in an epoch
   *
   * @generated from field: bytes app_hash_root = 5;
   */
  appHashRoot = new Uint8Array(0);

  /**
   * sealer is the last block of the sealed epoch
   * sealer_app_hash points to the sealer but stored in the 1st header
   * of the next epoch
   *
   * @generated from field: bytes sealer_app_hash = 6;
   */
  sealerAppHash = new Uint8Array(0);

  /**
   * sealer_block_hash is the hash of the sealer
   * the validator set has generated a BLS multisig on the hash,
   * i.e., hash of the last block in the epoch
   *
   * @generated from field: bytes sealer_block_hash = 7;
   */
  sealerBlockHash = new Uint8Array(0);

  constructor(data?: PartialMessage<Epoch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.Epoch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "current_epoch_interval", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "first_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "last_block_time", kind: "message", T: Timestamp },
    { no: 5, name: "app_hash_root", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "sealer_app_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "sealer_block_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Epoch {
    return new Epoch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Epoch {
    return new Epoch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Epoch {
    return new Epoch().fromJsonString(jsonString, options);
  }

  static equals(a: Epoch | PlainMessage<Epoch> | undefined, b: Epoch | PlainMessage<Epoch> | undefined): boolean {
    return proto3.util.equals(Epoch, a, b);
  }
}

/**
 * QueuedMessage is a message that can change the validator set and is delayed
 * to the end of an epoch
 *
 * @generated from message babylon.epoching.v1.QueuedMessage
 */
export class QueuedMessage extends Message<QueuedMessage> {
  /**
   * tx_id is the ID of the tx that contains the message
   *
   * @generated from field: bytes tx_id = 1;
   */
  txId = new Uint8Array(0);

  /**
   * msg_id is the original message ID, i.e., hash of the marshaled message
   *
   * @generated from field: bytes msg_id = 2;
   */
  msgId = new Uint8Array(0);

  /**
   * block_height is the height when this msg is submitted to Babylon
   *
   * @generated from field: uint64 block_height = 3;
   */
  blockHeight = protoInt64.zero;

  /**
   * block_time is the timestamp when this msg is submitted to Babylon
   *
   * @generated from field: google.protobuf.Timestamp block_time = 4;
   */
  blockTime?: Timestamp;

  /**
   * msg is the actual message that is sent by a user and is queued by the
   * epoching module
   *
   * @generated from oneof babylon.epoching.v1.QueuedMessage.msg
   */
  msg: {
    /**
     * @generated from field: cosmos.staking.v1beta1.MsgCreateValidator msg_create_validator = 5;
     */
    value: MsgCreateValidator;
    case: "msgCreateValidator";
  } | {
    /**
     * @generated from field: cosmos.staking.v1beta1.MsgDelegate msg_delegate = 6;
     */
    value: MsgDelegate;
    case: "msgDelegate";
  } | {
    /**
     * @generated from field: cosmos.staking.v1beta1.MsgUndelegate msg_undelegate = 7;
     */
    value: MsgUndelegate;
    case: "msgUndelegate";
  } | {
    /**
     * @generated from field: cosmos.staking.v1beta1.MsgBeginRedelegate msg_begin_redelegate = 8;
     */
    value: MsgBeginRedelegate;
    case: "msgBeginRedelegate";
  } | {
    /**
     * @generated from field: cosmos.staking.v1beta1.MsgCancelUnbondingDelegation msg_cancel_unbonding_delegation = 9;
     */
    value: MsgCancelUnbondingDelegation;
    case: "msgCancelUnbondingDelegation";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<QueuedMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueuedMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "msg_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "block_time", kind: "message", T: Timestamp },
    { no: 5, name: "msg_create_validator", kind: "message", T: MsgCreateValidator, oneof: "msg" },
    { no: 6, name: "msg_delegate", kind: "message", T: MsgDelegate, oneof: "msg" },
    { no: 7, name: "msg_undelegate", kind: "message", T: MsgUndelegate, oneof: "msg" },
    { no: 8, name: "msg_begin_redelegate", kind: "message", T: MsgBeginRedelegate, oneof: "msg" },
    { no: 9, name: "msg_cancel_unbonding_delegation", kind: "message", T: MsgCancelUnbondingDelegation, oneof: "msg" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueuedMessage {
    return new QueuedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueuedMessage {
    return new QueuedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueuedMessage {
    return new QueuedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: QueuedMessage | PlainMessage<QueuedMessage> | undefined, b: QueuedMessage | PlainMessage<QueuedMessage> | undefined): boolean {
    return proto3.util.equals(QueuedMessage, a, b);
  }
}

/**
 * ValStateUpdate is a message that records a state update of a validator
 *
 * @generated from message babylon.epoching.v1.ValStateUpdate
 */
export class ValStateUpdate extends Message<ValStateUpdate> {
  /**
   * @generated from field: babylon.epoching.v1.BondState state = 1;
   */
  state = BondState.CREATED;

  /**
   * @generated from field: uint64 block_height = 2;
   */
  blockHeight = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp block_time = 3;
   */
  blockTime?: Timestamp;

  constructor(data?: PartialMessage<ValStateUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.ValStateUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(BondState) },
    { no: 2, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "block_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValStateUpdate {
    return new ValStateUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValStateUpdate {
    return new ValStateUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValStateUpdate {
    return new ValStateUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: ValStateUpdate | PlainMessage<ValStateUpdate> | undefined, b: ValStateUpdate | PlainMessage<ValStateUpdate> | undefined): boolean {
    return proto3.util.equals(ValStateUpdate, a, b);
  }
}

/**
 * ValidatorLifecycle is a message that records the lifecycle of
 * a validator
 *
 * @generated from message babylon.epoching.v1.ValidatorLifecycle
 */
export class ValidatorLifecycle extends Message<ValidatorLifecycle> {
  /**
   * @generated from field: string val_addr = 1;
   */
  valAddr = "";

  /**
   * @generated from field: repeated babylon.epoching.v1.ValStateUpdate val_life = 2;
   */
  valLife: ValStateUpdate[] = [];

  constructor(data?: PartialMessage<ValidatorLifecycle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.ValidatorLifecycle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "val_life", kind: "message", T: ValStateUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorLifecycle {
    return new ValidatorLifecycle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorLifecycle {
    return new ValidatorLifecycle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorLifecycle {
    return new ValidatorLifecycle().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorLifecycle | PlainMessage<ValidatorLifecycle> | undefined, b: ValidatorLifecycle | PlainMessage<ValidatorLifecycle> | undefined): boolean {
    return proto3.util.equals(ValidatorLifecycle, a, b);
  }
}

/**
 * DelegationStateUpdate is the message that records a state update of a
 * delegation
 *
 * @generated from message babylon.epoching.v1.DelegationStateUpdate
 */
export class DelegationStateUpdate extends Message<DelegationStateUpdate> {
  /**
   * @generated from field: babylon.epoching.v1.BondState state = 1;
   */
  state = BondState.CREATED;

  /**
   * @generated from field: string val_addr = 2;
   */
  valAddr = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  /**
   * @generated from field: uint64 block_height = 4;
   */
  blockHeight = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp block_time = 5;
   */
  blockTime?: Timestamp;

  constructor(data?: PartialMessage<DelegationStateUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.DelegationStateUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(BondState) },
    { no: 2, name: "val_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
    { no: 4, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "block_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegationStateUpdate {
    return new DelegationStateUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegationStateUpdate {
    return new DelegationStateUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegationStateUpdate {
    return new DelegationStateUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: DelegationStateUpdate | PlainMessage<DelegationStateUpdate> | undefined, b: DelegationStateUpdate | PlainMessage<DelegationStateUpdate> | undefined): boolean {
    return proto3.util.equals(DelegationStateUpdate, a, b);
  }
}

/**
 * ValidatorLifecycle is a message that records the lifecycle of
 * a delegation
 *
 * @generated from message babylon.epoching.v1.DelegationLifecycle
 */
export class DelegationLifecycle extends Message<DelegationLifecycle> {
  /**
   * @generated from field: string del_addr = 1;
   */
  delAddr = "";

  /**
   * @generated from field: repeated babylon.epoching.v1.DelegationStateUpdate del_life = 2;
   */
  delLife: DelegationStateUpdate[] = [];

  constructor(data?: PartialMessage<DelegationLifecycle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.DelegationLifecycle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "del_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "del_life", kind: "message", T: DelegationStateUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegationLifecycle {
    return new DelegationLifecycle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegationLifecycle {
    return new DelegationLifecycle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegationLifecycle {
    return new DelegationLifecycle().fromJsonString(jsonString, options);
  }

  static equals(a: DelegationLifecycle | PlainMessage<DelegationLifecycle> | undefined, b: DelegationLifecycle | PlainMessage<DelegationLifecycle> | undefined): boolean {
    return proto3.util.equals(DelegationLifecycle, a, b);
  }
}

/**
 * Validator is a message that denotes a validator
 *
 * @generated from message babylon.epoching.v1.Validator
 */
export class Validator extends Message<Validator> {
  /**
   * addr is the validator's address (in sdk.ValAddress)
   *
   * @generated from field: bytes addr = 1;
   */
  addr = new Uint8Array(0);

  /**
   * power is the validator's voting power
   *
   * @generated from field: int64 power = 2;
   */
  power = protoInt64.zero;

  constructor(data?: PartialMessage<Validator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.Validator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "addr", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Validator {
    return new Validator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Validator {
    return new Validator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Validator {
    return new Validator().fromJsonString(jsonString, options);
  }

  static equals(a: Validator | PlainMessage<Validator> | undefined, b: Validator | PlainMessage<Validator> | undefined): boolean {
    return proto3.util.equals(Validator, a, b);
  }
}

