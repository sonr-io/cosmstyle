// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/epoching/v1/tx.proto (package babylon.epoching.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { MsgBeginRedelegate, MsgCancelUnbondingDelegation, MsgDelegate, MsgUndelegate } from "../../../cosmos/staking/v1beta1/tx_pb.js";
import { Params } from "./params_pb.js";

/**
 * MsgWrappedDelegate is the message for delegating stakes
 *
 * @generated from message babylon.epoching.v1.MsgWrappedDelegate
 */
export class MsgWrappedDelegate extends Message<MsgWrappedDelegate> {
  /**
   * @generated from field: cosmos.staking.v1beta1.MsgDelegate msg = 1;
   */
  msg?: MsgDelegate;

  constructor(data?: PartialMessage<MsgWrappedDelegate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.MsgWrappedDelegate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "message", T: MsgDelegate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWrappedDelegate {
    return new MsgWrappedDelegate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWrappedDelegate {
    return new MsgWrappedDelegate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWrappedDelegate {
    return new MsgWrappedDelegate().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWrappedDelegate | PlainMessage<MsgWrappedDelegate> | undefined, b: MsgWrappedDelegate | PlainMessage<MsgWrappedDelegate> | undefined): boolean {
    return proto3.util.equals(MsgWrappedDelegate, a, b);
  }
}

/**
 * MsgWrappedDelegate is the response to the MsgWrappedDelegate message
 *
 * @generated from message babylon.epoching.v1.MsgWrappedDelegateResponse
 */
export class MsgWrappedDelegateResponse extends Message<MsgWrappedDelegateResponse> {
  constructor(data?: PartialMessage<MsgWrappedDelegateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.MsgWrappedDelegateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWrappedDelegateResponse {
    return new MsgWrappedDelegateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWrappedDelegateResponse {
    return new MsgWrappedDelegateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWrappedDelegateResponse {
    return new MsgWrappedDelegateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWrappedDelegateResponse | PlainMessage<MsgWrappedDelegateResponse> | undefined, b: MsgWrappedDelegateResponse | PlainMessage<MsgWrappedDelegateResponse> | undefined): boolean {
    return proto3.util.equals(MsgWrappedDelegateResponse, a, b);
  }
}

/**
 * MsgWrappedUndelegate is the message for undelegating stakes
 *
 * @generated from message babylon.epoching.v1.MsgWrappedUndelegate
 */
export class MsgWrappedUndelegate extends Message<MsgWrappedUndelegate> {
  /**
   * @generated from field: cosmos.staking.v1beta1.MsgUndelegate msg = 1;
   */
  msg?: MsgUndelegate;

  constructor(data?: PartialMessage<MsgWrappedUndelegate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.MsgWrappedUndelegate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "message", T: MsgUndelegate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWrappedUndelegate {
    return new MsgWrappedUndelegate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWrappedUndelegate {
    return new MsgWrappedUndelegate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWrappedUndelegate {
    return new MsgWrappedUndelegate().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWrappedUndelegate | PlainMessage<MsgWrappedUndelegate> | undefined, b: MsgWrappedUndelegate | PlainMessage<MsgWrappedUndelegate> | undefined): boolean {
    return proto3.util.equals(MsgWrappedUndelegate, a, b);
  }
}

/**
 * MsgWrappedUndelegateResponse is the response to the MsgWrappedUndelegate
 * message
 *
 * @generated from message babylon.epoching.v1.MsgWrappedUndelegateResponse
 */
export class MsgWrappedUndelegateResponse extends Message<MsgWrappedUndelegateResponse> {
  constructor(data?: PartialMessage<MsgWrappedUndelegateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.MsgWrappedUndelegateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWrappedUndelegateResponse {
    return new MsgWrappedUndelegateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWrappedUndelegateResponse {
    return new MsgWrappedUndelegateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWrappedUndelegateResponse {
    return new MsgWrappedUndelegateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWrappedUndelegateResponse | PlainMessage<MsgWrappedUndelegateResponse> | undefined, b: MsgWrappedUndelegateResponse | PlainMessage<MsgWrappedUndelegateResponse> | undefined): boolean {
    return proto3.util.equals(MsgWrappedUndelegateResponse, a, b);
  }
}

/**
 * MsgWrappedDelegate is the message for moving bonded stakes from a
 * validator to another validator
 *
 * @generated from message babylon.epoching.v1.MsgWrappedBeginRedelegate
 */
export class MsgWrappedBeginRedelegate extends Message<MsgWrappedBeginRedelegate> {
  /**
   * @generated from field: cosmos.staking.v1beta1.MsgBeginRedelegate msg = 1;
   */
  msg?: MsgBeginRedelegate;

  constructor(data?: PartialMessage<MsgWrappedBeginRedelegate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.MsgWrappedBeginRedelegate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "message", T: MsgBeginRedelegate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWrappedBeginRedelegate {
    return new MsgWrappedBeginRedelegate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWrappedBeginRedelegate {
    return new MsgWrappedBeginRedelegate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWrappedBeginRedelegate {
    return new MsgWrappedBeginRedelegate().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWrappedBeginRedelegate | PlainMessage<MsgWrappedBeginRedelegate> | undefined, b: MsgWrappedBeginRedelegate | PlainMessage<MsgWrappedBeginRedelegate> | undefined): boolean {
    return proto3.util.equals(MsgWrappedBeginRedelegate, a, b);
  }
}

/**
 * MsgWrappedBeginRedelegateResponse is the response to the
 * MsgWrappedBeginRedelegate message
 *
 * @generated from message babylon.epoching.v1.MsgWrappedBeginRedelegateResponse
 */
export class MsgWrappedBeginRedelegateResponse extends Message<MsgWrappedBeginRedelegateResponse> {
  constructor(data?: PartialMessage<MsgWrappedBeginRedelegateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.MsgWrappedBeginRedelegateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWrappedBeginRedelegateResponse {
    return new MsgWrappedBeginRedelegateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWrappedBeginRedelegateResponse {
    return new MsgWrappedBeginRedelegateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWrappedBeginRedelegateResponse {
    return new MsgWrappedBeginRedelegateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWrappedBeginRedelegateResponse | PlainMessage<MsgWrappedBeginRedelegateResponse> | undefined, b: MsgWrappedBeginRedelegateResponse | PlainMessage<MsgWrappedBeginRedelegateResponse> | undefined): boolean {
    return proto3.util.equals(MsgWrappedBeginRedelegateResponse, a, b);
  }
}

/**
 * MsgWrappedCancelUnbondingDelegation is the message for cancelling
 * an unbonding delegation
 *
 * @generated from message babylon.epoching.v1.MsgWrappedCancelUnbondingDelegation
 */
export class MsgWrappedCancelUnbondingDelegation extends Message<MsgWrappedCancelUnbondingDelegation> {
  /**
   * @generated from field: cosmos.staking.v1beta1.MsgCancelUnbondingDelegation msg = 1;
   */
  msg?: MsgCancelUnbondingDelegation;

  constructor(data?: PartialMessage<MsgWrappedCancelUnbondingDelegation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.MsgWrappedCancelUnbondingDelegation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "message", T: MsgCancelUnbondingDelegation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWrappedCancelUnbondingDelegation {
    return new MsgWrappedCancelUnbondingDelegation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWrappedCancelUnbondingDelegation {
    return new MsgWrappedCancelUnbondingDelegation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWrappedCancelUnbondingDelegation {
    return new MsgWrappedCancelUnbondingDelegation().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWrappedCancelUnbondingDelegation | PlainMessage<MsgWrappedCancelUnbondingDelegation> | undefined, b: MsgWrappedCancelUnbondingDelegation | PlainMessage<MsgWrappedCancelUnbondingDelegation> | undefined): boolean {
    return proto3.util.equals(MsgWrappedCancelUnbondingDelegation, a, b);
  }
}

/**
 * MsgWrappedCancelUnbondingDelegationResponse is the response to the
 * MsgWrappedCancelUnbondingDelegation message
 *
 * @generated from message babylon.epoching.v1.MsgWrappedCancelUnbondingDelegationResponse
 */
export class MsgWrappedCancelUnbondingDelegationResponse extends Message<MsgWrappedCancelUnbondingDelegationResponse> {
  constructor(data?: PartialMessage<MsgWrappedCancelUnbondingDelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.MsgWrappedCancelUnbondingDelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWrappedCancelUnbondingDelegationResponse {
    return new MsgWrappedCancelUnbondingDelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWrappedCancelUnbondingDelegationResponse {
    return new MsgWrappedCancelUnbondingDelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWrappedCancelUnbondingDelegationResponse {
    return new MsgWrappedCancelUnbondingDelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWrappedCancelUnbondingDelegationResponse | PlainMessage<MsgWrappedCancelUnbondingDelegationResponse> | undefined, b: MsgWrappedCancelUnbondingDelegationResponse | PlainMessage<MsgWrappedCancelUnbondingDelegationResponse> | undefined): boolean {
    return proto3.util.equals(MsgWrappedCancelUnbondingDelegationResponse, a, b);
  }
}

/**
 * MsgUpdateParams defines a message for updating epoching module parameters.
 *
 * @generated from message babylon.epoching.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   * just FYI: cosmos.AddressString marks that this field should use type alias
   * for AddressString instead of string, but the functionality is not yet implemented
   * in cosmos-proto
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the epoching parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: babylon.epoching.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse is the response to the MsgUpdateParams message.
 *
 * @generated from message babylon.epoching.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

