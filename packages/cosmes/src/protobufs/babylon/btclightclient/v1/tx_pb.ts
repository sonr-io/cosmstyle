// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/btclightclient/v1/tx.proto (package babylon.btclightclient.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";

/**
 * MsgInsertHeaders defines the message for multiple incoming header bytes
 *
 * @generated from message babylon.btclightclient.v1.MsgInsertHeaders
 */
export class MsgInsertHeaders extends Message<MsgInsertHeaders> {
  /**
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * @generated from field: repeated bytes headers = 2;
   */
  headers: Uint8Array[] = [];

  constructor(data?: PartialMessage<MsgInsertHeaders>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.MsgInsertHeaders";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "headers", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInsertHeaders {
    return new MsgInsertHeaders().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInsertHeaders {
    return new MsgInsertHeaders().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInsertHeaders {
    return new MsgInsertHeaders().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInsertHeaders | PlainMessage<MsgInsertHeaders> | undefined, b: MsgInsertHeaders | PlainMessage<MsgInsertHeaders> | undefined): boolean {
    return proto3.util.equals(MsgInsertHeaders, a, b);
  }
}

/**
 * MsgInsertHeadersResponse defines the response for the InsertHeaders transaction
 *
 * @generated from message babylon.btclightclient.v1.MsgInsertHeadersResponse
 */
export class MsgInsertHeadersResponse extends Message<MsgInsertHeadersResponse> {
  constructor(data?: PartialMessage<MsgInsertHeadersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.MsgInsertHeadersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInsertHeadersResponse {
    return new MsgInsertHeadersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInsertHeadersResponse {
    return new MsgInsertHeadersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInsertHeadersResponse {
    return new MsgInsertHeadersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInsertHeadersResponse | PlainMessage<MsgInsertHeadersResponse> | undefined, b: MsgInsertHeadersResponse | PlainMessage<MsgInsertHeadersResponse> | undefined): boolean {
    return proto3.util.equals(MsgInsertHeadersResponse, a, b);
  }
}

/**
 * MsgUpdateParams defines a message for updating btc light client module parameters.
 *
 * @generated from message babylon.btclightclient.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   * just FYI: cosmos.AddressString marks that this field should use type alias
   * for AddressString instead of string, but the functionality is not yet implemented
   * in cosmos-proto
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the btc light client parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: babylon.btclightclient.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse is the response to the MsgUpdateParams message.
 *
 * @generated from message babylon.btclightclient.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

