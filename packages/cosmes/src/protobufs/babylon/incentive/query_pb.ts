// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/incentive/query.proto (package babylon.incentive, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Gauge, RewardGauge } from "./incentive_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message babylon.incentive.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.incentive.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message babylon.incentive.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: babylon.incentive.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.incentive.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryRewardGaugesRequest is request type for the Query/RewardGauges RPC method.
 *
 * @generated from message babylon.incentive.QueryRewardGaugesRequest
 */
export class QueryRewardGaugesRequest extends Message<QueryRewardGaugesRequest> {
  /**
   * address is the address of the stakeholder in bech32 string
   *
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryRewardGaugesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.incentive.QueryRewardGaugesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardGaugesRequest {
    return new QueryRewardGaugesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardGaugesRequest {
    return new QueryRewardGaugesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardGaugesRequest {
    return new QueryRewardGaugesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardGaugesRequest | PlainMessage<QueryRewardGaugesRequest> | undefined, b: QueryRewardGaugesRequest | PlainMessage<QueryRewardGaugesRequest> | undefined): boolean {
    return proto3.util.equals(QueryRewardGaugesRequest, a, b);
  }
}

/**
 * QueryRewardGaugesResponse is response type for the Query/RewardGauges RPC method.
 *
 * @generated from message babylon.incentive.QueryRewardGaugesResponse
 */
export class QueryRewardGaugesResponse extends Message<QueryRewardGaugesResponse> {
  /**
   * reward_gauges is the map of reward gauges, where key is the stakeholder type
   * and value is the reward gauge holding all rewards for the stakeholder in that type
   *
   * @generated from field: map<string, babylon.incentive.RewardGauge> reward_gauges = 1;
   */
  rewardGauges: { [key: string]: RewardGauge } = {};

  constructor(data?: PartialMessage<QueryRewardGaugesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.incentive.QueryRewardGaugesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reward_gauges", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: RewardGauge} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardGaugesResponse {
    return new QueryRewardGaugesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardGaugesResponse {
    return new QueryRewardGaugesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardGaugesResponse {
    return new QueryRewardGaugesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardGaugesResponse | PlainMessage<QueryRewardGaugesResponse> | undefined, b: QueryRewardGaugesResponse | PlainMessage<QueryRewardGaugesResponse> | undefined): boolean {
    return proto3.util.equals(QueryRewardGaugesResponse, a, b);
  }
}

/**
 * QueryBTCStakingGaugeRequest is request type for the Query/BTCStakingGauge RPC method.
 *
 * @generated from message babylon.incentive.QueryBTCStakingGaugeRequest
 */
export class QueryBTCStakingGaugeRequest extends Message<QueryBTCStakingGaugeRequest> {
  /**
   * height is the queried Babylon height
   *
   * @generated from field: uint64 height = 1;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<QueryBTCStakingGaugeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.incentive.QueryBTCStakingGaugeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBTCStakingGaugeRequest {
    return new QueryBTCStakingGaugeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBTCStakingGaugeRequest {
    return new QueryBTCStakingGaugeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBTCStakingGaugeRequest {
    return new QueryBTCStakingGaugeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBTCStakingGaugeRequest | PlainMessage<QueryBTCStakingGaugeRequest> | undefined, b: QueryBTCStakingGaugeRequest | PlainMessage<QueryBTCStakingGaugeRequest> | undefined): boolean {
    return proto3.util.equals(QueryBTCStakingGaugeRequest, a, b);
  }
}

/**
 * QueryBTCStakingGaugeResponse is response type for the Query/BTCStakingGauge RPC method.
 *
 * @generated from message babylon.incentive.QueryBTCStakingGaugeResponse
 */
export class QueryBTCStakingGaugeResponse extends Message<QueryBTCStakingGaugeResponse> {
  /**
   * gauge is the BTC staking gauge at the queried height 
   *
   * @generated from field: babylon.incentive.Gauge gauge = 1;
   */
  gauge?: Gauge;

  constructor(data?: PartialMessage<QueryBTCStakingGaugeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.incentive.QueryBTCStakingGaugeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gauge", kind: "message", T: Gauge },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBTCStakingGaugeResponse {
    return new QueryBTCStakingGaugeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBTCStakingGaugeResponse {
    return new QueryBTCStakingGaugeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBTCStakingGaugeResponse {
    return new QueryBTCStakingGaugeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBTCStakingGaugeResponse | PlainMessage<QueryBTCStakingGaugeResponse> | undefined, b: QueryBTCStakingGaugeResponse | PlainMessage<QueryBTCStakingGaugeResponse> | undefined): boolean {
    return proto3.util.equals(QueryBTCStakingGaugeResponse, a, b);
  }
}

/**
 * QueryBTCTimestampingGaugeRequest is request type for the Query/BTCTimestampingGauge RPC method.
 *
 * @generated from message babylon.incentive.QueryBTCTimestampingGaugeRequest
 */
export class QueryBTCTimestampingGaugeRequest extends Message<QueryBTCTimestampingGaugeRequest> {
  /**
   * epoch_num is the queried epoch number
   *
   * @generated from field: uint64 epoch_num = 1;
   */
  epochNum = protoInt64.zero;

  constructor(data?: PartialMessage<QueryBTCTimestampingGaugeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.incentive.QueryBTCTimestampingGaugeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_num", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBTCTimestampingGaugeRequest {
    return new QueryBTCTimestampingGaugeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBTCTimestampingGaugeRequest {
    return new QueryBTCTimestampingGaugeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBTCTimestampingGaugeRequest {
    return new QueryBTCTimestampingGaugeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBTCTimestampingGaugeRequest | PlainMessage<QueryBTCTimestampingGaugeRequest> | undefined, b: QueryBTCTimestampingGaugeRequest | PlainMessage<QueryBTCTimestampingGaugeRequest> | undefined): boolean {
    return proto3.util.equals(QueryBTCTimestampingGaugeRequest, a, b);
  }
}

/**
 * QueryBTCTimestampingGaugeResponse is response type for the Query/BTCTimestampingGauge RPC method.
 *
 * @generated from message babylon.incentive.QueryBTCTimestampingGaugeResponse
 */
export class QueryBTCTimestampingGaugeResponse extends Message<QueryBTCTimestampingGaugeResponse> {
  /**
   * gauge is the BTC timestamping gauge at the queried epoch 
   *
   * @generated from field: babylon.incentive.Gauge gauge = 1;
   */
  gauge?: Gauge;

  constructor(data?: PartialMessage<QueryBTCTimestampingGaugeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.incentive.QueryBTCTimestampingGaugeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gauge", kind: "message", T: Gauge },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBTCTimestampingGaugeResponse {
    return new QueryBTCTimestampingGaugeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBTCTimestampingGaugeResponse {
    return new QueryBTCTimestampingGaugeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBTCTimestampingGaugeResponse {
    return new QueryBTCTimestampingGaugeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBTCTimestampingGaugeResponse | PlainMessage<QueryBTCTimestampingGaugeResponse> | undefined, b: QueryBTCTimestampingGaugeResponse | PlainMessage<QueryBTCTimestampingGaugeResponse> | undefined): boolean {
    return proto3.util.equals(QueryBTCTimestampingGaugeResponse, a, b);
  }
}

