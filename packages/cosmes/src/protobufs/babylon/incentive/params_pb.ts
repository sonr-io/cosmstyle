// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/incentive/params.proto (package babylon.incentive, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Params defines the parameters for the module, including portions of rewards
 * distributed to each type of stakeholder. Note that sum of the portions should
 * be strictly less than 1 so that the rest will go to Comet validators/delegations
 * adapted from https://github.com/cosmos/cosmos-sdk/blob/release/v0.47.x/proto/cosmos/distribution/v1beta1/distribution.proto
 *
 * @generated from message babylon.incentive.Params
 */
export class Params extends Message<Params> {
  /**
   * submitter_portion is the portion of rewards that goes to submitter
   *
   * @generated from field: string submitter_portion = 1;
   */
  submitterPortion = "";

  /**
   * reporter_portion is the portion of rewards that goes to reporter
   *
   * @generated from field: string reporter_portion = 2;
   */
  reporterPortion = "";

  /**
   * btc_staking_portion is the portion of rewards that goes to Finality Providers/delegations
   * NOTE: the portion of each Finality Provider/delegation is calculated by using its voting
   * power and finality provider's commission
   *
   * @generated from field: string btc_staking_portion = 3;
   */
  btcStakingPortion = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.incentive.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "submitter_portion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reporter_portion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "btc_staking_portion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

