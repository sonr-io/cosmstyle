// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file babylon/btcstaking/v1/query.proto (package babylon.btcstaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryActivatedHeightRequest, QueryActivatedHeightResponse, QueryActiveFinalityProvidersAtHeightRequest, QueryActiveFinalityProvidersAtHeightResponse, QueryBTCDelegationRequest, QueryBTCDelegationResponse, QueryBTCDelegationsRequest, QueryBTCDelegationsResponse, QueryFinalityProviderCurrentPowerRequest, QueryFinalityProviderCurrentPowerResponse, QueryFinalityProviderDelegationsRequest, QueryFinalityProviderDelegationsResponse, QueryFinalityProviderPowerAtHeightRequest, QueryFinalityProviderPowerAtHeightResponse, QueryFinalityProviderRequest, QueryFinalityProviderResponse, QueryFinalityProvidersRequest, QueryFinalityProvidersResponse, QueryParamsRequest, QueryParamsResponse } from "./query_pb.js";

const TYPE_NAME = "babylon.btcstaking.v1.Query";

/**
 * Parameters queries the parameters of the module.
 *
 * @generated from rpc babylon.btcstaking.v1.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: QueryParamsRequest,
  Response: QueryParamsResponse,
} as const;

/**
 * FinalityProviders queries all finality providers
 *
 * @generated from rpc babylon.btcstaking.v1.Query.FinalityProviders
 */
export const QueryFinalityProvidersService = {
  typeName: TYPE_NAME,
  method: "FinalityProviders",
  Request: QueryFinalityProvidersRequest,
  Response: QueryFinalityProvidersResponse,
} as const;

/**
 * FinalityProvider info about one finality provider
 *
 * @generated from rpc babylon.btcstaking.v1.Query.FinalityProvider
 */
export const QueryFinalityProviderService = {
  typeName: TYPE_NAME,
  method: "FinalityProvider",
  Request: QueryFinalityProviderRequest,
  Response: QueryFinalityProviderResponse,
} as const;

/**
 * BTCDelegations queries all BTC delegations under a given status
 *
 * @generated from rpc babylon.btcstaking.v1.Query.BTCDelegations
 */
export const QueryBTCDelegationsService = {
  typeName: TYPE_NAME,
  method: "BTCDelegations",
  Request: QueryBTCDelegationsRequest,
  Response: QueryBTCDelegationsResponse,
} as const;

/**
 * ActiveFinalityProvidersAtHeight queries finality providers with non zero voting power at given height.
 *
 * @generated from rpc babylon.btcstaking.v1.Query.ActiveFinalityProvidersAtHeight
 */
export const QueryActiveFinalityProvidersAtHeightService = {
  typeName: TYPE_NAME,
  method: "ActiveFinalityProvidersAtHeight",
  Request: QueryActiveFinalityProvidersAtHeightRequest,
  Response: QueryActiveFinalityProvidersAtHeightResponse,
} as const;

/**
 * FinalityProviderPowerAtHeight queries the voting power of a finality provider at a given height
 *
 * @generated from rpc babylon.btcstaking.v1.Query.FinalityProviderPowerAtHeight
 */
export const QueryFinalityProviderPowerAtHeightService = {
  typeName: TYPE_NAME,
  method: "FinalityProviderPowerAtHeight",
  Request: QueryFinalityProviderPowerAtHeightRequest,
  Response: QueryFinalityProviderPowerAtHeightResponse,
} as const;

/**
 * FinalityProviderCurrentPower queries the voting power of a finality provider at the current height
 *
 * @generated from rpc babylon.btcstaking.v1.Query.FinalityProviderCurrentPower
 */
export const QueryFinalityProviderCurrentPowerService = {
  typeName: TYPE_NAME,
  method: "FinalityProviderCurrentPower",
  Request: QueryFinalityProviderCurrentPowerRequest,
  Response: QueryFinalityProviderCurrentPowerResponse,
} as const;

/**
 * ActivatedHeight queries the height when BTC staking protocol is activated, i.e., the first height when
 * there exists 1 finality provider with voting power
 *
 * @generated from rpc babylon.btcstaking.v1.Query.ActivatedHeight
 */
export const QueryActivatedHeightService = {
  typeName: TYPE_NAME,
  method: "ActivatedHeight",
  Request: QueryActivatedHeightRequest,
  Response: QueryActivatedHeightResponse,
} as const;

/**
 * FinalityProviderDelegations queries all BTC delegations of the given finality provider
 *
 * @generated from rpc babylon.btcstaking.v1.Query.FinalityProviderDelegations
 */
export const QueryFinalityProviderDelegationsService = {
  typeName: TYPE_NAME,
  method: "FinalityProviderDelegations",
  Request: QueryFinalityProviderDelegationsRequest,
  Response: QueryFinalityProviderDelegationsResponse,
} as const;

/**
 * BTCDelegation retrieves delegation by corresponding staking tx hash
 *
 * @generated from rpc babylon.btcstaking.v1.Query.BTCDelegation
 */
export const QueryBTCDelegationService = {
  typeName: TYPE_NAME,
  method: "BTCDelegation",
  Request: QueryBTCDelegationRequest,
  Response: QueryBTCDelegationResponse,
} as const;

