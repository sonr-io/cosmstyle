// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/btcstaking/v1/query.proto (package babylon.btcstaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { BTCDelegationStatus, CovenantAdaptorSignatures, FinalityProviderWithMeta, SignatureInfo } from "./btcstaking_pb.js";
import { Description } from "../../../cosmos/staking/v1beta1/staking_pb.js";
import { PubKey } from "../../../cosmos/crypto/secp256k1/keys_pb.js";
import { ProofOfPossession } from "./pop_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: babylon.btcstaking.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryFinalityProvidersRequest is the request type for the
 * Query/FinalityProviders RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryFinalityProvidersRequest
 */
export class QueryFinalityProvidersRequest extends Message<QueryFinalityProvidersRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryFinalityProvidersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryFinalityProvidersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFinalityProvidersRequest {
    return new QueryFinalityProvidersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFinalityProvidersRequest {
    return new QueryFinalityProvidersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFinalityProvidersRequest {
    return new QueryFinalityProvidersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFinalityProvidersRequest | PlainMessage<QueryFinalityProvidersRequest> | undefined, b: QueryFinalityProvidersRequest | PlainMessage<QueryFinalityProvidersRequest> | undefined): boolean {
    return proto3.util.equals(QueryFinalityProvidersRequest, a, b);
  }
}

/**
 * QueryFinalityProvidersResponse is the response type for the
 * Query/FinalityProviders RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryFinalityProvidersResponse
 */
export class QueryFinalityProvidersResponse extends Message<QueryFinalityProvidersResponse> {
  /**
   * finality_providers contains all the finality providers
   *
   * @generated from field: repeated babylon.btcstaking.v1.FinalityProviderResponse finality_providers = 1;
   */
  finalityProviders: FinalityProviderResponse[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryFinalityProvidersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryFinalityProvidersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "finality_providers", kind: "message", T: FinalityProviderResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFinalityProvidersResponse {
    return new QueryFinalityProvidersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFinalityProvidersResponse {
    return new QueryFinalityProvidersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFinalityProvidersResponse {
    return new QueryFinalityProvidersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFinalityProvidersResponse | PlainMessage<QueryFinalityProvidersResponse> | undefined, b: QueryFinalityProvidersResponse | PlainMessage<QueryFinalityProvidersResponse> | undefined): boolean {
    return proto3.util.equals(QueryFinalityProvidersResponse, a, b);
  }
}

/**
 * QueryFinalityProviderRequest requests information about a finality provider
 *
 * @generated from message babylon.btcstaking.v1.QueryFinalityProviderRequest
 */
export class QueryFinalityProviderRequest extends Message<QueryFinalityProviderRequest> {
  /**
   * fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider
   *
   * @generated from field: string fp_btc_pk_hex = 1;
   */
  fpBtcPkHex = "";

  constructor(data?: PartialMessage<QueryFinalityProviderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryFinalityProviderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fp_btc_pk_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFinalityProviderRequest {
    return new QueryFinalityProviderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFinalityProviderRequest {
    return new QueryFinalityProviderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFinalityProviderRequest {
    return new QueryFinalityProviderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFinalityProviderRequest | PlainMessage<QueryFinalityProviderRequest> | undefined, b: QueryFinalityProviderRequest | PlainMessage<QueryFinalityProviderRequest> | undefined): boolean {
    return proto3.util.equals(QueryFinalityProviderRequest, a, b);
  }
}

/**
 * QueryFinalityProviderResponse contains information about a finality provider
 *
 * @generated from message babylon.btcstaking.v1.QueryFinalityProviderResponse
 */
export class QueryFinalityProviderResponse extends Message<QueryFinalityProviderResponse> {
  /**
   * finality_provider contains the FinalityProvider
   *
   * @generated from field: babylon.btcstaking.v1.FinalityProviderResponse finality_provider = 1;
   */
  finalityProvider?: FinalityProviderResponse;

  constructor(data?: PartialMessage<QueryFinalityProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryFinalityProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "finality_provider", kind: "message", T: FinalityProviderResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFinalityProviderResponse {
    return new QueryFinalityProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFinalityProviderResponse {
    return new QueryFinalityProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFinalityProviderResponse {
    return new QueryFinalityProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFinalityProviderResponse | PlainMessage<QueryFinalityProviderResponse> | undefined, b: QueryFinalityProviderResponse | PlainMessage<QueryFinalityProviderResponse> | undefined): boolean {
    return proto3.util.equals(QueryFinalityProviderResponse, a, b);
  }
}

/**
 * QueryBTCDelegationsRequest is the request type for the
 * Query/BTCDelegations RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryBTCDelegationsRequest
 */
export class QueryBTCDelegationsRequest extends Message<QueryBTCDelegationsRequest> {
  /**
   * status is the queried status for BTC delegations
   *
   * @generated from field: babylon.btcstaking.v1.BTCDelegationStatus status = 1;
   */
  status = BTCDelegationStatus.PENDING;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryBTCDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryBTCDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(BTCDelegationStatus) },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBTCDelegationsRequest {
    return new QueryBTCDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBTCDelegationsRequest {
    return new QueryBTCDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBTCDelegationsRequest {
    return new QueryBTCDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBTCDelegationsRequest | PlainMessage<QueryBTCDelegationsRequest> | undefined, b: QueryBTCDelegationsRequest | PlainMessage<QueryBTCDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryBTCDelegationsRequest, a, b);
  }
}

/**
 * QueryBTCDelegationsResponse is the response type for the
 * Query/BTCDelegations RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryBTCDelegationsResponse
 */
export class QueryBTCDelegationsResponse extends Message<QueryBTCDelegationsResponse> {
  /**
   * btc_delegations contains all the queried BTC delegations under the given status
   *
   * @generated from field: repeated babylon.btcstaking.v1.BTCDelegationResponse btc_delegations = 1;
   */
  btcDelegations: BTCDelegationResponse[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryBTCDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryBTCDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "btc_delegations", kind: "message", T: BTCDelegationResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBTCDelegationsResponse {
    return new QueryBTCDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBTCDelegationsResponse {
    return new QueryBTCDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBTCDelegationsResponse {
    return new QueryBTCDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBTCDelegationsResponse | PlainMessage<QueryBTCDelegationsResponse> | undefined, b: QueryBTCDelegationsResponse | PlainMessage<QueryBTCDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryBTCDelegationsResponse, a, b);
  }
}

/**
 * QueryFinalityProviderPowerAtHeightRequest is the request type for the
 * Query/FinalityProviderPowerAtHeight RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryFinalityProviderPowerAtHeightRequest
 */
export class QueryFinalityProviderPowerAtHeightRequest extends Message<QueryFinalityProviderPowerAtHeightRequest> {
  /**
   * fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider that
   * this BTC delegation delegates to
   * the PK follows encoding in BIP-340 spec
   *
   * @generated from field: string fp_btc_pk_hex = 1;
   */
  fpBtcPkHex = "";

  /**
   * height is used for querying the given finality provider's voting power at this height
   *
   * @generated from field: uint64 height = 2;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<QueryFinalityProviderPowerAtHeightRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryFinalityProviderPowerAtHeightRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fp_btc_pk_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFinalityProviderPowerAtHeightRequest {
    return new QueryFinalityProviderPowerAtHeightRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFinalityProviderPowerAtHeightRequest {
    return new QueryFinalityProviderPowerAtHeightRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFinalityProviderPowerAtHeightRequest {
    return new QueryFinalityProviderPowerAtHeightRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFinalityProviderPowerAtHeightRequest | PlainMessage<QueryFinalityProviderPowerAtHeightRequest> | undefined, b: QueryFinalityProviderPowerAtHeightRequest | PlainMessage<QueryFinalityProviderPowerAtHeightRequest> | undefined): boolean {
    return proto3.util.equals(QueryFinalityProviderPowerAtHeightRequest, a, b);
  }
}

/**
 * QueryFinalityProviderPowerAtHeightResponse is the response type for the
 * Query/FinalityProviderPowerAtHeight RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryFinalityProviderPowerAtHeightResponse
 */
export class QueryFinalityProviderPowerAtHeightResponse extends Message<QueryFinalityProviderPowerAtHeightResponse> {
  /**
   * voting_power is the voting power of the finality provider
   *
   * @generated from field: uint64 voting_power = 1;
   */
  votingPower = protoInt64.zero;

  constructor(data?: PartialMessage<QueryFinalityProviderPowerAtHeightResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryFinalityProviderPowerAtHeightResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "voting_power", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFinalityProviderPowerAtHeightResponse {
    return new QueryFinalityProviderPowerAtHeightResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFinalityProviderPowerAtHeightResponse {
    return new QueryFinalityProviderPowerAtHeightResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFinalityProviderPowerAtHeightResponse {
    return new QueryFinalityProviderPowerAtHeightResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFinalityProviderPowerAtHeightResponse | PlainMessage<QueryFinalityProviderPowerAtHeightResponse> | undefined, b: QueryFinalityProviderPowerAtHeightResponse | PlainMessage<QueryFinalityProviderPowerAtHeightResponse> | undefined): boolean {
    return proto3.util.equals(QueryFinalityProviderPowerAtHeightResponse, a, b);
  }
}

/**
 * QueryFinalityProviderCurrentPowerRequest is the request type for the
 * Query/FinalityProviderCurrentPower RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryFinalityProviderCurrentPowerRequest
 */
export class QueryFinalityProviderCurrentPowerRequest extends Message<QueryFinalityProviderCurrentPowerRequest> {
  /**
   * fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider that
   * this BTC delegation delegates to
   * the PK follows encoding in BIP-340 spec
   *
   * @generated from field: string fp_btc_pk_hex = 1;
   */
  fpBtcPkHex = "";

  constructor(data?: PartialMessage<QueryFinalityProviderCurrentPowerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryFinalityProviderCurrentPowerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fp_btc_pk_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFinalityProviderCurrentPowerRequest {
    return new QueryFinalityProviderCurrentPowerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFinalityProviderCurrentPowerRequest {
    return new QueryFinalityProviderCurrentPowerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFinalityProviderCurrentPowerRequest {
    return new QueryFinalityProviderCurrentPowerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFinalityProviderCurrentPowerRequest | PlainMessage<QueryFinalityProviderCurrentPowerRequest> | undefined, b: QueryFinalityProviderCurrentPowerRequest | PlainMessage<QueryFinalityProviderCurrentPowerRequest> | undefined): boolean {
    return proto3.util.equals(QueryFinalityProviderCurrentPowerRequest, a, b);
  }
}

/**
 * QueryFinalityProviderCurrentPowerResponse is the response type for the
 * Query/FinalityProviderCurrentPower RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryFinalityProviderCurrentPowerResponse
 */
export class QueryFinalityProviderCurrentPowerResponse extends Message<QueryFinalityProviderCurrentPowerResponse> {
  /**
   * height is the current height
   *
   * @generated from field: uint64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * voting_power is the voting power of the finality provider
   *
   * @generated from field: uint64 voting_power = 2;
   */
  votingPower = protoInt64.zero;

  constructor(data?: PartialMessage<QueryFinalityProviderCurrentPowerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryFinalityProviderCurrentPowerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "voting_power", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFinalityProviderCurrentPowerResponse {
    return new QueryFinalityProviderCurrentPowerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFinalityProviderCurrentPowerResponse {
    return new QueryFinalityProviderCurrentPowerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFinalityProviderCurrentPowerResponse {
    return new QueryFinalityProviderCurrentPowerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFinalityProviderCurrentPowerResponse | PlainMessage<QueryFinalityProviderCurrentPowerResponse> | undefined, b: QueryFinalityProviderCurrentPowerResponse | PlainMessage<QueryFinalityProviderCurrentPowerResponse> | undefined): boolean {
    return proto3.util.equals(QueryFinalityProviderCurrentPowerResponse, a, b);
  }
}

/**
 * QueryActiveFinalityProvidersAtHeightRequest is the request type for the
 * Query/ActiveFinalityProvidersAtHeight RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryActiveFinalityProvidersAtHeightRequest
 */
export class QueryActiveFinalityProvidersAtHeightRequest extends Message<QueryActiveFinalityProvidersAtHeightRequest> {
  /**
   * height defines at which Babylon height to query the finality providers info.
   *
   * @generated from field: uint64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryActiveFinalityProvidersAtHeightRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryActiveFinalityProvidersAtHeightRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryActiveFinalityProvidersAtHeightRequest {
    return new QueryActiveFinalityProvidersAtHeightRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryActiveFinalityProvidersAtHeightRequest {
    return new QueryActiveFinalityProvidersAtHeightRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryActiveFinalityProvidersAtHeightRequest {
    return new QueryActiveFinalityProvidersAtHeightRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryActiveFinalityProvidersAtHeightRequest | PlainMessage<QueryActiveFinalityProvidersAtHeightRequest> | undefined, b: QueryActiveFinalityProvidersAtHeightRequest | PlainMessage<QueryActiveFinalityProvidersAtHeightRequest> | undefined): boolean {
    return proto3.util.equals(QueryActiveFinalityProvidersAtHeightRequest, a, b);
  }
}

/**
 * QueryActiveFinalityProvidersAtHeightResponse is the response type for the
 * Query/ActiveFinalityProvidersAtHeight RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryActiveFinalityProvidersAtHeightResponse
 */
export class QueryActiveFinalityProvidersAtHeightResponse extends Message<QueryActiveFinalityProvidersAtHeightResponse> {
  /**
   * finality_providers contains all the queried finality providersn.
   *
   * @generated from field: repeated babylon.btcstaking.v1.FinalityProviderWithMeta finality_providers = 1;
   */
  finalityProviders: FinalityProviderWithMeta[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryActiveFinalityProvidersAtHeightResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryActiveFinalityProvidersAtHeightResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "finality_providers", kind: "message", T: FinalityProviderWithMeta, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryActiveFinalityProvidersAtHeightResponse {
    return new QueryActiveFinalityProvidersAtHeightResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryActiveFinalityProvidersAtHeightResponse {
    return new QueryActiveFinalityProvidersAtHeightResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryActiveFinalityProvidersAtHeightResponse {
    return new QueryActiveFinalityProvidersAtHeightResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryActiveFinalityProvidersAtHeightResponse | PlainMessage<QueryActiveFinalityProvidersAtHeightResponse> | undefined, b: QueryActiveFinalityProvidersAtHeightResponse | PlainMessage<QueryActiveFinalityProvidersAtHeightResponse> | undefined): boolean {
    return proto3.util.equals(QueryActiveFinalityProvidersAtHeightResponse, a, b);
  }
}

/**
 * QueryActivatedHeightRequest is the request type for the Query/ActivatedHeight RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryActivatedHeightRequest
 */
export class QueryActivatedHeightRequest extends Message<QueryActivatedHeightRequest> {
  constructor(data?: PartialMessage<QueryActivatedHeightRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryActivatedHeightRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryActivatedHeightRequest {
    return new QueryActivatedHeightRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryActivatedHeightRequest {
    return new QueryActivatedHeightRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryActivatedHeightRequest {
    return new QueryActivatedHeightRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryActivatedHeightRequest | PlainMessage<QueryActivatedHeightRequest> | undefined, b: QueryActivatedHeightRequest | PlainMessage<QueryActivatedHeightRequest> | undefined): boolean {
    return proto3.util.equals(QueryActivatedHeightRequest, a, b);
  }
}

/**
 * QueryActivatedHeightResponse is the response type for the Query/ActivatedHeight RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryActivatedHeightResponse
 */
export class QueryActivatedHeightResponse extends Message<QueryActivatedHeightResponse> {
  /**
   * @generated from field: uint64 height = 1;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<QueryActivatedHeightResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryActivatedHeightResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryActivatedHeightResponse {
    return new QueryActivatedHeightResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryActivatedHeightResponse {
    return new QueryActivatedHeightResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryActivatedHeightResponse {
    return new QueryActivatedHeightResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryActivatedHeightResponse | PlainMessage<QueryActivatedHeightResponse> | undefined, b: QueryActivatedHeightResponse | PlainMessage<QueryActivatedHeightResponse> | undefined): boolean {
    return proto3.util.equals(QueryActivatedHeightResponse, a, b);
  }
}

/**
 * QueryFinalityProviderDelegationsRequest is the request type for the
 * Query/FinalityProviderDelegations RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryFinalityProviderDelegationsRequest
 */
export class QueryFinalityProviderDelegationsRequest extends Message<QueryFinalityProviderDelegationsRequest> {
  /**
   * fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality providerthat
   * this BTC delegation delegates to
   * the PK follows encoding in BIP-340 spec
   *
   * @generated from field: string fp_btc_pk_hex = 1;
   */
  fpBtcPkHex = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryFinalityProviderDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryFinalityProviderDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fp_btc_pk_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFinalityProviderDelegationsRequest {
    return new QueryFinalityProviderDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFinalityProviderDelegationsRequest {
    return new QueryFinalityProviderDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFinalityProviderDelegationsRequest {
    return new QueryFinalityProviderDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFinalityProviderDelegationsRequest | PlainMessage<QueryFinalityProviderDelegationsRequest> | undefined, b: QueryFinalityProviderDelegationsRequest | PlainMessage<QueryFinalityProviderDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryFinalityProviderDelegationsRequest, a, b);
  }
}

/**
 * QueryFinalityProviderDelegationsResponse is the response type for the
 * Query/FinalityProviderDelegations RPC method.
 *
 * @generated from message babylon.btcstaking.v1.QueryFinalityProviderDelegationsResponse
 */
export class QueryFinalityProviderDelegationsResponse extends Message<QueryFinalityProviderDelegationsResponse> {
  /**
   * btc_delegator_delegations contains all the queried BTC delegations.
   *
   * @generated from field: repeated babylon.btcstaking.v1.BTCDelegatorDelegationsResponse btc_delegator_delegations = 1;
   */
  btcDelegatorDelegations: BTCDelegatorDelegationsResponse[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryFinalityProviderDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryFinalityProviderDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "btc_delegator_delegations", kind: "message", T: BTCDelegatorDelegationsResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFinalityProviderDelegationsResponse {
    return new QueryFinalityProviderDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFinalityProviderDelegationsResponse {
    return new QueryFinalityProviderDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFinalityProviderDelegationsResponse {
    return new QueryFinalityProviderDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFinalityProviderDelegationsResponse | PlainMessage<QueryFinalityProviderDelegationsResponse> | undefined, b: QueryFinalityProviderDelegationsResponse | PlainMessage<QueryFinalityProviderDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryFinalityProviderDelegationsResponse, a, b);
  }
}

/**
 * QueryBTCDelegationRequest is the request type to retrieve a BTC delegation by
 * staking tx hash
 *
 * @generated from message babylon.btcstaking.v1.QueryBTCDelegationRequest
 */
export class QueryBTCDelegationRequest extends Message<QueryBTCDelegationRequest> {
  /**
   * Hash of staking transaction in btc format
   *
   * @generated from field: string staking_tx_hash_hex = 1;
   */
  stakingTxHashHex = "";

  constructor(data?: PartialMessage<QueryBTCDelegationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryBTCDelegationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "staking_tx_hash_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBTCDelegationRequest {
    return new QueryBTCDelegationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBTCDelegationRequest {
    return new QueryBTCDelegationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBTCDelegationRequest {
    return new QueryBTCDelegationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBTCDelegationRequest | PlainMessage<QueryBTCDelegationRequest> | undefined, b: QueryBTCDelegationRequest | PlainMessage<QueryBTCDelegationRequest> | undefined): boolean {
    return proto3.util.equals(QueryBTCDelegationRequest, a, b);
  }
}

/**
 * QueryBTCDelegationResponse is response type matching QueryBTCDelegationRequest
 * and containing BTC delegation information
 *
 * @generated from message babylon.btcstaking.v1.QueryBTCDelegationResponse
 */
export class QueryBTCDelegationResponse extends Message<QueryBTCDelegationResponse> {
  /**
   * BTCDelegation represents the client needed information of an BTCDelegation.
   *
   * @generated from field: babylon.btcstaking.v1.BTCDelegationResponse btc_delegation = 1;
   */
  btcDelegation?: BTCDelegationResponse;

  constructor(data?: PartialMessage<QueryBTCDelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.QueryBTCDelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "btc_delegation", kind: "message", T: BTCDelegationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBTCDelegationResponse {
    return new QueryBTCDelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBTCDelegationResponse {
    return new QueryBTCDelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBTCDelegationResponse {
    return new QueryBTCDelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBTCDelegationResponse | PlainMessage<QueryBTCDelegationResponse> | undefined, b: QueryBTCDelegationResponse | PlainMessage<QueryBTCDelegationResponse> | undefined): boolean {
    return proto3.util.equals(QueryBTCDelegationResponse, a, b);
  }
}

/**
 * BTCDelegationResponse is the client needed information from a BTCDelegation with the current status based on parameters.
 *
 * @generated from message babylon.btcstaking.v1.BTCDelegationResponse
 */
export class BTCDelegationResponse extends Message<BTCDelegationResponse> {
  /**
   * btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
   * the PK follows encoding in BIP-340 spec
   *
   * @generated from field: bytes btc_pk = 1;
   */
  btcPk = new Uint8Array(0);

  /**
   * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
   * this BTC delegation delegates to
   *
   * @generated from field: repeated bytes fp_btc_pk_list = 2;
   */
  fpBtcPkList: Uint8Array[] = [];

  /**
   * start_height is the start BTC height of the BTC delegation
   * it is the start BTC height of the timelock
   *
   * @generated from field: uint64 start_height = 3;
   */
  startHeight = protoInt64.zero;

  /**
   * end_height is the end height of the BTC delegation
   * it is the end BTC height of the timelock - w
   *
   * @generated from field: uint64 end_height = 4;
   */
  endHeight = protoInt64.zero;

  /**
   * total_sat is the total amount of BTC stakes in this delegation
   * quantified in satoshi
   *
   * @generated from field: uint64 total_sat = 5;
   */
  totalSat = protoInt64.zero;

  /**
   * staking_tx_hex is the hex string of staking tx
   *
   * @generated from field: string staking_tx_hex = 6;
   */
  stakingTxHex = "";

  /**
   * slashing_tx_hex is the hex string of slashing tx
   *
   * @generated from field: string slashing_tx_hex = 7;
   */
  slashingTxHex = "";

  /**
   * delegator_slash_sig_hex is the signature on the slashing tx
   * by the delegator (i.e., SK corresponding to btc_pk) as string hex.
   * It will be a part of the witness for the staking tx output.
   *
   * @generated from field: string delegator_slash_sig_hex = 8;
   */
  delegatorSlashSigHex = "";

  /**
   * covenant_sigs is a list of adaptor signatures on the slashing tx
   * by each covenant member
   * It will be a part of the witness for the staking tx output.
   *
   * @generated from field: repeated babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 9;
   */
  covenantSigs: CovenantAdaptorSignatures[] = [];

  /**
   * staking_output_idx is the index of the staking output in the staking tx
   *
   * @generated from field: uint32 staking_output_idx = 10;
   */
  stakingOutputIdx = 0;

  /**
   * whether this delegation is active
   *
   * @generated from field: bool active = 11;
   */
  active = false;

  /**
   * descriptive status of current delegation.
   *
   * @generated from field: string status_desc = 12;
   */
  statusDesc = "";

  /**
   * unbonding_time used in unbonding output timelock path and in slashing transactions
   * change outputs
   *
   * @generated from field: uint32 unbonding_time = 13;
   */
  unbondingTime = 0;

  /**
   * undelegation_response is the undelegation info of this delegation.
   *
   * @generated from field: babylon.btcstaking.v1.BTCUndelegationResponse undelegation_response = 14;
   */
  undelegationResponse?: BTCUndelegationResponse;

  constructor(data?: PartialMessage<BTCDelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.BTCDelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "btc_pk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "fp_btc_pk_list", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 3, name: "start_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "end_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "total_sat", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "staking_tx_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "slashing_tx_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "delegator_slash_sig_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "covenant_sigs", kind: "message", T: CovenantAdaptorSignatures, repeated: true },
    { no: 10, name: "staking_output_idx", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 11, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "status_desc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "unbonding_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "undelegation_response", kind: "message", T: BTCUndelegationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BTCDelegationResponse {
    return new BTCDelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BTCDelegationResponse {
    return new BTCDelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BTCDelegationResponse {
    return new BTCDelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BTCDelegationResponse | PlainMessage<BTCDelegationResponse> | undefined, b: BTCDelegationResponse | PlainMessage<BTCDelegationResponse> | undefined): boolean {
    return proto3.util.equals(BTCDelegationResponse, a, b);
  }
}

/**
 * BTCUndelegationResponse provides all necessary info about the undeleagation
 *
 * @generated from message babylon.btcstaking.v1.BTCUndelegationResponse
 */
export class BTCUndelegationResponse extends Message<BTCUndelegationResponse> {
  /**
   * unbonding_tx is the transaction which will transfer the funds from staking
   * output to unbonding output. Unbonding output will usually have lower timelock
   * than staking output. The unbonding tx as string hex.
   *
   * @generated from field: string unbonding_tx_hex = 1;
   */
  unbondingTxHex = "";

  /**
   * delegator_unbonding_sig is the signature on the unbonding tx
   * by the delegator (i.e., SK corresponding to btc_pk).
   * It effectively proves that the delegator wants to unbond and thus
   * Babylon will consider this BTC delegation unbonded. Delegator's BTC
   * on Bitcoin will be unbonded after timelock. The unbonding delegator sig as string hex.
   *
   * @generated from field: string delegator_unbonding_sig_hex = 2;
   */
  delegatorUnbondingSigHex = "";

  /**
   * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
   * by covenant members
   *
   * @generated from field: repeated babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 3;
   */
  covenantUnbondingSigList: SignatureInfo[] = [];

  /**
   * slashingTxHex is the hex string of slashing tx
   *
   * @generated from field: string slashing_tx_hex = 4;
   */
  slashingTxHex = "";

  /**
   * delegator_slashing_sig is the signature on the slashing tx
   * by the delegator (i.e., SK corresponding to btc_pk).
   * It will be a part of the witness for the unbonding tx output.
   * The delegator slashing sig as string hex.
   *
   * @generated from field: string delegator_slashing_sig_hex = 5;
   */
  delegatorSlashingSigHex = "";

  /**
   * covenant_slashing_sigs is a list of adaptor signatures on the
   * unbonding slashing tx by each covenant member
   * It will be a part of the witness for the staking tx output.
   *
   * @generated from field: repeated babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 6;
   */
  covenantSlashingSigs: CovenantAdaptorSignatures[] = [];

  constructor(data?: PartialMessage<BTCUndelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.BTCUndelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_tx_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "delegator_unbonding_sig_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "covenant_unbonding_sig_list", kind: "message", T: SignatureInfo, repeated: true },
    { no: 4, name: "slashing_tx_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "delegator_slashing_sig_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "covenant_slashing_sigs", kind: "message", T: CovenantAdaptorSignatures, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BTCUndelegationResponse {
    return new BTCUndelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BTCUndelegationResponse {
    return new BTCUndelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BTCUndelegationResponse {
    return new BTCUndelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BTCUndelegationResponse | PlainMessage<BTCUndelegationResponse> | undefined, b: BTCUndelegationResponse | PlainMessage<BTCUndelegationResponse> | undefined): boolean {
    return proto3.util.equals(BTCUndelegationResponse, a, b);
  }
}

/**
 * BTCDelegatorDelegationsResponse is a collection of BTC delegations responses from the same delegator.
 *
 * @generated from message babylon.btcstaking.v1.BTCDelegatorDelegationsResponse
 */
export class BTCDelegatorDelegationsResponse extends Message<BTCDelegatorDelegationsResponse> {
  /**
   * @generated from field: repeated babylon.btcstaking.v1.BTCDelegationResponse dels = 1;
   */
  dels: BTCDelegationResponse[] = [];

  constructor(data?: PartialMessage<BTCDelegatorDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.BTCDelegatorDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dels", kind: "message", T: BTCDelegationResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BTCDelegatorDelegationsResponse {
    return new BTCDelegatorDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BTCDelegatorDelegationsResponse {
    return new BTCDelegatorDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BTCDelegatorDelegationsResponse {
    return new BTCDelegatorDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BTCDelegatorDelegationsResponse | PlainMessage<BTCDelegatorDelegationsResponse> | undefined, b: BTCDelegatorDelegationsResponse | PlainMessage<BTCDelegatorDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(BTCDelegatorDelegationsResponse, a, b);
  }
}

/**
 * FinalityProviderResponse defines a finality provider with voting power information.
 *
 * @generated from message babylon.btcstaking.v1.FinalityProviderResponse
 */
export class FinalityProviderResponse extends Message<FinalityProviderResponse> {
  /**
   * description defines the description terms for the finality provider.
   *
   * @generated from field: cosmos.staking.v1beta1.Description description = 1;
   */
  description?: Description;

  /**
   * commission defines the commission rate of the finality provider.
   *
   * @generated from field: string commission = 2;
   */
  commission = "";

  /**
   * babylon_pk is the Babylon secp256k1 PK of this finality provider
   *
   * @generated from field: cosmos.crypto.secp256k1.PubKey babylon_pk = 3;
   */
  babylonPk?: PubKey;

  /**
   * btc_pk is the Bitcoin secp256k1 PK of this finality provider
   * the PK follows encoding in BIP-340 spec
   *
   * @generated from field: bytes btc_pk = 4;
   */
  btcPk = new Uint8Array(0);

  /**
   * pop is the proof of possession of babylon_pk and btc_pk
   *
   * @generated from field: babylon.btcstaking.v1.ProofOfPossession pop = 5;
   */
  pop?: ProofOfPossession;

  /**
   * slashed_babylon_height indicates the Babylon height when
   * the finality provider is slashed.
   * if it's 0 then the finality provider is not slashed
   *
   * @generated from field: uint64 slashed_babylon_height = 6;
   */
  slashedBabylonHeight = protoInt64.zero;

  /**
   * slashed_btc_height indicates the BTC height when
   * the finality provider is slashed.
   * if it's 0 then the finality provider is not slashed
   *
   * @generated from field: uint64 slashed_btc_height = 7;
   */
  slashedBtcHeight = protoInt64.zero;

  /**
   * height is the queried Babylon height
   *
   * @generated from field: uint64 height = 8;
   */
  height = protoInt64.zero;

  /**
   * voting_power is the voting power of this finality provider at the given height
   *
   * @generated from field: uint64 voting_power = 9;
   */
  votingPower = protoInt64.zero;

  constructor(data?: PartialMessage<FinalityProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.FinalityProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "message", T: Description },
    { no: 2, name: "commission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "babylon_pk", kind: "message", T: PubKey },
    { no: 4, name: "btc_pk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "pop", kind: "message", T: ProofOfPossession },
    { no: 6, name: "slashed_babylon_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "slashed_btc_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "voting_power", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FinalityProviderResponse {
    return new FinalityProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FinalityProviderResponse {
    return new FinalityProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FinalityProviderResponse {
    return new FinalityProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FinalityProviderResponse | PlainMessage<FinalityProviderResponse> | undefined, b: FinalityProviderResponse | PlainMessage<FinalityProviderResponse> | undefined): boolean {
    return proto3.util.equals(FinalityProviderResponse, a, b);
  }
}

