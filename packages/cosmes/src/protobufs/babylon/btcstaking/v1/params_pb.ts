// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/btcstaking/v1/params.proto (package babylon.btcstaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Params defines the parameters for the module.
 *
 * @generated from message babylon.btcstaking.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * covenant_pks is the list of public keys held by the covenant committee
   * each PK follows encoding in BIP-340 spec on Bitcoin
   *
   * @generated from field: repeated bytes covenant_pks = 1;
   */
  covenantPks: Uint8Array[] = [];

  /**
   * covenant_quorum is the minimum number of signatures needed for the covenant
   * multisignature
   *
   * @generated from field: uint32 covenant_quorum = 2;
   */
  covenantQuorum = 0;

  /**
   * slashing address is the address that the slashed BTC goes to
   * the address is in string on Bitcoin
   *
   * @generated from field: string slashing_address = 3;
   */
  slashingAddress = "";

  /**
   * min_slashing_tx_fee_sat is the minimum amount of tx fee (quantified
   * in Satoshi) needed for the pre-signed slashing tx
   * TODO: change to satoshi per byte?
   *
   * @generated from field: int64 min_slashing_tx_fee_sat = 4;
   */
  minSlashingTxFeeSat = protoInt64.zero;

  /**
   * min_commission_rate is the chain-wide minimum commission rate that a finality provider can charge their delegators
   *
   * @generated from field: string min_commission_rate = 5;
   */
  minCommissionRate = "";

  /**
   * slashing_rate determines the portion of the staked amount to be slashed,
   * expressed as a decimal (e.g., 0.5 for 50%).
   *
   * @generated from field: string slashing_rate = 6;
   */
  slashingRate = "";

  /**
   * max_active_finality_providers is the maximum number of active finality providers in the BTC staking protocol
   *
   * @generated from field: uint32 max_active_finality_providers = 7;
   */
  maxActiveFinalityProviders = 0;

  /**
   * min_unbonding_time is the minimum time for unbonding transaction timelock in BTC blocks
   *
   * @generated from field: uint32 min_unbonding_time = 8;
   */
  minUnbondingTime = 0;

  /**
   * min_unbonding_rate is the minimum amount of BTC that are required in unbonding
   * output, expressed as a fraction of staking output
   * example: if min_unbonding_rate=0.9, then the unbonding output value
   * must be at least 90% of staking output, for staking request to be considered
   * valid
   *
   * @generated from field: string min_unbonding_rate = 9;
   */
  minUnbondingRate = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "covenant_pks", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 2, name: "covenant_quorum", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "slashing_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "min_slashing_tx_fee_sat", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "min_commission_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "slashing_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "max_active_finality_providers", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "min_unbonding_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "min_unbonding_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

