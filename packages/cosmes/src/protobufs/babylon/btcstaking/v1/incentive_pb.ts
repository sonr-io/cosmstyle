// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/btcstaking/v1/incentive.proto (package babylon.btcstaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PubKey } from "../../../cosmos/crypto/secp256k1/keys_pb.js";

/**
 * VotingPowerDistCache is the cache for voting power distribution of finality providers
 * and their BTC delegations at a height
 *
 * @generated from message babylon.btcstaking.v1.VotingPowerDistCache
 */
export class VotingPowerDistCache extends Message<VotingPowerDistCache> {
  /**
   * @generated from field: uint64 total_voting_power = 1;
   */
  totalVotingPower = protoInt64.zero;

  /**
   * finality_providers is a list of finality providers' voting power information
   *
   * @generated from field: repeated babylon.btcstaking.v1.FinalityProviderDistInfo finality_providers = 2;
   */
  finalityProviders: FinalityProviderDistInfo[] = [];

  constructor(data?: PartialMessage<VotingPowerDistCache>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.VotingPowerDistCache";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_voting_power", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "finality_providers", kind: "message", T: FinalityProviderDistInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VotingPowerDistCache {
    return new VotingPowerDistCache().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VotingPowerDistCache {
    return new VotingPowerDistCache().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VotingPowerDistCache {
    return new VotingPowerDistCache().fromJsonString(jsonString, options);
  }

  static equals(a: VotingPowerDistCache | PlainMessage<VotingPowerDistCache> | undefined, b: VotingPowerDistCache | PlainMessage<VotingPowerDistCache> | undefined): boolean {
    return proto3.util.equals(VotingPowerDistCache, a, b);
  }
}

/**
 * FinalityProviderDistInfo is the reward distribution of a finality provider and its BTC delegations
 *
 * @generated from message babylon.btcstaking.v1.FinalityProviderDistInfo
 */
export class FinalityProviderDistInfo extends Message<FinalityProviderDistInfo> {
  /**
   * btc_pk is the Bitcoin secp256k1 PK of this finality provider
   * the PK follows encoding in BIP-340 spec
   *
   * @generated from field: bytes btc_pk = 1;
   */
  btcPk = new Uint8Array(0);

  /**
   * babylon_pk is the Babylon public key of the finality provider
   *
   * @generated from field: cosmos.crypto.secp256k1.PubKey babylon_pk = 2;
   */
  babylonPk?: PubKey;

  /**
   * commission defines the commission rate of finality provider
   *
   * @generated from field: string commission = 3;
   */
  commission = "";

  /**
   * total_voting_power is the total voting power of the finality provider
   *
   * @generated from field: uint64 total_voting_power = 4;
   */
  totalVotingPower = protoInt64.zero;

  /**
   * btc_dels is a list of BTC delegations' voting power information under this finality provider
   *
   * @generated from field: repeated babylon.btcstaking.v1.BTCDelDistInfo btc_dels = 5;
   */
  btcDels: BTCDelDistInfo[] = [];

  constructor(data?: PartialMessage<FinalityProviderDistInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.FinalityProviderDistInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "btc_pk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "babylon_pk", kind: "message", T: PubKey },
    { no: 3, name: "commission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "total_voting_power", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "btc_dels", kind: "message", T: BTCDelDistInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FinalityProviderDistInfo {
    return new FinalityProviderDistInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FinalityProviderDistInfo {
    return new FinalityProviderDistInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FinalityProviderDistInfo {
    return new FinalityProviderDistInfo().fromJsonString(jsonString, options);
  }

  static equals(a: FinalityProviderDistInfo | PlainMessage<FinalityProviderDistInfo> | undefined, b: FinalityProviderDistInfo | PlainMessage<FinalityProviderDistInfo> | undefined): boolean {
    return proto3.util.equals(FinalityProviderDistInfo, a, b);
  }
}

/**
 * BTCDelDistInfo contains the information related to reward distribution for a BTC delegation
 *
 * @generated from message babylon.btcstaking.v1.BTCDelDistInfo
 */
export class BTCDelDistInfo extends Message<BTCDelDistInfo> {
  /**
   * btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
   * the PK follows encoding in BIP-340 spec
   *
   * @generated from field: bytes btc_pk = 1;
   */
  btcPk = new Uint8Array(0);

  /**
   * babylon_pk is the Babylon public key of the BTC delegation
   *
   * @generated from field: cosmos.crypto.secp256k1.PubKey babylon_pk = 2;
   */
  babylonPk?: PubKey;

  /**
   * staking_tx_hash is the staking tx hash of the BTC delegation
   *
   * @generated from field: string staking_tx_hash = 3;
   */
  stakingTxHash = "";

  /**
   * voting_power is the voting power of the BTC delegation
   *
   * @generated from field: uint64 voting_power = 4;
   */
  votingPower = protoInt64.zero;

  constructor(data?: PartialMessage<BTCDelDistInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.BTCDelDistInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "btc_pk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "babylon_pk", kind: "message", T: PubKey },
    { no: 3, name: "staking_tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "voting_power", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BTCDelDistInfo {
    return new BTCDelDistInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BTCDelDistInfo {
    return new BTCDelDistInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BTCDelDistInfo {
    return new BTCDelDistInfo().fromJsonString(jsonString, options);
  }

  static equals(a: BTCDelDistInfo | PlainMessage<BTCDelDistInfo> | undefined, b: BTCDelDistInfo | PlainMessage<BTCDelDistInfo> | undefined): boolean {
    return proto3.util.equals(BTCDelDistInfo, a, b);
  }
}

