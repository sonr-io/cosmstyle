// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/finality/v1/genesis.proto (package babylon.finality.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Evidence, IndexedBlock } from "./finality_pb.js";

/**
 * GenesisState defines the finality module's genesis state.
 *
 * @generated from message babylon.finality.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params the current params of the state.
   *
   * @generated from field: babylon.finality.v1.Params params = 1;
   */
  params?: Params;

  /**
   * indexed_blocks all the btc blocks and if their status are finalized.
   *
   * @generated from field: repeated babylon.finality.v1.IndexedBlock indexed_blocks = 2;
   */
  indexedBlocks: IndexedBlock[] = [];

  /**
   * evidences all the evidences ever registered.
   *
   * @generated from field: repeated babylon.finality.v1.Evidence evidences = 3;
   */
  evidences: Evidence[] = [];

  /**
   * votes_sigs contains all the votes of finality providers ever registered.
   *
   * @generated from field: repeated babylon.finality.v1.VoteSig vote_sigs = 4;
   */
  voteSigs: VoteSig[] = [];

  /**
   * public_randomness contains all the public randomness ever commited from the finality providers.
   *
   * @generated from field: repeated babylon.finality.v1.PublicRandomness public_randomness = 5;
   */
  publicRandomness: PublicRandomness[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.finality.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "indexed_blocks", kind: "message", T: IndexedBlock, repeated: true },
    { no: 3, name: "evidences", kind: "message", T: Evidence, repeated: true },
    { no: 4, name: "vote_sigs", kind: "message", T: VoteSig, repeated: true },
    { no: 5, name: "public_randomness", kind: "message", T: PublicRandomness, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * VoteSig the vote of an finality provider
 * with the block of the vote, the finality provider btc public key and the vote signature.
 *
 * @generated from message babylon.finality.v1.VoteSig
 */
export class VoteSig extends Message<VoteSig> {
  /**
   * block_height is the height of the voted block.
   *
   * @generated from field: uint64 block_height = 1;
   */
  blockHeight = protoInt64.zero;

  /**
   * fp_btc_pk is the BTC PK of the finality provider that casts this vote
   *
   * @generated from field: bytes fp_btc_pk = 2;
   */
  fpBtcPk = new Uint8Array(0);

  /**
   * finality_sig is the finality signature to this block
   * where finality signature is an EOTS signature, i.e.
   *
   * @generated from field: bytes finality_sig = 3;
   */
  finalitySig = new Uint8Array(0);

  constructor(data?: PartialMessage<VoteSig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.finality.v1.VoteSig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "fp_btc_pk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "finality_sig", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteSig {
    return new VoteSig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteSig {
    return new VoteSig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteSig {
    return new VoteSig().fromJsonString(jsonString, options);
  }

  static equals(a: VoteSig | PlainMessage<VoteSig> | undefined, b: VoteSig | PlainMessage<VoteSig> | undefined): boolean {
    return proto3.util.equals(VoteSig, a, b);
  }
}

/**
 * PublicRandomness the block height and public randomness that the finality provider has submitted.
 *
 * @generated from message babylon.finality.v1.PublicRandomness
 */
export class PublicRandomness extends Message<PublicRandomness> {
  /**
   * block_height is the height of block which the finality provider submited public randomness.
   *
   * @generated from field: uint64 block_height = 1;
   */
  blockHeight = protoInt64.zero;

  /**
   * fp_btc_pk is the BTC PK of the finality provider that casts this vote.
   *
   * @generated from field: bytes fp_btc_pk = 2;
   */
  fpBtcPk = new Uint8Array(0);

  /**
   * pub_rand is the public randomness the finality provider has committed to.
   *
   * @generated from field: bytes pub_rand = 3;
   */
  pubRand = new Uint8Array(0);

  constructor(data?: PartialMessage<PublicRandomness>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.finality.v1.PublicRandomness";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "fp_btc_pk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "pub_rand", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicRandomness {
    return new PublicRandomness().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicRandomness {
    return new PublicRandomness().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicRandomness {
    return new PublicRandomness().fromJsonString(jsonString, options);
  }

  static equals(a: PublicRandomness | PlainMessage<PublicRandomness> | undefined, b: PublicRandomness | PlainMessage<PublicRandomness> | undefined): boolean {
    return proto3.util.equals(PublicRandomness, a, b);
  }
}

