// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/finality/v1/finality.proto (package babylon.finality.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * IndexedBlock is the necessary metadata and finalization status of a block
 *
 * @generated from message babylon.finality.v1.IndexedBlock
 */
export class IndexedBlock extends Message<IndexedBlock> {
  /**
   * height is the height of the block
   *
   * @generated from field: uint64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * app_hash is the AppHash of the block
   *
   * @generated from field: bytes app_hash = 2;
   */
  appHash = new Uint8Array(0);

  /**
   * finalized indicates whether the IndexedBlock is finalised by 2/3
   * finality providers or not
   *
   * @generated from field: bool finalized = 3;
   */
  finalized = false;

  constructor(data?: PartialMessage<IndexedBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.finality.v1.IndexedBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "app_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "finalized", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexedBlock {
    return new IndexedBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexedBlock {
    return new IndexedBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexedBlock {
    return new IndexedBlock().fromJsonString(jsonString, options);
  }

  static equals(a: IndexedBlock | PlainMessage<IndexedBlock> | undefined, b: IndexedBlock | PlainMessage<IndexedBlock> | undefined): boolean {
    return proto3.util.equals(IndexedBlock, a, b);
  }
}

/**
 * Evidence is the evidence that a finality provider has signed finality
 * signatures with correct public randomness on two conflicting Babylon headers
 *
 * @generated from message babylon.finality.v1.Evidence
 */
export class Evidence extends Message<Evidence> {
  /**
   * fp_btc_pk is the BTC PK of the finality provider that casts this vote
   *
   * @generated from field: bytes fp_btc_pk = 1;
   */
  fpBtcPk = new Uint8Array(0);

  /**
   * block_height is the height of the conflicting blocks
   *
   * @generated from field: uint64 block_height = 2;
   */
  blockHeight = protoInt64.zero;

  /**
   * pub_rand is the public randomness the finality provider has committed to
   *
   * @generated from field: bytes pub_rand = 3;
   */
  pubRand = new Uint8Array(0);

  /**
   * canonical_app_hash is the AppHash of the canonical block
   *
   * @generated from field: bytes canonical_app_hash = 4;
   */
  canonicalAppHash = new Uint8Array(0);

  /**
   * fork_app_hash is the AppHash of the fork block
   *
   * @generated from field: bytes fork_app_hash = 5;
   */
  forkAppHash = new Uint8Array(0);

  /**
   * canonical_finality_sig is the finality signature to the canonical block
   * where finality signature is an EOTS signature, i.e.,
   * the `s` in a Schnorr signature `(r, s)`
   * `r` is the public randomness that is already committed by the finality provider
   *
   * @generated from field: bytes canonical_finality_sig = 6;
   */
  canonicalFinalitySig = new Uint8Array(0);

  /**
   * fork_finality_sig is the finality signature to the fork block
   * where finality signature is an EOTS signature
   *
   * @generated from field: bytes fork_finality_sig = 7;
   */
  forkFinalitySig = new Uint8Array(0);

  constructor(data?: PartialMessage<Evidence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.finality.v1.Evidence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fp_btc_pk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pub_rand", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "canonical_app_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "fork_app_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "canonical_finality_sig", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "fork_finality_sig", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Evidence {
    return new Evidence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Evidence {
    return new Evidence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Evidence {
    return new Evidence().fromJsonString(jsonString, options);
  }

  static equals(a: Evidence | PlainMessage<Evidence> | undefined, b: Evidence | PlainMessage<Evidence> | undefined): boolean {
    return proto3.util.equals(Evidence, a, b);
  }
}

