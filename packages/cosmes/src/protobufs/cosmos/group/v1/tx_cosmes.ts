// Since: cosmos-sdk 0.46

// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file cosmos/group/v1/tx.proto (package cosmos.group.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MsgCreateGroup, MsgCreateGroupPolicy, MsgCreateGroupPolicyResponse, MsgCreateGroupResponse, MsgCreateGroupWithPolicy, MsgCreateGroupWithPolicyResponse, MsgExec, MsgExecResponse, MsgLeaveGroup, MsgLeaveGroupResponse, MsgSubmitProposal, MsgSubmitProposalResponse, MsgUpdateGroupAdmin, MsgUpdateGroupAdminResponse, MsgUpdateGroupMembers, MsgUpdateGroupMembersResponse, MsgUpdateGroupMetadata, MsgUpdateGroupMetadataResponse, MsgUpdateGroupPolicyAdmin, MsgUpdateGroupPolicyAdminResponse, MsgUpdateGroupPolicyDecisionPolicy, MsgUpdateGroupPolicyDecisionPolicyResponse, MsgUpdateGroupPolicyMetadata, MsgUpdateGroupPolicyMetadataResponse, MsgVote, MsgVoteResponse, MsgWithdrawProposal, MsgWithdrawProposalResponse } from "./tx_pb.js";

const TYPE_NAME = "cosmos.group.v1.Msg";

/**
 * CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
 *
 * @generated from rpc cosmos.group.v1.Msg.CreateGroup
 */
export const MsgCreateGroupService = {
  typeName: TYPE_NAME,
  method: "CreateGroup",
  Request: MsgCreateGroup,
  Response: MsgCreateGroupResponse,
} as const;

/**
 * UpdateGroupMembers updates the group members with given group id and admin address.
 *
 * @generated from rpc cosmos.group.v1.Msg.UpdateGroupMembers
 */
export const MsgUpdateGroupMembersService = {
  typeName: TYPE_NAME,
  method: "UpdateGroupMembers",
  Request: MsgUpdateGroupMembers,
  Response: MsgUpdateGroupMembersResponse,
} as const;

/**
 * UpdateGroupAdmin updates the group admin with given group id and previous admin address.
 *
 * @generated from rpc cosmos.group.v1.Msg.UpdateGroupAdmin
 */
export const MsgUpdateGroupAdminService = {
  typeName: TYPE_NAME,
  method: "UpdateGroupAdmin",
  Request: MsgUpdateGroupAdmin,
  Response: MsgUpdateGroupAdminResponse,
} as const;

/**
 * UpdateGroupMetadata updates the group metadata with given group id and admin address.
 *
 * @generated from rpc cosmos.group.v1.Msg.UpdateGroupMetadata
 */
export const MsgUpdateGroupMetadataService = {
  typeName: TYPE_NAME,
  method: "UpdateGroupMetadata",
  Request: MsgUpdateGroupMetadata,
  Response: MsgUpdateGroupMetadataResponse,
} as const;

/**
 * CreateGroupPolicy creates a new group policy using given DecisionPolicy.
 *
 * @generated from rpc cosmos.group.v1.Msg.CreateGroupPolicy
 */
export const MsgCreateGroupPolicyService = {
  typeName: TYPE_NAME,
  method: "CreateGroupPolicy",
  Request: MsgCreateGroupPolicy,
  Response: MsgCreateGroupPolicyResponse,
} as const;

/**
 * CreateGroupWithPolicy creates a new group with policy.
 *
 * @generated from rpc cosmos.group.v1.Msg.CreateGroupWithPolicy
 */
export const MsgCreateGroupWithPolicyService = {
  typeName: TYPE_NAME,
  method: "CreateGroupWithPolicy",
  Request: MsgCreateGroupWithPolicy,
  Response: MsgCreateGroupWithPolicyResponse,
} as const;

/**
 * UpdateGroupPolicyAdmin updates a group policy admin.
 *
 * @generated from rpc cosmos.group.v1.Msg.UpdateGroupPolicyAdmin
 */
export const MsgUpdateGroupPolicyAdminService = {
  typeName: TYPE_NAME,
  method: "UpdateGroupPolicyAdmin",
  Request: MsgUpdateGroupPolicyAdmin,
  Response: MsgUpdateGroupPolicyAdminResponse,
} as const;

/**
 * UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
 *
 * @generated from rpc cosmos.group.v1.Msg.UpdateGroupPolicyDecisionPolicy
 */
export const MsgUpdateGroupPolicyDecisionPolicyService = {
  typeName: TYPE_NAME,
  method: "UpdateGroupPolicyDecisionPolicy",
  Request: MsgUpdateGroupPolicyDecisionPolicy,
  Response: MsgUpdateGroupPolicyDecisionPolicyResponse,
} as const;

/**
 * UpdateGroupPolicyMetadata updates a group policy metadata.
 *
 * @generated from rpc cosmos.group.v1.Msg.UpdateGroupPolicyMetadata
 */
export const MsgUpdateGroupPolicyMetadataService = {
  typeName: TYPE_NAME,
  method: "UpdateGroupPolicyMetadata",
  Request: MsgUpdateGroupPolicyMetadata,
  Response: MsgUpdateGroupPolicyMetadataResponse,
} as const;

/**
 * SubmitProposal submits a new proposal.
 *
 * @generated from rpc cosmos.group.v1.Msg.SubmitProposal
 */
export const MsgSubmitProposalService = {
  typeName: TYPE_NAME,
  method: "SubmitProposal",
  Request: MsgSubmitProposal,
  Response: MsgSubmitProposalResponse,
} as const;

/**
 * WithdrawProposal withdraws a proposal.
 *
 * @generated from rpc cosmos.group.v1.Msg.WithdrawProposal
 */
export const MsgWithdrawProposalService = {
  typeName: TYPE_NAME,
  method: "WithdrawProposal",
  Request: MsgWithdrawProposal,
  Response: MsgWithdrawProposalResponse,
} as const;

/**
 * Vote allows a voter to vote on a proposal.
 *
 * @generated from rpc cosmos.group.v1.Msg.Vote
 */
export const MsgVoteService = {
  typeName: TYPE_NAME,
  method: "Vote",
  Request: MsgVote,
  Response: MsgVoteResponse,
} as const;

/**
 * Exec executes a proposal.
 *
 * @generated from rpc cosmos.group.v1.Msg.Exec
 */
export const MsgExecService = {
  typeName: TYPE_NAME,
  method: "Exec",
  Request: MsgExec,
  Response: MsgExecResponse,
} as const;

/**
 * LeaveGroup allows a group member to leave the group.
 *
 * @generated from rpc cosmos.group.v1.Msg.LeaveGroup
 */
export const MsgLeaveGroupService = {
  typeName: TYPE_NAME,
  method: "LeaveGroup",
  Request: MsgLeaveGroup,
  Response: MsgLeaveGroupResponse,
} as const;

