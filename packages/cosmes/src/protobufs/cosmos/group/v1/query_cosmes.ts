// Since: cosmos-sdk 0.46

// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file cosmos/group/v1/query.proto (package cosmos.group.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryGroupInfoRequest, QueryGroupInfoResponse, QueryGroupMembersRequest, QueryGroupMembersResponse, QueryGroupPoliciesByAdminRequest, QueryGroupPoliciesByAdminResponse, QueryGroupPoliciesByGroupRequest, QueryGroupPoliciesByGroupResponse, QueryGroupPolicyInfoRequest, QueryGroupPolicyInfoResponse, QueryGroupsByAdminRequest, QueryGroupsByAdminResponse, QueryGroupsByMemberRequest, QueryGroupsByMemberResponse, QueryGroupsRequest, QueryGroupsResponse, QueryProposalRequest, QueryProposalResponse, QueryProposalsByGroupPolicyRequest, QueryProposalsByGroupPolicyResponse, QueryTallyResultRequest, QueryTallyResultResponse, QueryVoteByProposalVoterRequest, QueryVoteByProposalVoterResponse, QueryVotesByProposalRequest, QueryVotesByProposalResponse, QueryVotesByVoterRequest, QueryVotesByVoterResponse } from "./query_pb.js";

const TYPE_NAME = "cosmos.group.v1.Query";

/**
 * GroupInfo queries group info based on group id.
 *
 * @generated from rpc cosmos.group.v1.Query.GroupInfo
 */
export const QueryGroupInfoService = {
  typeName: TYPE_NAME,
  method: "GroupInfo",
  Request: QueryGroupInfoRequest,
  Response: QueryGroupInfoResponse,
} as const;

/**
 * GroupPolicyInfo queries group policy info based on account address of group policy.
 *
 * @generated from rpc cosmos.group.v1.Query.GroupPolicyInfo
 */
export const QueryGroupPolicyInfoService = {
  typeName: TYPE_NAME,
  method: "GroupPolicyInfo",
  Request: QueryGroupPolicyInfoRequest,
  Response: QueryGroupPolicyInfoResponse,
} as const;

/**
 * GroupMembers queries members of a group by group id.
 *
 * @generated from rpc cosmos.group.v1.Query.GroupMembers
 */
export const QueryGroupMembersService = {
  typeName: TYPE_NAME,
  method: "GroupMembers",
  Request: QueryGroupMembersRequest,
  Response: QueryGroupMembersResponse,
} as const;

/**
 * GroupsByAdmin queries groups by admin address.
 *
 * @generated from rpc cosmos.group.v1.Query.GroupsByAdmin
 */
export const QueryGroupsByAdminService = {
  typeName: TYPE_NAME,
  method: "GroupsByAdmin",
  Request: QueryGroupsByAdminRequest,
  Response: QueryGroupsByAdminResponse,
} as const;

/**
 * GroupPoliciesByGroup queries group policies by group id.
 *
 * @generated from rpc cosmos.group.v1.Query.GroupPoliciesByGroup
 */
export const QueryGroupPoliciesByGroupService = {
  typeName: TYPE_NAME,
  method: "GroupPoliciesByGroup",
  Request: QueryGroupPoliciesByGroupRequest,
  Response: QueryGroupPoliciesByGroupResponse,
} as const;

/**
 * GroupPoliciesByAdmin queries group policies by admin address.
 *
 * @generated from rpc cosmos.group.v1.Query.GroupPoliciesByAdmin
 */
export const QueryGroupPoliciesByAdminService = {
  typeName: TYPE_NAME,
  method: "GroupPoliciesByAdmin",
  Request: QueryGroupPoliciesByAdminRequest,
  Response: QueryGroupPoliciesByAdminResponse,
} as const;

/**
 * Proposal queries a proposal based on proposal id.
 *
 * @generated from rpc cosmos.group.v1.Query.Proposal
 */
export const QueryProposalService = {
  typeName: TYPE_NAME,
  method: "Proposal",
  Request: QueryProposalRequest,
  Response: QueryProposalResponse,
} as const;

/**
 * ProposalsByGroupPolicy queries proposals based on account address of group policy.
 *
 * @generated from rpc cosmos.group.v1.Query.ProposalsByGroupPolicy
 */
export const QueryProposalsByGroupPolicyService = {
  typeName: TYPE_NAME,
  method: "ProposalsByGroupPolicy",
  Request: QueryProposalsByGroupPolicyRequest,
  Response: QueryProposalsByGroupPolicyResponse,
} as const;

/**
 * VoteByProposalVoter queries a vote by proposal id and voter.
 *
 * @generated from rpc cosmos.group.v1.Query.VoteByProposalVoter
 */
export const QueryVoteByProposalVoterService = {
  typeName: TYPE_NAME,
  method: "VoteByProposalVoter",
  Request: QueryVoteByProposalVoterRequest,
  Response: QueryVoteByProposalVoterResponse,
} as const;

/**
 * VotesByProposal queries a vote by proposal id.
 *
 * @generated from rpc cosmos.group.v1.Query.VotesByProposal
 */
export const QueryVotesByProposalService = {
  typeName: TYPE_NAME,
  method: "VotesByProposal",
  Request: QueryVotesByProposalRequest,
  Response: QueryVotesByProposalResponse,
} as const;

/**
 * VotesByVoter queries a vote by voter.
 *
 * @generated from rpc cosmos.group.v1.Query.VotesByVoter
 */
export const QueryVotesByVoterService = {
  typeName: TYPE_NAME,
  method: "VotesByVoter",
  Request: QueryVotesByVoterRequest,
  Response: QueryVotesByVoterResponse,
} as const;

/**
 * GroupsByMember queries groups by member address.
 *
 * @generated from rpc cosmos.group.v1.Query.GroupsByMember
 */
export const QueryGroupsByMemberService = {
  typeName: TYPE_NAME,
  method: "GroupsByMember",
  Request: QueryGroupsByMemberRequest,
  Response: QueryGroupsByMemberResponse,
} as const;

/**
 * TallyResult returns the tally result of a proposal. If the proposal is
 * still in voting period, then this query computes the current tally state,
 * which might not be final. On the other hand, if the proposal is final,
 * then it simply returns the `final_tally_result` state stored in the
 * proposal itself.
 *
 * @generated from rpc cosmos.group.v1.Query.TallyResult
 */
export const QueryTallyResultService = {
  typeName: TYPE_NAME,
  method: "TallyResult",
  Request: QueryTallyResultRequest,
  Response: QueryTallyResultResponse,
} as const;

/**
 * Groups queries all groups in state.
 *
 * Since: cosmos-sdk 0.47.1
 *
 * @generated from rpc cosmos.group.v1.Query.Groups
 */
export const QueryGroupsService = {
  typeName: TYPE_NAME,
  method: "Groups",
  Request: QueryGroupsRequest,
  Response: QueryGroupsResponse,
} as const;

