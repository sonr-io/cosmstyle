// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file cosmos/auth/v1beta1/query.proto (package cosmos.auth.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AddressBytesToStringRequest, AddressBytesToStringResponse, AddressStringToBytesRequest, AddressStringToBytesResponse, Bech32PrefixRequest, Bech32PrefixResponse, QueryAccountAddressByIDRequest, QueryAccountAddressByIDResponse, QueryAccountInfoRequest, QueryAccountInfoResponse, QueryAccountRequest, QueryAccountResponse, QueryAccountsRequest, QueryAccountsResponse, QueryModuleAccountByNameRequest, QueryModuleAccountByNameResponse, QueryModuleAccountsRequest, QueryModuleAccountsResponse, QueryParamsRequest, QueryParamsResponse } from "./query_pb.js";

const TYPE_NAME = "cosmos.auth.v1beta1.Query";

/**
 * Accounts returns all the existing accounts.
 *
 * When called from another module, this query might consume a high amount of
 * gas if the pagination field is incorrectly set.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from rpc cosmos.auth.v1beta1.Query.Accounts
 */
export const QueryAccountsService = {
  typeName: TYPE_NAME,
  method: "Accounts",
  Request: QueryAccountsRequest,
  Response: QueryAccountsResponse,
} as const;

/**
 * Account returns account details based on address.
 *
 * @generated from rpc cosmos.auth.v1beta1.Query.Account
 */
export const QueryAccountService = {
  typeName: TYPE_NAME,
  method: "Account",
  Request: QueryAccountRequest,
  Response: QueryAccountResponse,
} as const;

/**
 * AccountAddressByID returns account address based on account number.
 *
 * Since: cosmos-sdk 0.46.2
 *
 * @generated from rpc cosmos.auth.v1beta1.Query.AccountAddressByID
 */
export const QueryAccountAddressByIDService = {
  typeName: TYPE_NAME,
  method: "AccountAddressByID",
  Request: QueryAccountAddressByIDRequest,
  Response: QueryAccountAddressByIDResponse,
} as const;

/**
 * Params queries all parameters.
 *
 * @generated from rpc cosmos.auth.v1beta1.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: QueryParamsRequest,
  Response: QueryParamsResponse,
} as const;

/**
 * ModuleAccounts returns all the existing module accounts.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from rpc cosmos.auth.v1beta1.Query.ModuleAccounts
 */
export const QueryModuleAccountsService = {
  typeName: TYPE_NAME,
  method: "ModuleAccounts",
  Request: QueryModuleAccountsRequest,
  Response: QueryModuleAccountsResponse,
} as const;

/**
 * ModuleAccountByName returns the module account info by module name
 *
 * @generated from rpc cosmos.auth.v1beta1.Query.ModuleAccountByName
 */
export const QueryModuleAccountByNameService = {
  typeName: TYPE_NAME,
  method: "ModuleAccountByName",
  Request: QueryModuleAccountByNameRequest,
  Response: QueryModuleAccountByNameResponse,
} as const;

/**
 * Bech32Prefix queries bech32Prefix
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from rpc cosmos.auth.v1beta1.Query.Bech32Prefix
 */
export const QueryBech32PrefixService = {
  typeName: TYPE_NAME,
  method: "Bech32Prefix",
  Request: Bech32PrefixRequest,
  Response: Bech32PrefixResponse,
} as const;

/**
 * AddressBytesToString converts Account Address bytes to string
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from rpc cosmos.auth.v1beta1.Query.AddressBytesToString
 */
export const QueryAddressBytesToStringService = {
  typeName: TYPE_NAME,
  method: "AddressBytesToString",
  Request: AddressBytesToStringRequest,
  Response: AddressBytesToStringResponse,
} as const;

/**
 * AddressStringToBytes converts Address string to bytes
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from rpc cosmos.auth.v1beta1.Query.AddressStringToBytes
 */
export const QueryAddressStringToBytesService = {
  typeName: TYPE_NAME,
  method: "AddressStringToBytes",
  Request: AddressStringToBytesRequest,
  Response: AddressStringToBytesResponse,
} as const;

/**
 * AccountInfo queries account info which is common to all account types.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from rpc cosmos.auth.v1beta1.Query.AccountInfo
 */
export const QueryAccountInfoService = {
  typeName: TYPE_NAME,
  method: "AccountInfo",
  Request: QueryAccountInfoRequest,
  Response: QueryAccountInfoResponse,
} as const;

