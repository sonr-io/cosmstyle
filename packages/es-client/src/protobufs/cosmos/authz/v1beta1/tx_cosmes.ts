// Since: cosmos-sdk 0.43

// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file cosmos/authz/v1beta1/tx.proto (package cosmos.authz.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MsgExec, MsgExecResponse, MsgGrant, MsgGrantResponse, MsgRevoke, MsgRevokeResponse } from "./tx_pb.js";

const TYPE_NAME = "cosmos.authz.v1beta1.Msg";

/**
 * Grant grants the provided authorization to the grantee on the granter's
 * account with the provided expiration time. If there is already a grant
 * for the given (granter, grantee, Authorization) triple, then the grant
 * will be overwritten.
 *
 * @generated from rpc cosmos.authz.v1beta1.Msg.Grant
 */
export const MsgGrantService = {
  typeName: TYPE_NAME,
  method: "Grant",
  Request: MsgGrant,
  Response: MsgGrantResponse,
} as const;

/**
 * Exec attempts to execute the provided messages using
 * authorizations granted to the grantee. Each message should have only
 * one signer corresponding to the granter of the authorization.
 *
 * @generated from rpc cosmos.authz.v1beta1.Msg.Exec
 */
export const MsgExecService = {
  typeName: TYPE_NAME,
  method: "Exec",
  Request: MsgExec,
  Response: MsgExecResponse,
} as const;

/**
 * Revoke revokes any authorization corresponding to the provided method name on the
 * granter's account that has been granted to the grantee.
 *
 * @generated from rpc cosmos.authz.v1beta1.Msg.Revoke
 */
export const MsgRevokeService = {
  typeName: TYPE_NAME,
  method: "Revoke",
  Request: MsgRevoke,
  Response: MsgRevokeResponse,
} as const;

