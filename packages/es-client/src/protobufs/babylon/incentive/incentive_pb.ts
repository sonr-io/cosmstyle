// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/incentive/incentive.proto (package babylon.incentive, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Gauge is an object that stores rewards to be distributed
 * code adapted from https://github.com/osmosis-labs/osmosis/blob/v18.0.0/proto/osmosis/incentives/gauge.proto
 *
 * @generated from message babylon.incentive.Gauge
 */
export class Gauge extends Message<Gauge> {
  /**
   * coins are coins that have been in the gauge
   * Can have multiple coin denoms
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 1;
   */
  coins: Coin[] = [];

  constructor(data?: PartialMessage<Gauge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.incentive.Gauge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Gauge {
    return new Gauge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Gauge {
    return new Gauge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Gauge {
    return new Gauge().fromJsonString(jsonString, options);
  }

  static equals(a: Gauge | PlainMessage<Gauge> | undefined, b: Gauge | PlainMessage<Gauge> | undefined): boolean {
    return proto3.util.equals(Gauge, a, b);
  }
}

/**
 * RewardGauge is an object that stores rewards distributed to a BTC staking/timestamping stakeholder
 * code adapted from https://github.com/osmosis-labs/osmosis/blob/v18.0.0/proto/osmosis/incentives/gauge.proto
 *
 * @generated from message babylon.incentive.RewardGauge
 */
export class RewardGauge extends Message<RewardGauge> {
  /**
   * coins are coins that have been in the gauge
   * Can have multiple coin denoms
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 1;
   */
  coins: Coin[] = [];

  /**
   * withdrawn_coins are coins that have been withdrawn by the stakeholder already
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin withdrawn_coins = 2;
   */
  withdrawnCoins: Coin[] = [];

  constructor(data?: PartialMessage<RewardGauge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.incentive.RewardGauge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coins", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "withdrawn_coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewardGauge {
    return new RewardGauge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewardGauge {
    return new RewardGauge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RewardGauge {
    return new RewardGauge().fromJsonString(jsonString, options);
  }

  static equals(a: RewardGauge | PlainMessage<RewardGauge> | undefined, b: RewardGauge | PlainMessage<RewardGauge> | undefined): boolean {
    return proto3.util.equals(RewardGauge, a, b);
  }
}

