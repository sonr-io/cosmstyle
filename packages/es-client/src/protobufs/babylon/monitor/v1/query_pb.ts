// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/monitor/v1/query.proto (package babylon.monitor.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * QueryEndedEpochBtcHeightRequest defines a query type for EndedEpochBtcHeight
 * RPC method
 *
 * @generated from message babylon.monitor.v1.QueryEndedEpochBtcHeightRequest
 */
export class QueryEndedEpochBtcHeightRequest extends Message<QueryEndedEpochBtcHeightRequest> {
  /**
   * @generated from field: uint64 epoch_num = 1;
   */
  epochNum = protoInt64.zero;

  constructor(data?: PartialMessage<QueryEndedEpochBtcHeightRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.monitor.v1.QueryEndedEpochBtcHeightRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_num", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEndedEpochBtcHeightRequest {
    return new QueryEndedEpochBtcHeightRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEndedEpochBtcHeightRequest {
    return new QueryEndedEpochBtcHeightRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEndedEpochBtcHeightRequest {
    return new QueryEndedEpochBtcHeightRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEndedEpochBtcHeightRequest | PlainMessage<QueryEndedEpochBtcHeightRequest> | undefined, b: QueryEndedEpochBtcHeightRequest | PlainMessage<QueryEndedEpochBtcHeightRequest> | undefined): boolean {
    return proto3.util.equals(QueryEndedEpochBtcHeightRequest, a, b);
  }
}

/**
 * QueryEndedEpochBtcHeightResponse defines a response type for
 * EndedEpochBtcHeight RPC method
 *
 * @generated from message babylon.monitor.v1.QueryEndedEpochBtcHeightResponse
 */
export class QueryEndedEpochBtcHeightResponse extends Message<QueryEndedEpochBtcHeightResponse> {
  /**
   * height of btc light client when epoch ended
   *
   * @generated from field: uint64 btc_light_client_height = 1;
   */
  btcLightClientHeight = protoInt64.zero;

  constructor(data?: PartialMessage<QueryEndedEpochBtcHeightResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.monitor.v1.QueryEndedEpochBtcHeightResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "btc_light_client_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEndedEpochBtcHeightResponse {
    return new QueryEndedEpochBtcHeightResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEndedEpochBtcHeightResponse {
    return new QueryEndedEpochBtcHeightResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEndedEpochBtcHeightResponse {
    return new QueryEndedEpochBtcHeightResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEndedEpochBtcHeightResponse | PlainMessage<QueryEndedEpochBtcHeightResponse> | undefined, b: QueryEndedEpochBtcHeightResponse | PlainMessage<QueryEndedEpochBtcHeightResponse> | undefined): boolean {
    return proto3.util.equals(QueryEndedEpochBtcHeightResponse, a, b);
  }
}

/**
 * QueryReportedCheckpointBtcHeightRequest defines a query type for
 * ReportedCheckpointBtcHeight RPC method
 *
 * @generated from message babylon.monitor.v1.QueryReportedCheckpointBtcHeightRequest
 */
export class QueryReportedCheckpointBtcHeightRequest extends Message<QueryReportedCheckpointBtcHeightRequest> {
  /**
   * ckpt_hash is hex encoded byte string of the hash of the checkpoint
   *
   * @generated from field: string ckpt_hash = 1;
   */
  ckptHash = "";

  constructor(data?: PartialMessage<QueryReportedCheckpointBtcHeightRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.monitor.v1.QueryReportedCheckpointBtcHeightRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ckpt_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryReportedCheckpointBtcHeightRequest {
    return new QueryReportedCheckpointBtcHeightRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryReportedCheckpointBtcHeightRequest {
    return new QueryReportedCheckpointBtcHeightRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryReportedCheckpointBtcHeightRequest {
    return new QueryReportedCheckpointBtcHeightRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryReportedCheckpointBtcHeightRequest | PlainMessage<QueryReportedCheckpointBtcHeightRequest> | undefined, b: QueryReportedCheckpointBtcHeightRequest | PlainMessage<QueryReportedCheckpointBtcHeightRequest> | undefined): boolean {
    return proto3.util.equals(QueryReportedCheckpointBtcHeightRequest, a, b);
  }
}

/**
 * QueryReportedCheckpointBtcHeightResponse defines a response type for
 * ReportedCheckpointBtcHeight RPC method
 *
 * @generated from message babylon.monitor.v1.QueryReportedCheckpointBtcHeightResponse
 */
export class QueryReportedCheckpointBtcHeightResponse extends Message<QueryReportedCheckpointBtcHeightResponse> {
  /**
   * height of btc light client when checkpoint is reported
   *
   * @generated from field: uint64 btc_light_client_height = 1;
   */
  btcLightClientHeight = protoInt64.zero;

  constructor(data?: PartialMessage<QueryReportedCheckpointBtcHeightResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.monitor.v1.QueryReportedCheckpointBtcHeightResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "btc_light_client_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryReportedCheckpointBtcHeightResponse {
    return new QueryReportedCheckpointBtcHeightResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryReportedCheckpointBtcHeightResponse {
    return new QueryReportedCheckpointBtcHeightResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryReportedCheckpointBtcHeightResponse {
    return new QueryReportedCheckpointBtcHeightResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryReportedCheckpointBtcHeightResponse | PlainMessage<QueryReportedCheckpointBtcHeightResponse> | undefined, b: QueryReportedCheckpointBtcHeightResponse | PlainMessage<QueryReportedCheckpointBtcHeightResponse> | undefined): boolean {
    return proto3.util.equals(QueryReportedCheckpointBtcHeightResponse, a, b);
  }
}

