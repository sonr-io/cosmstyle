// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/btcstaking/v1/pop.proto (package babylon.btcstaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * BTCSigType indicates the type of btc_sig in a pop
 *
 * @generated from enum babylon.btcstaking.v1.BTCSigType
 */
export enum BTCSigType {
  /**
   * BIP340 means the btc_sig will follow the BIP-340 encoding
   *
   * @generated from enum value: BIP340 = 0;
   */
  BIP340 = 0,

  /**
   * BIP322 means the btc_sig will follow the BIP-322 encoding
   *
   * @generated from enum value: BIP322 = 1;
   */
  BIP322 = 1,

  /**
   * ECDSA means the btc_sig will follow the ECDSA encoding
   * ref: https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
   *
   * @generated from enum value: ECDSA = 2;
   */
  ECDSA = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(BTCSigType)
proto3.util.setEnumType(BTCSigType, "babylon.btcstaking.v1.BTCSigType", [
  { no: 0, name: "BIP340" },
  { no: 1, name: "BIP322" },
  { no: 2, name: "ECDSA" },
]);

/**
 * ProofOfPossession is the proof of possession that a Babylon secp256k1
 * secret key and a Bitcoin secp256k1 secret key are held by the same
 * person
 *
 * @generated from message babylon.btcstaking.v1.ProofOfPossession
 */
export class ProofOfPossession extends Message<ProofOfPossession> {
  /**
   * btc_sig_type indicates the type of btc_sig in the pop
   *
   * @generated from field: babylon.btcstaking.v1.BTCSigType btc_sig_type = 1;
   */
  btcSigType = BTCSigType.BIP340;

  /**
   * babylon_sig is the signature generated via sign(sk_babylon, pk_btc)
   *
   * @generated from field: bytes babylon_sig = 2;
   */
  babylonSig = new Uint8Array(0);

  /**
   * btc_sig is the signature generated via sign(sk_btc, babylon_sig)
   * the signature follows encoding in either BIP-340 spec or BIP-322 spec
   *
   * @generated from field: bytes btc_sig = 3;
   */
  btcSig = new Uint8Array(0);

  constructor(data?: PartialMessage<ProofOfPossession>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.ProofOfPossession";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "btc_sig_type", kind: "enum", T: proto3.getEnumType(BTCSigType) },
    { no: 2, name: "babylon_sig", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "btc_sig", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProofOfPossession {
    return new ProofOfPossession().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProofOfPossession {
    return new ProofOfPossession().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProofOfPossession {
    return new ProofOfPossession().fromJsonString(jsonString, options);
  }

  static equals(a: ProofOfPossession | PlainMessage<ProofOfPossession> | undefined, b: ProofOfPossession | PlainMessage<ProofOfPossession> | undefined): boolean {
    return proto3.util.equals(ProofOfPossession, a, b);
  }
}

/**
 * BIP322Sig is a BIP-322 signature together with the address corresponding to
 * the signer
 *
 * @generated from message babylon.btcstaking.v1.BIP322Sig
 */
export class BIP322Sig extends Message<BIP322Sig> {
  /**
   * address is the signer's address
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * sig is the actual signature in BIP-322 format
   *
   * @generated from field: bytes sig = 2;
   */
  sig = new Uint8Array(0);

  constructor(data?: PartialMessage<BIP322Sig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btcstaking.v1.BIP322Sig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sig", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BIP322Sig {
    return new BIP322Sig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BIP322Sig {
    return new BIP322Sig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BIP322Sig {
    return new BIP322Sig().fromJsonString(jsonString, options);
  }

  static equals(a: BIP322Sig | PlainMessage<BIP322Sig> | undefined, b: BIP322Sig | PlainMessage<BIP322Sig> | undefined): boolean {
    return proto3.util.equals(BIP322Sig, a, b);
  }
}

