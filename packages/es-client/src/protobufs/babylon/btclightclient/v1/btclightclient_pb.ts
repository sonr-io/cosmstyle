// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/btclightclient/v1/btclightclient.proto (package babylon.btclightclient.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * BTCHeaderInfo is a structure that contains all relevant information about a
 * BTC header
 *  - Full header bytes
 *  - Header hash for easy retrieval
 *  - Height of the header in the BTC chain
 *  - Total work spent on the header. This is the sum of the work corresponding
 *  to the header Bits field
 *    and the total work of the header.
 *
 * @generated from message babylon.btclightclient.v1.BTCHeaderInfo
 */
export class BTCHeaderInfo extends Message<BTCHeaderInfo> {
  /**
   * @generated from field: bytes header = 1;
   */
  header = new Uint8Array(0);

  /**
   * @generated from field: bytes hash = 2;
   */
  hash = new Uint8Array(0);

  /**
   * @generated from field: uint64 height = 3;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: bytes work = 4;
   */
  work = new Uint8Array(0);

  constructor(data?: PartialMessage<BTCHeaderInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.BTCHeaderInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "work", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BTCHeaderInfo {
    return new BTCHeaderInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BTCHeaderInfo {
    return new BTCHeaderInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BTCHeaderInfo {
    return new BTCHeaderInfo().fromJsonString(jsonString, options);
  }

  static equals(a: BTCHeaderInfo | PlainMessage<BTCHeaderInfo> | undefined, b: BTCHeaderInfo | PlainMessage<BTCHeaderInfo> | undefined): boolean {
    return proto3.util.equals(BTCHeaderInfo, a, b);
  }
}

