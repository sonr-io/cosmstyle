// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/btclightclient/v1/query.proto (package babylon.btclightclient.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message babylon.btclightclient.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message babylon.btclightclient.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: babylon.btclightclient.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryHashesRequest is request type for the Query/Hashes RPC method.
 * It involves retrieving all hashes that are maintained by the module.
 *
 * @generated from message babylon.btclightclient.v1.QueryHashesRequest
 */
export class QueryHashesRequest extends Message<QueryHashesRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryHashesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryHashesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryHashesRequest {
    return new QueryHashesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryHashesRequest {
    return new QueryHashesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryHashesRequest {
    return new QueryHashesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryHashesRequest | PlainMessage<QueryHashesRequest> | undefined, b: QueryHashesRequest | PlainMessage<QueryHashesRequest> | undefined): boolean {
    return proto3.util.equals(QueryHashesRequest, a, b);
  }
}

/**
 * QueryHashesResponse is response type for the Query/Hashes RPC method.
 *
 * @generated from message babylon.btclightclient.v1.QueryHashesResponse
 */
export class QueryHashesResponse extends Message<QueryHashesResponse> {
  /**
   * @generated from field: repeated bytes hashes = 1;
   */
  hashes: Uint8Array[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryHashesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryHashesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hashes", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryHashesResponse {
    return new QueryHashesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryHashesResponse {
    return new QueryHashesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryHashesResponse {
    return new QueryHashesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryHashesResponse | PlainMessage<QueryHashesResponse> | undefined, b: QueryHashesResponse | PlainMessage<QueryHashesResponse> | undefined): boolean {
    return proto3.util.equals(QueryHashesResponse, a, b);
  }
}

/**
 * QueryContainsRequest is request type for the Query/Contains RPC method.
 * It involves checking whether a hash is maintained by the module.
 *
 * @generated from message babylon.btclightclient.v1.QueryContainsRequest
 */
export class QueryContainsRequest extends Message<QueryContainsRequest> {
  /**
   * @generated from field: bytes hash = 1;
   */
  hash = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryContainsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryContainsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContainsRequest {
    return new QueryContainsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContainsRequest {
    return new QueryContainsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContainsRequest {
    return new QueryContainsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContainsRequest | PlainMessage<QueryContainsRequest> | undefined, b: QueryContainsRequest | PlainMessage<QueryContainsRequest> | undefined): boolean {
    return proto3.util.equals(QueryContainsRequest, a, b);
  }
}

/**
 * QueryContainsResponse is response type for the Query/Contains RPC method.
 *
 * @generated from message babylon.btclightclient.v1.QueryContainsResponse
 */
export class QueryContainsResponse extends Message<QueryContainsResponse> {
  /**
   * @generated from field: bool contains = 1;
   */
  contains = false;

  constructor(data?: PartialMessage<QueryContainsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryContainsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contains", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContainsResponse {
    return new QueryContainsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContainsResponse {
    return new QueryContainsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContainsResponse {
    return new QueryContainsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContainsResponse | PlainMessage<QueryContainsResponse> | undefined, b: QueryContainsResponse | PlainMessage<QueryContainsResponse> | undefined): boolean {
    return proto3.util.equals(QueryContainsResponse, a, b);
  }
}

/**
 * QueryContainsRequest is request type for the temporary Query/ContainsBytes
 * RPC method. It involves checking whether a hash is maintained by the module.
 *
 * @generated from message babylon.btclightclient.v1.QueryContainsBytesRequest
 */
export class QueryContainsBytesRequest extends Message<QueryContainsBytesRequest> {
  /**
   * @generated from field: bytes hash = 1;
   */
  hash = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryContainsBytesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryContainsBytesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContainsBytesRequest {
    return new QueryContainsBytesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContainsBytesRequest {
    return new QueryContainsBytesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContainsBytesRequest {
    return new QueryContainsBytesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContainsBytesRequest | PlainMessage<QueryContainsBytesRequest> | undefined, b: QueryContainsBytesRequest | PlainMessage<QueryContainsBytesRequest> | undefined): boolean {
    return proto3.util.equals(QueryContainsBytesRequest, a, b);
  }
}

/**
 * QueryContainsResponse is response type for the temporary Query/ContainsBytes
 * RPC method.
 *
 * @generated from message babylon.btclightclient.v1.QueryContainsBytesResponse
 */
export class QueryContainsBytesResponse extends Message<QueryContainsBytesResponse> {
  /**
   * @generated from field: bool contains = 1;
   */
  contains = false;

  constructor(data?: PartialMessage<QueryContainsBytesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryContainsBytesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contains", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContainsBytesResponse {
    return new QueryContainsBytesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContainsBytesResponse {
    return new QueryContainsBytesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContainsBytesResponse {
    return new QueryContainsBytesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContainsBytesResponse | PlainMessage<QueryContainsBytesResponse> | undefined, b: QueryContainsBytesResponse | PlainMessage<QueryContainsBytesResponse> | undefined): boolean {
    return proto3.util.equals(QueryContainsBytesResponse, a, b);
  }
}

/**
 * QueryMainChainRequest is request type for the Query/MainChain RPC method.
 * It involves retrieving the canonical chain maintained by the module.
 *
 * @generated from message babylon.btclightclient.v1.QueryMainChainRequest
 */
export class QueryMainChainRequest extends Message<QueryMainChainRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryMainChainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryMainChainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryMainChainRequest {
    return new QueryMainChainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryMainChainRequest {
    return new QueryMainChainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryMainChainRequest {
    return new QueryMainChainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryMainChainRequest | PlainMessage<QueryMainChainRequest> | undefined, b: QueryMainChainRequest | PlainMessage<QueryMainChainRequest> | undefined): boolean {
    return proto3.util.equals(QueryMainChainRequest, a, b);
  }
}

/**
 * QueryMainChainResponse is response type for the Query/MainChain RPC method.
 *
 * @generated from message babylon.btclightclient.v1.QueryMainChainResponse
 */
export class QueryMainChainResponse extends Message<QueryMainChainResponse> {
  /**
   * @generated from field: repeated babylon.btclightclient.v1.BTCHeaderInfoResponse headers = 1;
   */
  headers: BTCHeaderInfoResponse[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryMainChainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryMainChainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "headers", kind: "message", T: BTCHeaderInfoResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryMainChainResponse {
    return new QueryMainChainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryMainChainResponse {
    return new QueryMainChainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryMainChainResponse {
    return new QueryMainChainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryMainChainResponse | PlainMessage<QueryMainChainResponse> | undefined, b: QueryMainChainResponse | PlainMessage<QueryMainChainResponse> | undefined): boolean {
    return proto3.util.equals(QueryMainChainResponse, a, b);
  }
}

/**
 * QueryTipRequest is the request type for the Query/Tip RPC method.
 *
 * @generated from message babylon.btclightclient.v1.QueryTipRequest
 */
export class QueryTipRequest extends Message<QueryTipRequest> {
  constructor(data?: PartialMessage<QueryTipRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryTipRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTipRequest {
    return new QueryTipRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTipRequest {
    return new QueryTipRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTipRequest {
    return new QueryTipRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTipRequest | PlainMessage<QueryTipRequest> | undefined, b: QueryTipRequest | PlainMessage<QueryTipRequest> | undefined): boolean {
    return proto3.util.equals(QueryTipRequest, a, b);
  }
}

/**
 * QueryTipResponse is the response type for the Query/Tip RPC method.
 *
 * @generated from message babylon.btclightclient.v1.QueryTipResponse
 */
export class QueryTipResponse extends Message<QueryTipResponse> {
  /**
   * @generated from field: babylon.btclightclient.v1.BTCHeaderInfoResponse header = 1;
   */
  header?: BTCHeaderInfoResponse;

  constructor(data?: PartialMessage<QueryTipResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryTipResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: BTCHeaderInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTipResponse {
    return new QueryTipResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTipResponse {
    return new QueryTipResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTipResponse {
    return new QueryTipResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTipResponse | PlainMessage<QueryTipResponse> | undefined, b: QueryTipResponse | PlainMessage<QueryTipResponse> | undefined): boolean {
    return proto3.util.equals(QueryTipResponse, a, b);
  }
}

/**
 * QueryBaseHeaderRequest is the request type for the Query/BaseHeader RPC
 * method.
 *
 * @generated from message babylon.btclightclient.v1.QueryBaseHeaderRequest
 */
export class QueryBaseHeaderRequest extends Message<QueryBaseHeaderRequest> {
  constructor(data?: PartialMessage<QueryBaseHeaderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryBaseHeaderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBaseHeaderRequest {
    return new QueryBaseHeaderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBaseHeaderRequest {
    return new QueryBaseHeaderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBaseHeaderRequest {
    return new QueryBaseHeaderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBaseHeaderRequest | PlainMessage<QueryBaseHeaderRequest> | undefined, b: QueryBaseHeaderRequest | PlainMessage<QueryBaseHeaderRequest> | undefined): boolean {
    return proto3.util.equals(QueryBaseHeaderRequest, a, b);
  }
}

/**
 * QueryBaseHeaderResponse is the response type for the Query/BaseHeader RPC
 * method.
 *
 * @generated from message babylon.btclightclient.v1.QueryBaseHeaderResponse
 */
export class QueryBaseHeaderResponse extends Message<QueryBaseHeaderResponse> {
  /**
   * @generated from field: babylon.btclightclient.v1.BTCHeaderInfoResponse header = 1;
   */
  header?: BTCHeaderInfoResponse;

  constructor(data?: PartialMessage<QueryBaseHeaderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryBaseHeaderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: BTCHeaderInfoResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBaseHeaderResponse {
    return new QueryBaseHeaderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBaseHeaderResponse {
    return new QueryBaseHeaderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBaseHeaderResponse {
    return new QueryBaseHeaderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBaseHeaderResponse | PlainMessage<QueryBaseHeaderResponse> | undefined, b: QueryBaseHeaderResponse | PlainMessage<QueryBaseHeaderResponse> | undefined): boolean {
    return proto3.util.equals(QueryBaseHeaderResponse, a, b);
  }
}

/**
 * QueryMainChainDepthRequest is the request type for the Query/MainChainDepth RPC
 * it contains hex encoded hash of btc block header as parameter
 *
 * @generated from message babylon.btclightclient.v1.QueryHeaderDepthRequest
 */
export class QueryHeaderDepthRequest extends Message<QueryHeaderDepthRequest> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  constructor(data?: PartialMessage<QueryHeaderDepthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryHeaderDepthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryHeaderDepthRequest {
    return new QueryHeaderDepthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryHeaderDepthRequest {
    return new QueryHeaderDepthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryHeaderDepthRequest {
    return new QueryHeaderDepthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryHeaderDepthRequest | PlainMessage<QueryHeaderDepthRequest> | undefined, b: QueryHeaderDepthRequest | PlainMessage<QueryHeaderDepthRequest> | undefined): boolean {
    return proto3.util.equals(QueryHeaderDepthRequest, a, b);
  }
}

/**
 * QueryMainChainDepthResponse is the response type for the Query/MainChainDepth RPC
 * it contains depth of the block in main chain
 *
 * @generated from message babylon.btclightclient.v1.QueryHeaderDepthResponse
 */
export class QueryHeaderDepthResponse extends Message<QueryHeaderDepthResponse> {
  /**
   * @generated from field: uint64 depth = 1;
   */
  depth = protoInt64.zero;

  constructor(data?: PartialMessage<QueryHeaderDepthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.QueryHeaderDepthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "depth", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryHeaderDepthResponse {
    return new QueryHeaderDepthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryHeaderDepthResponse {
    return new QueryHeaderDepthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryHeaderDepthResponse {
    return new QueryHeaderDepthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryHeaderDepthResponse | PlainMessage<QueryHeaderDepthResponse> | undefined, b: QueryHeaderDepthResponse | PlainMessage<QueryHeaderDepthResponse> | undefined): boolean {
    return proto3.util.equals(QueryHeaderDepthResponse, a, b);
  }
}

/**
 * BTCHeaderInfoResponse is a structure that contains all relevant information about a
 * BTC header response
 *  - Full header as string hex.
 *  - Header hash for easy retrieval as string hex.
 *  - Height of the header in the BTC chain.
 *  - Total work spent on the header. This is the sum of the work corresponding
 *  to the header Bits field
 *    and the total work of the header.
 *
 * @generated from message babylon.btclightclient.v1.BTCHeaderInfoResponse
 */
export class BTCHeaderInfoResponse extends Message<BTCHeaderInfoResponse> {
  /**
   * @generated from field: string header_hex = 1;
   */
  headerHex = "";

  /**
   * @generated from field: string hash_hex = 2;
   */
  hashHex = "";

  /**
   * @generated from field: uint64 height = 3;
   */
  height = protoInt64.zero;

  /**
   * Work is the sdkmath.Uint as string.
   *
   * @generated from field: string work = 4;
   */
  work = "";

  constructor(data?: PartialMessage<BTCHeaderInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btclightclient.v1.BTCHeaderInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hash_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "work", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BTCHeaderInfoResponse {
    return new BTCHeaderInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BTCHeaderInfoResponse {
    return new BTCHeaderInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BTCHeaderInfoResponse {
    return new BTCHeaderInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BTCHeaderInfoResponse | PlainMessage<BTCHeaderInfoResponse> | undefined, b: BTCHeaderInfoResponse | PlainMessage<BTCHeaderInfoResponse> | undefined): boolean {
    return proto3.util.equals(BTCHeaderInfoResponse, a, b);
  }
}

