// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/btccheckpoint/v1/tx.proto (package babylon.btccheckpoint.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { BTCSpvProof } from "./btccheckpoint_pb.js";
import { Params } from "./params_pb.js";

/**
 * MsgInsertBTCSpvProof defines resquest to insert a new checkpoint into the
 * store
 *
 * @generated from message babylon.btccheckpoint.v1.MsgInsertBTCSpvProof
 */
export class MsgInsertBTCSpvProof extends Message<MsgInsertBTCSpvProof> {
  /**
   * @generated from field: string submitter = 1;
   */
  submitter = "";

  /**
   * @generated from field: repeated babylon.btccheckpoint.v1.BTCSpvProof proofs = 2;
   */
  proofs: BTCSpvProof[] = [];

  constructor(data?: PartialMessage<MsgInsertBTCSpvProof>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btccheckpoint.v1.MsgInsertBTCSpvProof";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "submitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "proofs", kind: "message", T: BTCSpvProof, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInsertBTCSpvProof {
    return new MsgInsertBTCSpvProof().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInsertBTCSpvProof {
    return new MsgInsertBTCSpvProof().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInsertBTCSpvProof {
    return new MsgInsertBTCSpvProof().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInsertBTCSpvProof | PlainMessage<MsgInsertBTCSpvProof> | undefined, b: MsgInsertBTCSpvProof | PlainMessage<MsgInsertBTCSpvProof> | undefined): boolean {
    return proto3.util.equals(MsgInsertBTCSpvProof, a, b);
  }
}

/**
 * MsgInsertBTCSpvProofResponse defines the response for the
 * MsgInsertBTCSpvProof message
 *
 * @generated from message babylon.btccheckpoint.v1.MsgInsertBTCSpvProofResponse
 */
export class MsgInsertBTCSpvProofResponse extends Message<MsgInsertBTCSpvProofResponse> {
  constructor(data?: PartialMessage<MsgInsertBTCSpvProofResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btccheckpoint.v1.MsgInsertBTCSpvProofResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInsertBTCSpvProofResponse {
    return new MsgInsertBTCSpvProofResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInsertBTCSpvProofResponse {
    return new MsgInsertBTCSpvProofResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInsertBTCSpvProofResponse {
    return new MsgInsertBTCSpvProofResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInsertBTCSpvProofResponse | PlainMessage<MsgInsertBTCSpvProofResponse> | undefined, b: MsgInsertBTCSpvProofResponse | PlainMessage<MsgInsertBTCSpvProofResponse> | undefined): boolean {
    return proto3.util.equals(MsgInsertBTCSpvProofResponse, a, b);
  }
}

/**
 * MsgUpdateParams defines a message to update the btccheckpoint module params.
 *
 * @generated from message babylon.btccheckpoint.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   * just FYI: cosmos.AddressString marks that this field should use type alias
   * for AddressString instead of string, but the functionality is not yet implemented
   * in cosmos-proto
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the btccheckpoint parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: babylon.btccheckpoint.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btccheckpoint.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response to the MsgUpdateParams message.
 *
 * @generated from message babylon.btccheckpoint.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.btccheckpoint.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

