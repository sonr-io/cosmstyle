// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/checkpointing/v1/bls_key.proto (package babylon.checkpointing.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * BlsKey wraps BLS public key with PoP
 *
 * @generated from message babylon.checkpointing.v1.BlsKey
 */
export class BlsKey extends Message<BlsKey> {
  /**
   * pubkey is the BLS public key of a validator
   *
   * @generated from field: bytes pubkey = 1;
   */
  pubkey = new Uint8Array(0);

  /**
   * pop is the proof-of-possession of the BLS key
   *
   * @generated from field: babylon.checkpointing.v1.ProofOfPossession pop = 2;
   */
  pop?: ProofOfPossession;

  constructor(data?: PartialMessage<BlsKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.checkpointing.v1.BlsKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pubkey", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "pop", kind: "message", T: ProofOfPossession },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlsKey {
    return new BlsKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlsKey {
    return new BlsKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlsKey {
    return new BlsKey().fromJsonString(jsonString, options);
  }

  static equals(a: BlsKey | PlainMessage<BlsKey> | undefined, b: BlsKey | PlainMessage<BlsKey> | undefined): boolean {
    return proto3.util.equals(BlsKey, a, b);
  }
}

/**
 * ProofOfPossession defines proof for the ownership of Ed25519 and BLS private
 * keys
 *
 * @generated from message babylon.checkpointing.v1.ProofOfPossession
 */
export class ProofOfPossession extends Message<ProofOfPossession> {
  /**
   * ed25519_sig is used for verification, ed25519_sig = sign(key = Ed25519_sk,
   * data = BLS_pk)
   *
   * @generated from field: bytes ed25519_sig = 1;
   */
  ed25519Sig = new Uint8Array(0);

  /**
   * bls_sig is the result of PoP, bls_sig = sign(key = BLS_sk, data =
   * ed25519_sig)
   *
   * @generated from field: bytes bls_sig = 2;
   */
  blsSig = new Uint8Array(0);

  constructor(data?: PartialMessage<ProofOfPossession>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.checkpointing.v1.ProofOfPossession";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ed25519_sig", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "bls_sig", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProofOfPossession {
    return new ProofOfPossession().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProofOfPossession {
    return new ProofOfPossession().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProofOfPossession {
    return new ProofOfPossession().fromJsonString(jsonString, options);
  }

  static equals(a: ProofOfPossession | PlainMessage<ProofOfPossession> | undefined, b: ProofOfPossession | PlainMessage<ProofOfPossession> | undefined): boolean {
    return proto3.util.equals(ProofOfPossession, a, b);
  }
}

/**
 * ValidatorWithBLSSet defines a set of validators with their BLS public keys
 *
 * @generated from message babylon.checkpointing.v1.ValidatorWithBlsKeySet
 */
export class ValidatorWithBlsKeySet extends Message<ValidatorWithBlsKeySet> {
  /**
   * @generated from field: repeated babylon.checkpointing.v1.ValidatorWithBlsKey val_set = 1;
   */
  valSet: ValidatorWithBlsKey[] = [];

  constructor(data?: PartialMessage<ValidatorWithBlsKeySet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.checkpointing.v1.ValidatorWithBlsKeySet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val_set", kind: "message", T: ValidatorWithBlsKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorWithBlsKeySet {
    return new ValidatorWithBlsKeySet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorWithBlsKeySet {
    return new ValidatorWithBlsKeySet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorWithBlsKeySet {
    return new ValidatorWithBlsKeySet().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorWithBlsKeySet | PlainMessage<ValidatorWithBlsKeySet> | undefined, b: ValidatorWithBlsKeySet | PlainMessage<ValidatorWithBlsKeySet> | undefined): boolean {
    return proto3.util.equals(ValidatorWithBlsKeySet, a, b);
  }
}

/**
 * ValidatorWithBlsKey couples validator address, voting power, and its bls
 * public key
 *
 * @generated from message babylon.checkpointing.v1.ValidatorWithBlsKey
 */
export class ValidatorWithBlsKey extends Message<ValidatorWithBlsKey> {
  /**
   * validator_address is the address of the validator
   *
   * @generated from field: string validator_address = 1;
   */
  validatorAddress = "";

  /**
   * bls_pub_key is the BLS public key of the validator
   *
   * @generated from field: bytes bls_pub_key = 2;
   */
  blsPubKey = new Uint8Array(0);

  /**
   * voting_power is the voting power of the validator at the given epoch
   *
   * @generated from field: uint64 voting_power = 3;
   */
  votingPower = protoInt64.zero;

  constructor(data?: PartialMessage<ValidatorWithBlsKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.checkpointing.v1.ValidatorWithBlsKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bls_pub_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "voting_power", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorWithBlsKey {
    return new ValidatorWithBlsKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorWithBlsKey {
    return new ValidatorWithBlsKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorWithBlsKey {
    return new ValidatorWithBlsKey().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorWithBlsKey | PlainMessage<ValidatorWithBlsKey> | undefined, b: ValidatorWithBlsKey | PlainMessage<ValidatorWithBlsKey> | undefined): boolean {
    return proto3.util.equals(ValidatorWithBlsKey, a, b);
  }
}

/**
 * VoteExtension defines the structure used to create a BLS vote extension.
 *
 * @generated from message babylon.checkpointing.v1.VoteExtension
 */
export class VoteExtension extends Message<VoteExtension> {
  /**
   * signer is the address of the vote extension signer
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * validator_address is the address of the validator
   *
   * @generated from field: string validator_address = 2;
   */
  validatorAddress = "";

  /**
   * block_hash is the hash of the block that the vote extension is signed over
   *
   * @generated from field: bytes block_hash = 3;
   */
  blockHash = new Uint8Array(0);

  /**
   * epoch_num is the epoch number of the vote extension
   *
   * @generated from field: uint64 epoch_num = 4;
   */
  epochNum = protoInt64.zero;

  /**
   * height is the height of the vote extension
   *
   * @generated from field: uint64 height = 5;
   */
  height = protoInt64.zero;

  /**
   * bls_sig is the BLS signature
   *
   * @generated from field: bytes bls_sig = 6;
   */
  blsSig = new Uint8Array(0);

  constructor(data?: PartialMessage<VoteExtension>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.checkpointing.v1.VoteExtension";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "block_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "epoch_num", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "bls_sig", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteExtension {
    return new VoteExtension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteExtension {
    return new VoteExtension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteExtension {
    return new VoteExtension().fromJsonString(jsonString, options);
  }

  static equals(a: VoteExtension | PlainMessage<VoteExtension> | undefined, b: VoteExtension | PlainMessage<VoteExtension> | undefined): boolean {
    return proto3.util.equals(VoteExtension, a, b);
  }
}

