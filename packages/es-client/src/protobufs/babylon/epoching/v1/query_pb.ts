// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/epoching/v1/query.proto (package babylon.epoching.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { DelegationLifecycle, Validator } from "./epoching_pb.js";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message babylon.epoching.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message babylon.epoching.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: babylon.epoching.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryEpochInfoRequest is the request type for the Query/EpochInfo method
 *
 * @generated from message babylon.epoching.v1.QueryEpochInfoRequest
 */
export class QueryEpochInfoRequest extends Message<QueryEpochInfoRequest> {
  /**
   * @generated from field: uint64 epoch_num = 1;
   */
  epochNum = protoInt64.zero;

  constructor(data?: PartialMessage<QueryEpochInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryEpochInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_num", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochInfoRequest {
    return new QueryEpochInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochInfoRequest {
    return new QueryEpochInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochInfoRequest {
    return new QueryEpochInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochInfoRequest | PlainMessage<QueryEpochInfoRequest> | undefined, b: QueryEpochInfoRequest | PlainMessage<QueryEpochInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryEpochInfoRequest, a, b);
  }
}

/**
 * QueryEpochInfoRequest is the response type for the Query/EpochInfo method
 *
 * @generated from message babylon.epoching.v1.QueryEpochInfoResponse
 */
export class QueryEpochInfoResponse extends Message<QueryEpochInfoResponse> {
  /**
   * @generated from field: babylon.epoching.v1.EpochResponse epoch = 1;
   */
  epoch?: EpochResponse;

  constructor(data?: PartialMessage<QueryEpochInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryEpochInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch", kind: "message", T: EpochResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochInfoResponse {
    return new QueryEpochInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochInfoResponse {
    return new QueryEpochInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochInfoResponse {
    return new QueryEpochInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochInfoResponse | PlainMessage<QueryEpochInfoResponse> | undefined, b: QueryEpochInfoResponse | PlainMessage<QueryEpochInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryEpochInfoResponse, a, b);
  }
}

/**
 * QueryEpochInfosRequest is the request type for the Query/EpochInfos method
 *
 * @generated from message babylon.epoching.v1.QueryEpochsInfoRequest
 */
export class QueryEpochsInfoRequest extends Message<QueryEpochsInfoRequest> {
  /**
   * pagination defines whether to have the pagination in the request
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryEpochsInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryEpochsInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochsInfoRequest {
    return new QueryEpochsInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochsInfoRequest {
    return new QueryEpochsInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochsInfoRequest {
    return new QueryEpochsInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochsInfoRequest | PlainMessage<QueryEpochsInfoRequest> | undefined, b: QueryEpochsInfoRequest | PlainMessage<QueryEpochsInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryEpochsInfoRequest, a, b);
  }
}

/**
 * QueryEpochsInfoResponse is the response type for the Query/EpochInfos method
 *
 * @generated from message babylon.epoching.v1.QueryEpochsInfoResponse
 */
export class QueryEpochsInfoResponse extends Message<QueryEpochsInfoResponse> {
  /**
   * @generated from field: repeated babylon.epoching.v1.EpochResponse epochs = 1;
   */
  epochs: EpochResponse[] = [];

  /**
   * pagination defines the pagination in the response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryEpochsInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryEpochsInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epochs", kind: "message", T: EpochResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochsInfoResponse {
    return new QueryEpochsInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochsInfoResponse {
    return new QueryEpochsInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochsInfoResponse {
    return new QueryEpochsInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochsInfoResponse | PlainMessage<QueryEpochsInfoResponse> | undefined, b: QueryEpochsInfoResponse | PlainMessage<QueryEpochsInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryEpochsInfoResponse, a, b);
  }
}

/**
 * QueryCurrentEpochRequest is the request type for the Query/CurrentEpoch RPC
 * method
 *
 * @generated from message babylon.epoching.v1.QueryCurrentEpochRequest
 */
export class QueryCurrentEpochRequest extends Message<QueryCurrentEpochRequest> {
  constructor(data?: PartialMessage<QueryCurrentEpochRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryCurrentEpochRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCurrentEpochRequest {
    return new QueryCurrentEpochRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCurrentEpochRequest {
    return new QueryCurrentEpochRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCurrentEpochRequest {
    return new QueryCurrentEpochRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCurrentEpochRequest | PlainMessage<QueryCurrentEpochRequest> | undefined, b: QueryCurrentEpochRequest | PlainMessage<QueryCurrentEpochRequest> | undefined): boolean {
    return proto3.util.equals(QueryCurrentEpochRequest, a, b);
  }
}

/**
 * QueryCurrentEpochResponse is the response type for the Query/CurrentEpoch RPC
 * method
 *
 * @generated from message babylon.epoching.v1.QueryCurrentEpochResponse
 */
export class QueryCurrentEpochResponse extends Message<QueryCurrentEpochResponse> {
  /**
   * current_epoch is the current epoch number
   *
   * @generated from field: uint64 current_epoch = 1;
   */
  currentEpoch = protoInt64.zero;

  /**
   * epoch_boundary is the height of this epoch's last block
   *
   * @generated from field: uint64 epoch_boundary = 2;
   */
  epochBoundary = protoInt64.zero;

  constructor(data?: PartialMessage<QueryCurrentEpochResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryCurrentEpochResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "epoch_boundary", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCurrentEpochResponse {
    return new QueryCurrentEpochResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCurrentEpochResponse {
    return new QueryCurrentEpochResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCurrentEpochResponse {
    return new QueryCurrentEpochResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCurrentEpochResponse | PlainMessage<QueryCurrentEpochResponse> | undefined, b: QueryCurrentEpochResponse | PlainMessage<QueryCurrentEpochResponse> | undefined): boolean {
    return proto3.util.equals(QueryCurrentEpochResponse, a, b);
  }
}

/**
 * QueryEpochMsgsRequest is the request type for the Query/EpochMsgs RPC method
 *
 * @generated from message babylon.epoching.v1.QueryEpochMsgsRequest
 */
export class QueryEpochMsgsRequest extends Message<QueryEpochMsgsRequest> {
  /**
   * epoch_num is the number of epoch of the requested msg queue
   *
   * @generated from field: uint64 epoch_num = 1;
   */
  epochNum = protoInt64.zero;

  /**
   * pagination defines whether to have the pagination in the request
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryEpochMsgsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryEpochMsgsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_num", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochMsgsRequest {
    return new QueryEpochMsgsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochMsgsRequest {
    return new QueryEpochMsgsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochMsgsRequest {
    return new QueryEpochMsgsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochMsgsRequest | PlainMessage<QueryEpochMsgsRequest> | undefined, b: QueryEpochMsgsRequest | PlainMessage<QueryEpochMsgsRequest> | undefined): boolean {
    return proto3.util.equals(QueryEpochMsgsRequest, a, b);
  }
}

/**
 * QueryEpochMsgsResponse is the response type for the Query/EpochMsgs RPC
 * method
 *
 * @generated from message babylon.epoching.v1.QueryEpochMsgsResponse
 */
export class QueryEpochMsgsResponse extends Message<QueryEpochMsgsResponse> {
  /**
   * msgs is the list of messages queued in the current epoch
   *
   * @generated from field: repeated babylon.epoching.v1.QueuedMessageResponse msgs = 1;
   */
  msgs: QueuedMessageResponse[] = [];

  /**
   * pagination defines the pagination in the response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryEpochMsgsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryEpochMsgsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msgs", kind: "message", T: QueuedMessageResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochMsgsResponse {
    return new QueryEpochMsgsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochMsgsResponse {
    return new QueryEpochMsgsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochMsgsResponse {
    return new QueryEpochMsgsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochMsgsResponse | PlainMessage<QueryEpochMsgsResponse> | undefined, b: QueryEpochMsgsResponse | PlainMessage<QueryEpochMsgsResponse> | undefined): boolean {
    return proto3.util.equals(QueryEpochMsgsResponse, a, b);
  }
}

/**
 * QueryLatestEpochMsgsRequest is the request type for the Query/LatestEpochMsgs
 * RPC method it returns epoch msgs within epoch [max(1,
 * end_epoch-epoch_count+1), end_epoch]
 *
 * @generated from message babylon.epoching.v1.QueryLatestEpochMsgsRequest
 */
export class QueryLatestEpochMsgsRequest extends Message<QueryLatestEpochMsgsRequest> {
  /**
   * end_epoch is the number of the last epoch to query
   *
   * @generated from field: uint64 end_epoch = 1;
   */
  endEpoch = protoInt64.zero;

  /**
   * epoch_count is the number of epochs to query
   *
   * @generated from field: uint64 epoch_count = 2;
   */
  epochCount = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryLatestEpochMsgsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryLatestEpochMsgsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "end_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "epoch_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLatestEpochMsgsRequest {
    return new QueryLatestEpochMsgsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLatestEpochMsgsRequest {
    return new QueryLatestEpochMsgsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLatestEpochMsgsRequest {
    return new QueryLatestEpochMsgsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLatestEpochMsgsRequest | PlainMessage<QueryLatestEpochMsgsRequest> | undefined, b: QueryLatestEpochMsgsRequest | PlainMessage<QueryLatestEpochMsgsRequest> | undefined): boolean {
    return proto3.util.equals(QueryLatestEpochMsgsRequest, a, b);
  }
}

/**
 * QueryLatestEpochMsgsResponse is the response type for the
 * Query/LatestEpochMsgs RPC method
 *
 * @generated from message babylon.epoching.v1.QueryLatestEpochMsgsResponse
 */
export class QueryLatestEpochMsgsResponse extends Message<QueryLatestEpochMsgsResponse> {
  /**
   * latest_epoch_msgs is a list of QueuedMessageList
   * each QueuedMessageList has a field identifying the epoch number
   *
   * @generated from field: repeated babylon.epoching.v1.QueuedMessageList latest_epoch_msgs = 1;
   */
  latestEpochMsgs: QueuedMessageList[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryLatestEpochMsgsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryLatestEpochMsgsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "latest_epoch_msgs", kind: "message", T: QueuedMessageList, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLatestEpochMsgsResponse {
    return new QueryLatestEpochMsgsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLatestEpochMsgsResponse {
    return new QueryLatestEpochMsgsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLatestEpochMsgsResponse {
    return new QueryLatestEpochMsgsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLatestEpochMsgsResponse | PlainMessage<QueryLatestEpochMsgsResponse> | undefined, b: QueryLatestEpochMsgsResponse | PlainMessage<QueryLatestEpochMsgsResponse> | undefined): boolean {
    return proto3.util.equals(QueryLatestEpochMsgsResponse, a, b);
  }
}

/**
 * QueryValidatorLifecycleRequest is the request type for the
 * Query/ValidatorLifecycle RPC method
 *
 * @generated from message babylon.epoching.v1.QueryValidatorLifecycleRequest
 */
export class QueryValidatorLifecycleRequest extends Message<QueryValidatorLifecycleRequest> {
  /**
   * @generated from field: string val_addr = 1;
   */
  valAddr = "";

  constructor(data?: PartialMessage<QueryValidatorLifecycleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryValidatorLifecycleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryValidatorLifecycleRequest {
    return new QueryValidatorLifecycleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryValidatorLifecycleRequest {
    return new QueryValidatorLifecycleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryValidatorLifecycleRequest {
    return new QueryValidatorLifecycleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryValidatorLifecycleRequest | PlainMessage<QueryValidatorLifecycleRequest> | undefined, b: QueryValidatorLifecycleRequest | PlainMessage<QueryValidatorLifecycleRequest> | undefined): boolean {
    return proto3.util.equals(QueryValidatorLifecycleRequest, a, b);
  }
}

/**
 * QueryValidatorLifecycleResponse is the response type for the
 * Query/ValidatorLifecycle RPC method
 *
 * @generated from message babylon.epoching.v1.QueryValidatorLifecycleResponse
 */
export class QueryValidatorLifecycleResponse extends Message<QueryValidatorLifecycleResponse> {
  /**
   * @generated from field: string val_addr = 1;
   */
  valAddr = "";

  /**
   * @generated from field: repeated babylon.epoching.v1.ValStateUpdateResponse val_life = 2;
   */
  valLife: ValStateUpdateResponse[] = [];

  constructor(data?: PartialMessage<QueryValidatorLifecycleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryValidatorLifecycleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "val_life", kind: "message", T: ValStateUpdateResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryValidatorLifecycleResponse {
    return new QueryValidatorLifecycleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryValidatorLifecycleResponse {
    return new QueryValidatorLifecycleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryValidatorLifecycleResponse {
    return new QueryValidatorLifecycleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryValidatorLifecycleResponse | PlainMessage<QueryValidatorLifecycleResponse> | undefined, b: QueryValidatorLifecycleResponse | PlainMessage<QueryValidatorLifecycleResponse> | undefined): boolean {
    return proto3.util.equals(QueryValidatorLifecycleResponse, a, b);
  }
}

/**
 * QueryDelegationLifecycleRequest is the request type for the
 * Query/DelegationLifecycle RPC method
 *
 * @generated from message babylon.epoching.v1.QueryDelegationLifecycleRequest
 */
export class QueryDelegationLifecycleRequest extends Message<QueryDelegationLifecycleRequest> {
  /**
   * @generated from field: string del_addr = 1;
   */
  delAddr = "";

  constructor(data?: PartialMessage<QueryDelegationLifecycleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryDelegationLifecycleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "del_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegationLifecycleRequest {
    return new QueryDelegationLifecycleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegationLifecycleRequest {
    return new QueryDelegationLifecycleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegationLifecycleRequest {
    return new QueryDelegationLifecycleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegationLifecycleRequest | PlainMessage<QueryDelegationLifecycleRequest> | undefined, b: QueryDelegationLifecycleRequest | PlainMessage<QueryDelegationLifecycleRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegationLifecycleRequest, a, b);
  }
}

/**
 * QueryDelegationLifecycleRequest is the response type for the
 * Query/DelegationLifecycle RPC method
 *
 * @generated from message babylon.epoching.v1.QueryDelegationLifecycleResponse
 */
export class QueryDelegationLifecycleResponse extends Message<QueryDelegationLifecycleResponse> {
  /**
   * @generated from field: babylon.epoching.v1.DelegationLifecycle del_life = 1;
   */
  delLife?: DelegationLifecycle;

  constructor(data?: PartialMessage<QueryDelegationLifecycleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryDelegationLifecycleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "del_life", kind: "message", T: DelegationLifecycle },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegationLifecycleResponse {
    return new QueryDelegationLifecycleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegationLifecycleResponse {
    return new QueryDelegationLifecycleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegationLifecycleResponse {
    return new QueryDelegationLifecycleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegationLifecycleResponse | PlainMessage<QueryDelegationLifecycleResponse> | undefined, b: QueryDelegationLifecycleResponse | PlainMessage<QueryDelegationLifecycleResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegationLifecycleResponse, a, b);
  }
}

/**
 * QueryEpochValSetRequest is the request type for the Query/EpochValSet RPC
 * method
 *
 * @generated from message babylon.epoching.v1.QueryEpochValSetRequest
 */
export class QueryEpochValSetRequest extends Message<QueryEpochValSetRequest> {
  /**
   * @generated from field: uint64 epoch_num = 1;
   */
  epochNum = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryEpochValSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryEpochValSetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_num", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochValSetRequest {
    return new QueryEpochValSetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochValSetRequest {
    return new QueryEpochValSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochValSetRequest {
    return new QueryEpochValSetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochValSetRequest | PlainMessage<QueryEpochValSetRequest> | undefined, b: QueryEpochValSetRequest | PlainMessage<QueryEpochValSetRequest> | undefined): boolean {
    return proto3.util.equals(QueryEpochValSetRequest, a, b);
  }
}

/**
 * QueryEpochValSetRequest is the response type for the Query/EpochValSet RPC
 * method
 *
 * @generated from message babylon.epoching.v1.QueryEpochValSetResponse
 */
export class QueryEpochValSetResponse extends Message<QueryEpochValSetResponse> {
  /**
   * @generated from field: repeated babylon.epoching.v1.Validator validators = 1;
   */
  validators: Validator[] = [];

  /**
   * @generated from field: int64 total_voting_power = 2;
   */
  totalVotingPower = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 3;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryEpochValSetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueryEpochValSetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validators", kind: "message", T: Validator, repeated: true },
    { no: 2, name: "total_voting_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochValSetResponse {
    return new QueryEpochValSetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochValSetResponse {
    return new QueryEpochValSetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochValSetResponse {
    return new QueryEpochValSetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochValSetResponse | PlainMessage<QueryEpochValSetResponse> | undefined, b: QueryEpochValSetResponse | PlainMessage<QueryEpochValSetResponse> | undefined): boolean {
    return proto3.util.equals(QueryEpochValSetResponse, a, b);
  }
}

/**
 * EpochResponse is a structure that contains the metadata of an epoch
 *
 * @generated from message babylon.epoching.v1.EpochResponse
 */
export class EpochResponse extends Message<EpochResponse> {
  /**
   * epoch_number is the number of this epoch
   *
   * @generated from field: uint64 epoch_number = 1;
   */
  epochNumber = protoInt64.zero;

  /**
   * current_epoch_interval is the epoch interval at the time of this epoch
   *
   * @generated from field: uint64 current_epoch_interval = 2;
   */
  currentEpochInterval = protoInt64.zero;

  /**
   * first_block_height is the height of the first block in this epoch
   *
   * @generated from field: uint64 first_block_height = 3;
   */
  firstBlockHeight = protoInt64.zero;

  /**
   * last_block_time is the time of the last block in this epoch.
   * Babylon needs to remember the last header's time of each epoch to complete
   * unbonding validators/delegations when a previous epoch's checkpoint is
   * finalised. The last_block_time field is nil in the epoch's beginning, and
   * is set upon the end of this epoch.
   *
   * @generated from field: google.protobuf.Timestamp last_block_time = 4;
   */
  lastBlockTime?: Timestamp;

  /**
   * app_hash_root is the Merkle root of all AppHashs in this epoch
   * It will be used for proving a block is in an epoch as hex string.
   *
   * @generated from field: string app_hash_root_hex = 5;
   */
  appHashRootHex = "";

  /**
   * sealer is the last block of the sealed epoch
   * sealer_app_hash points to the sealer but stored in the 1st header
   * of the next epoch as hex string.
   *
   * @generated from field: string sealer_app_hash_hex = 6;
   */
  sealerAppHashHex = "";

  /**
   * sealer_block_hash is the hash of the sealer
   * the validator set has generated a BLS multisig on the hash,
   * i.e., hash of the last block in the epoch as hex string.
   *
   * @generated from field: string sealer_block_hash = 7;
   */
  sealerBlockHash = "";

  constructor(data?: PartialMessage<EpochResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.EpochResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "current_epoch_interval", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "first_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "last_block_time", kind: "message", T: Timestamp },
    { no: 5, name: "app_hash_root_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "sealer_app_hash_hex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "sealer_block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EpochResponse {
    return new EpochResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EpochResponse {
    return new EpochResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EpochResponse {
    return new EpochResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EpochResponse | PlainMessage<EpochResponse> | undefined, b: EpochResponse | PlainMessage<EpochResponse> | undefined): boolean {
    return proto3.util.equals(EpochResponse, a, b);
  }
}

/**
 * QueuedMessageResponse is a message that can change the validator set and is delayed
 * to the end of an epoch
 *
 * @generated from message babylon.epoching.v1.QueuedMessageResponse
 */
export class QueuedMessageResponse extends Message<QueuedMessageResponse> {
  /**
   * tx_id is the ID of the tx that contains the message as hex.
   *
   * @generated from field: string tx_id = 1;
   */
  txId = "";

  /**
   * msg_id is the original message ID, i.e., hash of the marshaled message as hex.
   *
   * @generated from field: string msg_id = 2;
   */
  msgId = "";

  /**
   * block_height is the height when this msg is submitted to Babylon
   *
   * @generated from field: uint64 block_height = 3;
   */
  blockHeight = protoInt64.zero;

  /**
   * block_time is the timestamp when this msg is submitted to Babylon
   *
   * @generated from field: google.protobuf.Timestamp block_time = 4;
   */
  blockTime?: Timestamp;

  /**
   * msg is the actual message that is sent by a user and is queued by the
   * epoching module as string.
   *
   * @generated from field: string msg = 5;
   */
  msg = "";

  constructor(data?: PartialMessage<QueuedMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueuedMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msg_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "block_time", kind: "message", T: Timestamp },
    { no: 5, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueuedMessageResponse {
    return new QueuedMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueuedMessageResponse {
    return new QueuedMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueuedMessageResponse {
    return new QueuedMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueuedMessageResponse | PlainMessage<QueuedMessageResponse> | undefined, b: QueuedMessageResponse | PlainMessage<QueuedMessageResponse> | undefined): boolean {
    return proto3.util.equals(QueuedMessageResponse, a, b);
  }
}

/**
 * QueuedMessageList is a message that contains a list of staking-related
 * messages queued for an epoch
 *
 * @generated from message babylon.epoching.v1.QueuedMessageList
 */
export class QueuedMessageList extends Message<QueuedMessageList> {
  /**
   * @generated from field: uint64 epoch_number = 1;
   */
  epochNumber = protoInt64.zero;

  /**
   * @generated from field: repeated babylon.epoching.v1.QueuedMessageResponse msgs = 2;
   */
  msgs: QueuedMessageResponse[] = [];

  constructor(data?: PartialMessage<QueuedMessageList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.QueuedMessageList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "msgs", kind: "message", T: QueuedMessageResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueuedMessageList {
    return new QueuedMessageList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueuedMessageList {
    return new QueuedMessageList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueuedMessageList {
    return new QueuedMessageList().fromJsonString(jsonString, options);
  }

  static equals(a: QueuedMessageList | PlainMessage<QueuedMessageList> | undefined, b: QueuedMessageList | PlainMessage<QueuedMessageList> | undefined): boolean {
    return proto3.util.equals(QueuedMessageList, a, b);
  }
}

/**
 * ValStateUpdateResponse is a message response that records a state update of a validator.
 *
 * @generated from message babylon.epoching.v1.ValStateUpdateResponse
 */
export class ValStateUpdateResponse extends Message<ValStateUpdateResponse> {
  /**
   * StateDesc defines the descriptive state.
   *
   * @generated from field: string state_desc = 1;
   */
  stateDesc = "";

  /**
   * @generated from field: uint64 block_height = 2;
   */
  blockHeight = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp block_time = 3;
   */
  blockTime?: Timestamp;

  constructor(data?: PartialMessage<ValStateUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.ValStateUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_desc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "block_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValStateUpdateResponse {
    return new ValStateUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValStateUpdateResponse {
    return new ValStateUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValStateUpdateResponse {
    return new ValStateUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ValStateUpdateResponse | PlainMessage<ValStateUpdateResponse> | undefined, b: ValStateUpdateResponse | PlainMessage<ValStateUpdateResponse> | undefined): boolean {
    return proto3.util.equals(ValStateUpdateResponse, a, b);
  }
}

