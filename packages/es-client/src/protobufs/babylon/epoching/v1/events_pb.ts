// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file babylon/epoching/v1/events.proto (package babylon.epoching.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * EventBeginEpoch is the event emitted when an epoch has started
 *
 * @generated from message babylon.epoching.v1.EventBeginEpoch
 */
export class EventBeginEpoch extends Message<EventBeginEpoch> {
  /**
   * @generated from field: uint64 epoch_number = 1;
   */
  epochNumber = protoInt64.zero;

  constructor(data?: PartialMessage<EventBeginEpoch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.EventBeginEpoch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventBeginEpoch {
    return new EventBeginEpoch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventBeginEpoch {
    return new EventBeginEpoch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventBeginEpoch {
    return new EventBeginEpoch().fromJsonString(jsonString, options);
  }

  static equals(a: EventBeginEpoch | PlainMessage<EventBeginEpoch> | undefined, b: EventBeginEpoch | PlainMessage<EventBeginEpoch> | undefined): boolean {
    return proto3.util.equals(EventBeginEpoch, a, b);
  }
}

/**
 * EventEndEpoch is the event emitted when an epoch has ended
 *
 * @generated from message babylon.epoching.v1.EventEndEpoch
 */
export class EventEndEpoch extends Message<EventEndEpoch> {
  /**
   * @generated from field: uint64 epoch_number = 1;
   */
  epochNumber = protoInt64.zero;

  constructor(data?: PartialMessage<EventEndEpoch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.EventEndEpoch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventEndEpoch {
    return new EventEndEpoch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventEndEpoch {
    return new EventEndEpoch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventEndEpoch {
    return new EventEndEpoch().fromJsonString(jsonString, options);
  }

  static equals(a: EventEndEpoch | PlainMessage<EventEndEpoch> | undefined, b: EventEndEpoch | PlainMessage<EventEndEpoch> | undefined): boolean {
    return proto3.util.equals(EventEndEpoch, a, b);
  }
}

/**
 * EventHandleQueuedMsg is the event emitted when a queued message has been
 * handled
 *
 * @generated from message babylon.epoching.v1.EventHandleQueuedMsg
 */
export class EventHandleQueuedMsg extends Message<EventHandleQueuedMsg> {
  /**
   * @generated from field: string original_event_type = 1;
   */
  originalEventType = "";

  /**
   * @generated from field: uint64 epoch_number = 2;
   */
  epochNumber = protoInt64.zero;

  /**
   * @generated from field: uint64 height = 3;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: bytes tx_id = 4;
   */
  txId = new Uint8Array(0);

  /**
   * @generated from field: bytes msg_id = 5;
   */
  msgId = new Uint8Array(0);

  /**
   * @generated from field: repeated bytes original_attributes = 6;
   */
  originalAttributes: Uint8Array[] = [];

  /**
   * @generated from field: string error = 7;
   */
  error = "";

  constructor(data?: PartialMessage<EventHandleQueuedMsg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.EventHandleQueuedMsg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "original_event_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "epoch_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "tx_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "msg_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "original_attributes", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 7, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventHandleQueuedMsg {
    return new EventHandleQueuedMsg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventHandleQueuedMsg {
    return new EventHandleQueuedMsg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventHandleQueuedMsg {
    return new EventHandleQueuedMsg().fromJsonString(jsonString, options);
  }

  static equals(a: EventHandleQueuedMsg | PlainMessage<EventHandleQueuedMsg> | undefined, b: EventHandleQueuedMsg | PlainMessage<EventHandleQueuedMsg> | undefined): boolean {
    return proto3.util.equals(EventHandleQueuedMsg, a, b);
  }
}

/**
 * EventSlashThreshold is the event emitted when a set of validators have been
 * slashed
 *
 * @generated from message babylon.epoching.v1.EventSlashThreshold
 */
export class EventSlashThreshold extends Message<EventSlashThreshold> {
  /**
   * @generated from field: int64 slashed_voting_power = 1;
   */
  slashedVotingPower = protoInt64.zero;

  /**
   * @generated from field: int64 total_voting_power = 2;
   */
  totalVotingPower = protoInt64.zero;

  /**
   * @generated from field: repeated bytes slashed_validators = 3;
   */
  slashedValidators: Uint8Array[] = [];

  constructor(data?: PartialMessage<EventSlashThreshold>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.EventSlashThreshold";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slashed_voting_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total_voting_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "slashed_validators", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSlashThreshold {
    return new EventSlashThreshold().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSlashThreshold {
    return new EventSlashThreshold().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSlashThreshold {
    return new EventSlashThreshold().fromJsonString(jsonString, options);
  }

  static equals(a: EventSlashThreshold | PlainMessage<EventSlashThreshold> | undefined, b: EventSlashThreshold | PlainMessage<EventSlashThreshold> | undefined): boolean {
    return proto3.util.equals(EventSlashThreshold, a, b);
  }
}

/**
 * EventWrappedDelegate is the event emitted when a MsgWrappedDelegate has been
 * queued
 *
 * @generated from message babylon.epoching.v1.EventWrappedDelegate
 */
export class EventWrappedDelegate extends Message<EventWrappedDelegate> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * @generated from field: string validator_address = 2;
   */
  validatorAddress = "";

  /**
   * @generated from field: uint64 amount = 3;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: string denom = 4;
   */
  denom = "";

  /**
   * @generated from field: uint64 epoch_boundary = 5;
   */
  epochBoundary = protoInt64.zero;

  constructor(data?: PartialMessage<EventWrappedDelegate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.EventWrappedDelegate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "epoch_boundary", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventWrappedDelegate {
    return new EventWrappedDelegate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventWrappedDelegate {
    return new EventWrappedDelegate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventWrappedDelegate {
    return new EventWrappedDelegate().fromJsonString(jsonString, options);
  }

  static equals(a: EventWrappedDelegate | PlainMessage<EventWrappedDelegate> | undefined, b: EventWrappedDelegate | PlainMessage<EventWrappedDelegate> | undefined): boolean {
    return proto3.util.equals(EventWrappedDelegate, a, b);
  }
}

/**
 * EventWrappedUndelegate is the event emitted when a MsgWrappedUndelegate has
 * been queued
 *
 * @generated from message babylon.epoching.v1.EventWrappedUndelegate
 */
export class EventWrappedUndelegate extends Message<EventWrappedUndelegate> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * @generated from field: string validator_address = 2;
   */
  validatorAddress = "";

  /**
   * @generated from field: uint64 amount = 3;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: string denom = 4;
   */
  denom = "";

  /**
   * @generated from field: uint64 epoch_boundary = 5;
   */
  epochBoundary = protoInt64.zero;

  constructor(data?: PartialMessage<EventWrappedUndelegate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.EventWrappedUndelegate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "epoch_boundary", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventWrappedUndelegate {
    return new EventWrappedUndelegate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventWrappedUndelegate {
    return new EventWrappedUndelegate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventWrappedUndelegate {
    return new EventWrappedUndelegate().fromJsonString(jsonString, options);
  }

  static equals(a: EventWrappedUndelegate | PlainMessage<EventWrappedUndelegate> | undefined, b: EventWrappedUndelegate | PlainMessage<EventWrappedUndelegate> | undefined): boolean {
    return proto3.util.equals(EventWrappedUndelegate, a, b);
  }
}

/**
 * EventWrappedBeginRedelegate is the event emitted when a
 * MsgWrappedBeginRedelegate has been queued
 *
 * @generated from message babylon.epoching.v1.EventWrappedBeginRedelegate
 */
export class EventWrappedBeginRedelegate extends Message<EventWrappedBeginRedelegate> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * @generated from field: string source_validator_address = 2;
   */
  sourceValidatorAddress = "";

  /**
   * @generated from field: string destination_validator_address = 3;
   */
  destinationValidatorAddress = "";

  /**
   * @generated from field: uint64 amount = 4;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: string denom = 5;
   */
  denom = "";

  /**
   * @generated from field: uint64 epoch_boundary = 6;
   */
  epochBoundary = protoInt64.zero;

  constructor(data?: PartialMessage<EventWrappedBeginRedelegate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.EventWrappedBeginRedelegate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "destination_validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "epoch_boundary", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventWrappedBeginRedelegate {
    return new EventWrappedBeginRedelegate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventWrappedBeginRedelegate {
    return new EventWrappedBeginRedelegate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventWrappedBeginRedelegate {
    return new EventWrappedBeginRedelegate().fromJsonString(jsonString, options);
  }

  static equals(a: EventWrappedBeginRedelegate | PlainMessage<EventWrappedBeginRedelegate> | undefined, b: EventWrappedBeginRedelegate | PlainMessage<EventWrappedBeginRedelegate> | undefined): boolean {
    return proto3.util.equals(EventWrappedBeginRedelegate, a, b);
  }
}

/**
 * EventWrappedCancelUnbondingDelegation is the event emitted when a
 * MsgWrappedCancelUnbondingDelegation has been queued
 *
 * @generated from message babylon.epoching.v1.EventWrappedCancelUnbondingDelegation
 */
export class EventWrappedCancelUnbondingDelegation extends Message<EventWrappedCancelUnbondingDelegation> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * @generated from field: string validator_address = 2;
   */
  validatorAddress = "";

  /**
   * @generated from field: uint64 amount = 3;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: int64 creation_height = 4;
   */
  creationHeight = protoInt64.zero;

  /**
   * @generated from field: uint64 epoch_boundary = 5;
   */
  epochBoundary = protoInt64.zero;

  constructor(data?: PartialMessage<EventWrappedCancelUnbondingDelegation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "babylon.epoching.v1.EventWrappedCancelUnbondingDelegation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "creation_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "epoch_boundary", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventWrappedCancelUnbondingDelegation {
    return new EventWrappedCancelUnbondingDelegation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventWrappedCancelUnbondingDelegation {
    return new EventWrappedCancelUnbondingDelegation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventWrappedCancelUnbondingDelegation {
    return new EventWrappedCancelUnbondingDelegation().fromJsonString(jsonString, options);
  }

  static equals(a: EventWrappedCancelUnbondingDelegation | PlainMessage<EventWrappedCancelUnbondingDelegation> | undefined, b: EventWrappedCancelUnbondingDelegation | PlainMessage<EventWrappedCancelUnbondingDelegation> | undefined): boolean {
    return proto3.util.equals(EventWrappedCancelUnbondingDelegation, a, b);
  }
}

