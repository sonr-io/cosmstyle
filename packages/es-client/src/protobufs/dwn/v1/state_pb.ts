// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dwn/v1/state.proto (package dwn.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message dwn.v1.Credential
 */
export class Credential extends Message<Credential> {
  /**
   * The credential ID as a byte array
   *
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * The credential type (e.g. "public-key")
   *
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * Optional transport hints (usb, nfc, ble, internal)
   *
   * @generated from field: repeated string transports = 3;
   */
  transports: string[] = [];

  /**
   * The credential's public key
   *
   * @generated from field: bytes public_key = 4;
   */
  publicKey = new Uint8Array(0);

  /**
   * The attestation type used (e.g. "none", "indirect", etc)
   *
   * @generated from field: string attestation_type = 5;
   */
  attestationType = "";

  /**
   * Timestamp of when the credential was created
   *
   * @generated from field: uint64 created_at = 6;
   */
  createdAt = protoInt64.zero;

  constructor(data?: PartialMessage<Credential>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.Credential";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "transports", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "public_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "attestation_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Credential {
    return new Credential().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Credential {
    return new Credential().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Credential {
    return new Credential().fromJsonString(jsonString, options);
  }

  static equals(a: Credential | PlainMessage<Credential> | undefined, b: Credential | PlainMessage<Credential> | undefined): boolean {
    return proto3.util.equals(Credential, a, b);
  }
}

/**
 * @generated from message dwn.v1.Profile
 */
export class Profile extends Message<Profile> {
  /**
   * @generated from field: bytes account = 1;
   */
  account = new Uint8Array(0);

  /**
   * @generated from field: uint64 amount = 2;
   */
  amount = protoInt64.zero;

  constructor(data?: PartialMessage<Profile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dwn.v1.Profile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Profile {
    return new Profile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Profile {
    return new Profile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Profile {
    return new Profile().fromJsonString(jsonString, options);
  }

  static equals(a: Profile | PlainMessage<Profile> | undefined, b: Profile | PlainMessage<Profile> | undefined): boolean {
    return proto3.util.equals(Profile, a, b);
  }
}

