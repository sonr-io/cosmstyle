// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file did/v1/tx.proto (package did.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./genesis_pb.js";

/**
 * MsgLinkAuthentication is the message type for the LinkAuthentication RPC.
 *
 * @generated from message did.v1.MsgLinkAuthentication
 */
export class MsgLinkAuthentication extends Message<MsgLinkAuthentication> {
  /**
   * Controller is the address of the controller to authenticate.
   *
   * @generated from field: string controller = 1;
   */
  controller = "";

  /**
   * Subject is the subject of the authentication.
   *
   * @generated from field: string subject = 2;
   */
  subject = "";

  /**
   * Assertion is the assertion of the authentication.
   *
   * @generated from field: string assertion = 3;
   */
  assertion = "";

  /**
   * Authentication is the authentication of the authentication.
   *
   * @generated from field: bytes credential_id = 4;
   */
  credentialId = new Uint8Array(0);

  /**
   * token is the macron token to authenticate the operation.
   *
   * @generated from field: string macaroon_token = 5;
   */
  macaroonToken = "";

  constructor(data?: PartialMessage<MsgLinkAuthentication>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgLinkAuthentication";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "assertion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "credential_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "macaroon_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLinkAuthentication {
    return new MsgLinkAuthentication().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLinkAuthentication {
    return new MsgLinkAuthentication().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLinkAuthentication {
    return new MsgLinkAuthentication().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLinkAuthentication | PlainMessage<MsgLinkAuthentication> | undefined, b: MsgLinkAuthentication | PlainMessage<MsgLinkAuthentication> | undefined): boolean {
    return proto3.util.equals(MsgLinkAuthentication, a, b);
  }
}

/**
 * MsgLinkAuthenticationResponse is the response type for the
 * LinkAuthentication RPC.
 *
 * @generated from message did.v1.MsgLinkAuthenticationResponse
 */
export class MsgLinkAuthenticationResponse extends Message<MsgLinkAuthenticationResponse> {
  /**
   * Success returns true if the specified cid is valid and not already
   * encrypted.
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * Controller is the address of the initialized controller.
   *
   * @generated from field: string did = 2;
   */
  did = "";

  constructor(data?: PartialMessage<MsgLinkAuthenticationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgLinkAuthenticationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLinkAuthenticationResponse {
    return new MsgLinkAuthenticationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLinkAuthenticationResponse {
    return new MsgLinkAuthenticationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLinkAuthenticationResponse {
    return new MsgLinkAuthenticationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLinkAuthenticationResponse | PlainMessage<MsgLinkAuthenticationResponse> | undefined, b: MsgLinkAuthenticationResponse | PlainMessage<MsgLinkAuthenticationResponse> | undefined): boolean {
    return proto3.util.equals(MsgLinkAuthenticationResponse, a, b);
  }
}

/**
 * MsgLinkAssertion is the message type for the LinkAssertion RPC.
 *
 * @generated from message did.v1.MsgLinkAssertion
 */
export class MsgLinkAssertion extends Message<MsgLinkAssertion> {
  /**
   * Controller is the address of the controller to authenticate.
   *
   * @generated from field: string controller = 1;
   */
  controller = "";

  /**
   * Subject is the subject of the authentication.
   *
   * @generated from field: string subject = 2;
   */
  subject = "";

  /**
   * Assertion is the assertion of the authentication.
   *
   * @generated from field: string assertion = 3;
   */
  assertion = "";

  /**
   * token is the macron token to authenticate the operation.
   *
   * @generated from field: string macaroon_token = 4;
   */
  macaroonToken = "";

  constructor(data?: PartialMessage<MsgLinkAssertion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgLinkAssertion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "assertion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "macaroon_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLinkAssertion {
    return new MsgLinkAssertion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLinkAssertion {
    return new MsgLinkAssertion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLinkAssertion {
    return new MsgLinkAssertion().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLinkAssertion | PlainMessage<MsgLinkAssertion> | undefined, b: MsgLinkAssertion | PlainMessage<MsgLinkAssertion> | undefined): boolean {
    return proto3.util.equals(MsgLinkAssertion, a, b);
  }
}

/**
 * MsgLinkAssertionResponse is the response type for the
 * LinkAssertion RPC.
 *
 * @generated from message did.v1.MsgLinkAssertionResponse
 */
export class MsgLinkAssertionResponse extends Message<MsgLinkAssertionResponse> {
  /**
   * Success returns true if the specified cid is valid and not already
   * encrypted.
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * Controller is the address of the initialized controller.
   *
   * @generated from field: string did = 2;
   */
  did = "";

  constructor(data?: PartialMessage<MsgLinkAssertionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgLinkAssertionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLinkAssertionResponse {
    return new MsgLinkAssertionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLinkAssertionResponse {
    return new MsgLinkAssertionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLinkAssertionResponse {
    return new MsgLinkAssertionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLinkAssertionResponse | PlainMessage<MsgLinkAssertionResponse> | undefined, b: MsgLinkAssertionResponse | PlainMessage<MsgLinkAssertionResponse> | undefined): boolean {
    return proto3.util.equals(MsgLinkAssertionResponse, a, b);
  }
}

/**
 * MsgExecuteTx is the message type for the ExecuteTx RPC.
 *
 * @generated from message did.v1.MsgExecuteTx
 */
export class MsgExecuteTx extends Message<MsgExecuteTx> {
  /**
   * Controller is the address of the controller to authenticate.
   *
   * @generated from field: string controller = 1;
   */
  controller = "";

  /**
   * Messages is the list of messages to execute.
   *
   * @generated from field: map<string, bytes> messages = 2;
   */
  messages: { [key: string]: Uint8Array } = {};

  /**
   * MacaroonToken is the macaroon token to authenticate the operation.
   *
   * @generated from field: string macaroon_token = 3;
   */
  macaroonToken = "";

  constructor(data?: PartialMessage<MsgExecuteTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgExecuteTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "messages", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
    { no: 3, name: "macaroon_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteTx {
    return new MsgExecuteTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteTx {
    return new MsgExecuteTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteTx {
    return new MsgExecuteTx().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteTx | PlainMessage<MsgExecuteTx> | undefined, b: MsgExecuteTx | PlainMessage<MsgExecuteTx> | undefined): boolean {
    return proto3.util.equals(MsgExecuteTx, a, b);
  }
}

/**
 * MsgExecuteTxResponse is the response type for the ExecuteTx RPC.
 *
 * @generated from message did.v1.MsgExecuteTxResponse
 */
export class MsgExecuteTxResponse extends Message<MsgExecuteTxResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string tx_hash = 2;
   */
  txHash = "";

  constructor(data?: PartialMessage<MsgExecuteTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgExecuteTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteTxResponse {
    return new MsgExecuteTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteTxResponse {
    return new MsgExecuteTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteTxResponse {
    return new MsgExecuteTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteTxResponse | PlainMessage<MsgExecuteTxResponse> | undefined, b: MsgExecuteTxResponse | PlainMessage<MsgExecuteTxResponse> | undefined): boolean {
    return proto3.util.equals(MsgExecuteTxResponse, a, b);
  }
}

/**
 * MsgUnlinkAssertion is the message type for the UnlinkAssertion RPC.
 *
 * @generated from message did.v1.MsgUnlinkAssertion
 */
export class MsgUnlinkAssertion extends Message<MsgUnlinkAssertion> {
  /**
   * Controller is the address of the controller to authenticate.
   *
   * @generated from field: string controller = 1;
   */
  controller = "";

  /**
   * Assertion is the assertion of the authentication.
   *
   * @generated from field: string assertion_did = 2;
   */
  assertionDid = "";

  /**
   * token is the macron token to authenticate the operation.
   *
   * @generated from field: string macaroon_token = 3;
   */
  macaroonToken = "";

  constructor(data?: PartialMessage<MsgUnlinkAssertion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgUnlinkAssertion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "assertion_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "macaroon_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnlinkAssertion {
    return new MsgUnlinkAssertion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnlinkAssertion {
    return new MsgUnlinkAssertion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnlinkAssertion {
    return new MsgUnlinkAssertion().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnlinkAssertion | PlainMessage<MsgUnlinkAssertion> | undefined, b: MsgUnlinkAssertion | PlainMessage<MsgUnlinkAssertion> | undefined): boolean {
    return proto3.util.equals(MsgUnlinkAssertion, a, b);
  }
}

/**
 * MsgUnlinkAssertionResponse is the response type for the
 * UnlinkAssertion RPC.
 *
 * @generated from message did.v1.MsgUnlinkAssertionResponse
 */
export class MsgUnlinkAssertionResponse extends Message<MsgUnlinkAssertionResponse> {
  /**
   * Success returns true if the specified cid is valid and not already
   * encrypted.
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * Controller is the address of the initialized controller.
   *
   * @generated from field: string did = 2;
   */
  did = "";

  constructor(data?: PartialMessage<MsgUnlinkAssertionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgUnlinkAssertionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnlinkAssertionResponse {
    return new MsgUnlinkAssertionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnlinkAssertionResponse {
    return new MsgUnlinkAssertionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnlinkAssertionResponse {
    return new MsgUnlinkAssertionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnlinkAssertionResponse | PlainMessage<MsgUnlinkAssertionResponse> | undefined, b: MsgUnlinkAssertionResponse | PlainMessage<MsgUnlinkAssertionResponse> | undefined): boolean {
    return proto3.util.equals(MsgUnlinkAssertionResponse, a, b);
  }
}

/**
 * MsgUnlinkAuthentication is the message type for the UnlinkAuthentication RPC.
 *
 * @generated from message did.v1.MsgUnlinkAuthentication
 */
export class MsgUnlinkAuthentication extends Message<MsgUnlinkAuthentication> {
  /**
   * Controller is the address of the controller to authenticate.
   *
   * @generated from field: string controller = 1;
   */
  controller = "";

  /**
   * Subject is the subject of the authentication.
   *
   * @generated from field: string authentication_did = 2;
   */
  authenticationDid = "";

  /**
   * token is the macron token to authenticate the operation.
   *
   * @generated from field: string macaroon_token = 3;
   */
  macaroonToken = "";

  constructor(data?: PartialMessage<MsgUnlinkAuthentication>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgUnlinkAuthentication";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "authentication_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "macaroon_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnlinkAuthentication {
    return new MsgUnlinkAuthentication().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnlinkAuthentication {
    return new MsgUnlinkAuthentication().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnlinkAuthentication {
    return new MsgUnlinkAuthentication().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnlinkAuthentication | PlainMessage<MsgUnlinkAuthentication> | undefined, b: MsgUnlinkAuthentication | PlainMessage<MsgUnlinkAuthentication> | undefined): boolean {
    return proto3.util.equals(MsgUnlinkAuthentication, a, b);
  }
}

/**
 * MsgUnlinkAuthenticationResponse is the response type for the
 * UnlinkAuthentication RPC.
 *
 * @generated from message did.v1.MsgUnlinkAuthenticationResponse
 */
export class MsgUnlinkAuthenticationResponse extends Message<MsgUnlinkAuthenticationResponse> {
  /**
   * Success returns true if the specified cid is valid and not already
   * encrypted.
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * Controller is the address of the initialized controller.
   *
   * @generated from field: string did = 2;
   */
  did = "";

  constructor(data?: PartialMessage<MsgUnlinkAuthenticationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgUnlinkAuthenticationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnlinkAuthenticationResponse {
    return new MsgUnlinkAuthenticationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnlinkAuthenticationResponse {
    return new MsgUnlinkAuthenticationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnlinkAuthenticationResponse {
    return new MsgUnlinkAuthenticationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnlinkAuthenticationResponse | PlainMessage<MsgUnlinkAuthenticationResponse> | undefined, b: MsgUnlinkAuthenticationResponse | PlainMessage<MsgUnlinkAuthenticationResponse> | undefined): boolean {
    return proto3.util.equals(MsgUnlinkAuthenticationResponse, a, b);
  }
}

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message did.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the parameters to update.
   *
   * @generated from field: did.v1.Params params = 2;
   */
  params?: Params;

  /**
   * token is the macron token to authenticate the operation.
   *
   * @generated from field: string token = 3;
   */
  token = "";

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
    { no: 3, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message did.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

