// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file did/v1/query.proto (package did.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Document, Params } from "./genesis_pb.js";

/**
 * Queryequest is the request type for the Query/Params RPC method.
 *
 * @generated from message did.v1.QueryRequest
 */
export class QueryRequest extends Message<QueryRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * @generated from field: string origin = 2;
   */
  origin = "";

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  /**
   * @generated from field: string asset = 4;
   */
  asset = "";

  constructor(data?: PartialMessage<QueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRequest {
    return new QueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRequest | PlainMessage<QueryRequest> | undefined, b: QueryRequest | PlainMessage<QueryRequest> | undefined): boolean {
    return proto3.util.equals(QueryRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message did.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: did.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryResolveResponse is the response type for the Query/Resolve RPC method.
 *
 * @generated from message did.v1.QueryResolveResponse
 */
export class QueryResolveResponse extends Message<QueryResolveResponse> {
  /**
   * document is the DID document
   *
   * @generated from field: did.v1.Document document = 1;
   */
  document?: Document;

  constructor(data?: PartialMessage<QueryResolveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryResolveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document", kind: "message", T: Document },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResolveResponse {
    return new QueryResolveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResolveResponse {
    return new QueryResolveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResolveResponse {
    return new QueryResolveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResolveResponse | PlainMessage<QueryResolveResponse> | undefined, b: QueryResolveResponse | PlainMessage<QueryResolveResponse> | undefined): boolean {
    return proto3.util.equals(QueryResolveResponse, a, b);
  }
}

/**
 * QuerySignRequest is the request type for the Query/Sign RPC method.
 *
 * @generated from message did.v1.QuerySignRequest
 */
export class QuerySignRequest extends Message<QuerySignRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * @generated from field: string origin = 2;
   */
  origin = "";

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  /**
   * @generated from field: string asset = 4;
   */
  asset = "";

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  constructor(data?: PartialMessage<QuerySignRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QuerySignRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySignRequest {
    return new QuerySignRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySignRequest {
    return new QuerySignRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySignRequest {
    return new QuerySignRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySignRequest | PlainMessage<QuerySignRequest> | undefined, b: QuerySignRequest | PlainMessage<QuerySignRequest> | undefined): boolean {
    return proto3.util.equals(QuerySignRequest, a, b);
  }
}

/**
 * QuerySignResponse is the response type for the Query/Sign RPC method.
 *
 * @generated from message did.v1.QuerySignResponse
 */
export class QuerySignResponse extends Message<QuerySignResponse> {
  /**
   * signature is the signature of the message
   *
   * @generated from field: string signature = 1;
   */
  signature = "";

  constructor(data?: PartialMessage<QuerySignResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QuerySignResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySignResponse {
    return new QuerySignResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySignResponse {
    return new QuerySignResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySignResponse {
    return new QuerySignResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySignResponse | PlainMessage<QuerySignResponse> | undefined, b: QuerySignResponse | PlainMessage<QuerySignResponse> | undefined): boolean {
    return proto3.util.equals(QuerySignResponse, a, b);
  }
}

/**
 * QueryVerifyRequest is the request type for the Query/Verify RPC method.
 *
 * @generated from message did.v1.QueryVerifyRequest
 */
export class QueryVerifyRequest extends Message<QueryVerifyRequest> {
  /**
   * @generated from field: string did = 1;
   */
  did = "";

  /**
   * @generated from field: string origin = 2;
   */
  origin = "";

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  /**
   * @generated from field: string asset = 4;
   */
  asset = "";

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: string signature = 6;
   */
  signature = "";

  constructor(data?: PartialMessage<QueryVerifyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryVerifyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVerifyRequest {
    return new QueryVerifyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVerifyRequest {
    return new QueryVerifyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVerifyRequest {
    return new QueryVerifyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVerifyRequest | PlainMessage<QueryVerifyRequest> | undefined, b: QueryVerifyRequest | PlainMessage<QueryVerifyRequest> | undefined): boolean {
    return proto3.util.equals(QueryVerifyRequest, a, b);
  }
}

/**
 * QueryVerifyResponse is the response type for the Query/Verify RPC method.
 *
 * @generated from message did.v1.QueryVerifyResponse
 */
export class QueryVerifyResponse extends Message<QueryVerifyResponse> {
  /**
   * valid is the validity of the signature
   *
   * @generated from field: bool valid = 1;
   */
  valid = false;

  constructor(data?: PartialMessage<QueryVerifyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.QueryVerifyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "valid", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVerifyResponse {
    return new QueryVerifyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVerifyResponse {
    return new QueryVerifyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVerifyResponse {
    return new QueryVerifyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVerifyResponse | PlainMessage<QueryVerifyResponse> | undefined, b: QueryVerifyResponse | PlainMessage<QueryVerifyResponse> | undefined): boolean {
    return proto3.util.equals(QueryVerifyResponse, a, b);
  }
}

