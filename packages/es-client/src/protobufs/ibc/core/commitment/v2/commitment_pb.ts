// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/core/commitment/v2/commitment.proto (package ibc.core.commitment.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * MerklePath is the path used to verify commitment proofs, which can be an
 * arbitrary structured object (defined by a commitment type).
 * MerklePath is represented from root-to-leaf
 *
 * @generated from message ibc.core.commitment.v2.MerklePath
 */
export class MerklePath extends Message<MerklePath> {
  /**
   * @generated from field: repeated bytes key_path = 1;
   */
  keyPath: Uint8Array[] = [];

  constructor(data?: PartialMessage<MerklePath>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.commitment.v2.MerklePath";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_path", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MerklePath {
    return new MerklePath().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MerklePath {
    return new MerklePath().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MerklePath {
    return new MerklePath().fromJsonString(jsonString, options);
  }

  static equals(a: MerklePath | PlainMessage<MerklePath> | undefined, b: MerklePath | PlainMessage<MerklePath> | undefined): boolean {
    return proto3.util.equals(MerklePath, a, b);
  }
}

