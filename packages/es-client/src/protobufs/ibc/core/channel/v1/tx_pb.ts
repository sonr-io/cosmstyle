// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/core/channel/v1/tx.proto (package ibc.core.channel.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Channel, Packet, Params, State } from "./channel_pb.js";
import { Height } from "../../client/v1/client_pb.js";
import { ErrorReceipt, Upgrade, UpgradeFields } from "./upgrade_pb.js";

/**
 * ResponseResultType defines the possible outcomes of the execution of a message
 *
 * @generated from enum ibc.core.channel.v1.ResponseResultType
 */
export enum ResponseResultType {
  /**
   * Default zero value enumeration
   *
   * @generated from enum value: RESPONSE_RESULT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
   *
   * @generated from enum value: RESPONSE_RESULT_TYPE_NOOP = 1;
   */
  NOOP = 1,

  /**
   * The message was executed successfully
   *
   * @generated from enum value: RESPONSE_RESULT_TYPE_SUCCESS = 2;
   */
  SUCCESS = 2,

  /**
   * The message was executed unsuccessfully
   *
   * @generated from enum value: RESPONSE_RESULT_TYPE_FAILURE = 3;
   */
  FAILURE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ResponseResultType)
proto3.util.setEnumType(ResponseResultType, "ibc.core.channel.v1.ResponseResultType", [
  { no: 0, name: "RESPONSE_RESULT_TYPE_UNSPECIFIED" },
  { no: 1, name: "RESPONSE_RESULT_TYPE_NOOP" },
  { no: 2, name: "RESPONSE_RESULT_TYPE_SUCCESS" },
  { no: 3, name: "RESPONSE_RESULT_TYPE_FAILURE" },
]);

/**
 * MsgChannelOpenInit defines an sdk.Msg to initialize a channel handshake. It
 * is called by a relayer on Chain A.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenInit
 */
export class MsgChannelOpenInit extends Message<MsgChannelOpenInit> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: ibc.core.channel.v1.Channel channel = 2;
   */
  channel?: Channel;

  /**
   * @generated from field: string signer = 3;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgChannelOpenInit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelOpenInit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel", kind: "message", T: Channel },
    { no: 3, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelOpenInit {
    return new MsgChannelOpenInit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelOpenInit {
    return new MsgChannelOpenInit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelOpenInit {
    return new MsgChannelOpenInit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelOpenInit | PlainMessage<MsgChannelOpenInit> | undefined, b: MsgChannelOpenInit | PlainMessage<MsgChannelOpenInit> | undefined): boolean {
    return proto3.util.equals(MsgChannelOpenInit, a, b);
  }
}

/**
 * MsgChannelOpenInitResponse defines the Msg/ChannelOpenInit response type.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenInitResponse
 */
export class MsgChannelOpenInitResponse extends Message<MsgChannelOpenInitResponse> {
  /**
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  constructor(data?: PartialMessage<MsgChannelOpenInitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelOpenInitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelOpenInitResponse {
    return new MsgChannelOpenInitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelOpenInitResponse {
    return new MsgChannelOpenInitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelOpenInitResponse {
    return new MsgChannelOpenInitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelOpenInitResponse | PlainMessage<MsgChannelOpenInitResponse> | undefined, b: MsgChannelOpenInitResponse | PlainMessage<MsgChannelOpenInitResponse> | undefined): boolean {
    return proto3.util.equals(MsgChannelOpenInitResponse, a, b);
  }
}

/**
 * MsgChannelOpenInit defines a msg sent by a Relayer to try to open a channel
 * on Chain B. The version field within the Channel field has been deprecated. Its
 * value will be ignored by core IBC.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenTry
 */
export class MsgChannelOpenTry extends Message<MsgChannelOpenTry> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * Deprecated: this field is unused. Crossing hello's are no longer supported in core IBC.
   *
   * @generated from field: string previous_channel_id = 2 [deprecated = true];
   * @deprecated
   */
  previousChannelId = "";

  /**
   * NOTE: the version field within the channel has been deprecated. Its value will be ignored by core IBC.
   *
   * @generated from field: ibc.core.channel.v1.Channel channel = 3;
   */
  channel?: Channel;

  /**
   * @generated from field: string counterparty_version = 4;
   */
  counterpartyVersion = "";

  /**
   * @generated from field: bytes proof_init = 5;
   */
  proofInit = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 6;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 7;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgChannelOpenTry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelOpenTry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "previous_channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "channel", kind: "message", T: Channel },
    { no: 4, name: "counterparty_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "proof_init", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "proof_height", kind: "message", T: Height },
    { no: 7, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelOpenTry {
    return new MsgChannelOpenTry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelOpenTry {
    return new MsgChannelOpenTry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelOpenTry {
    return new MsgChannelOpenTry().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelOpenTry | PlainMessage<MsgChannelOpenTry> | undefined, b: MsgChannelOpenTry | PlainMessage<MsgChannelOpenTry> | undefined): boolean {
    return proto3.util.equals(MsgChannelOpenTry, a, b);
  }
}

/**
 * MsgChannelOpenTryResponse defines the Msg/ChannelOpenTry response type.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenTryResponse
 */
export class MsgChannelOpenTryResponse extends Message<MsgChannelOpenTryResponse> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  constructor(data?: PartialMessage<MsgChannelOpenTryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelOpenTryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelOpenTryResponse {
    return new MsgChannelOpenTryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelOpenTryResponse {
    return new MsgChannelOpenTryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelOpenTryResponse {
    return new MsgChannelOpenTryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelOpenTryResponse | PlainMessage<MsgChannelOpenTryResponse> | undefined, b: MsgChannelOpenTryResponse | PlainMessage<MsgChannelOpenTryResponse> | undefined): boolean {
    return proto3.util.equals(MsgChannelOpenTryResponse, a, b);
  }
}

/**
 * MsgChannelOpenAck defines a msg sent by a Relayer to Chain A to acknowledge
 * the change of channel state to TRYOPEN on Chain B.
 * WARNING: a channel upgrade MUST NOT initialize an upgrade for this channel
 * in the same block as executing this message otherwise the counterparty will
 * be incapable of opening.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenAck
 */
export class MsgChannelOpenAck extends Message<MsgChannelOpenAck> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: string counterparty_channel_id = 3;
   */
  counterpartyChannelId = "";

  /**
   * @generated from field: string counterparty_version = 4;
   */
  counterpartyVersion = "";

  /**
   * @generated from field: bytes proof_try = 5;
   */
  proofTry = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 6;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 7;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgChannelOpenAck>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelOpenAck";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "counterparty_channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "counterparty_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "proof_try", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "proof_height", kind: "message", T: Height },
    { no: 7, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelOpenAck {
    return new MsgChannelOpenAck().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelOpenAck {
    return new MsgChannelOpenAck().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelOpenAck {
    return new MsgChannelOpenAck().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelOpenAck | PlainMessage<MsgChannelOpenAck> | undefined, b: MsgChannelOpenAck | PlainMessage<MsgChannelOpenAck> | undefined): boolean {
    return proto3.util.equals(MsgChannelOpenAck, a, b);
  }
}

/**
 * MsgChannelOpenAckResponse defines the Msg/ChannelOpenAck response type.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenAckResponse
 */
export class MsgChannelOpenAckResponse extends Message<MsgChannelOpenAckResponse> {
  constructor(data?: PartialMessage<MsgChannelOpenAckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelOpenAckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelOpenAckResponse {
    return new MsgChannelOpenAckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelOpenAckResponse {
    return new MsgChannelOpenAckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelOpenAckResponse {
    return new MsgChannelOpenAckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelOpenAckResponse | PlainMessage<MsgChannelOpenAckResponse> | undefined, b: MsgChannelOpenAckResponse | PlainMessage<MsgChannelOpenAckResponse> | undefined): boolean {
    return proto3.util.equals(MsgChannelOpenAckResponse, a, b);
  }
}

/**
 * MsgChannelOpenConfirm defines a msg sent by a Relayer to Chain B to
 * acknowledge the change of channel state to OPEN on Chain A.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenConfirm
 */
export class MsgChannelOpenConfirm extends Message<MsgChannelOpenConfirm> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: bytes proof_ack = 3;
   */
  proofAck = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 4;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 5;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgChannelOpenConfirm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelOpenConfirm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "proof_ack", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
    { no: 5, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelOpenConfirm {
    return new MsgChannelOpenConfirm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelOpenConfirm {
    return new MsgChannelOpenConfirm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelOpenConfirm {
    return new MsgChannelOpenConfirm().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelOpenConfirm | PlainMessage<MsgChannelOpenConfirm> | undefined, b: MsgChannelOpenConfirm | PlainMessage<MsgChannelOpenConfirm> | undefined): boolean {
    return proto3.util.equals(MsgChannelOpenConfirm, a, b);
  }
}

/**
 * MsgChannelOpenConfirmResponse defines the Msg/ChannelOpenConfirm response
 * type.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenConfirmResponse
 */
export class MsgChannelOpenConfirmResponse extends Message<MsgChannelOpenConfirmResponse> {
  constructor(data?: PartialMessage<MsgChannelOpenConfirmResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelOpenConfirmResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelOpenConfirmResponse {
    return new MsgChannelOpenConfirmResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelOpenConfirmResponse {
    return new MsgChannelOpenConfirmResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelOpenConfirmResponse {
    return new MsgChannelOpenConfirmResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelOpenConfirmResponse | PlainMessage<MsgChannelOpenConfirmResponse> | undefined, b: MsgChannelOpenConfirmResponse | PlainMessage<MsgChannelOpenConfirmResponse> | undefined): boolean {
    return proto3.util.equals(MsgChannelOpenConfirmResponse, a, b);
  }
}

/**
 * MsgChannelCloseInit defines a msg sent by a Relayer to Chain A
 * to close a channel with Chain B.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelCloseInit
 */
export class MsgChannelCloseInit extends Message<MsgChannelCloseInit> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: string signer = 3;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgChannelCloseInit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelCloseInit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelCloseInit {
    return new MsgChannelCloseInit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelCloseInit {
    return new MsgChannelCloseInit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelCloseInit {
    return new MsgChannelCloseInit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelCloseInit | PlainMessage<MsgChannelCloseInit> | undefined, b: MsgChannelCloseInit | PlainMessage<MsgChannelCloseInit> | undefined): boolean {
    return proto3.util.equals(MsgChannelCloseInit, a, b);
  }
}

/**
 * MsgChannelCloseInitResponse defines the Msg/ChannelCloseInit response type.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelCloseInitResponse
 */
export class MsgChannelCloseInitResponse extends Message<MsgChannelCloseInitResponse> {
  constructor(data?: PartialMessage<MsgChannelCloseInitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelCloseInitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelCloseInitResponse {
    return new MsgChannelCloseInitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelCloseInitResponse {
    return new MsgChannelCloseInitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelCloseInitResponse {
    return new MsgChannelCloseInitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelCloseInitResponse | PlainMessage<MsgChannelCloseInitResponse> | undefined, b: MsgChannelCloseInitResponse | PlainMessage<MsgChannelCloseInitResponse> | undefined): boolean {
    return proto3.util.equals(MsgChannelCloseInitResponse, a, b);
  }
}

/**
 * MsgChannelCloseConfirm defines a msg sent by a Relayer to Chain B
 * to acknowledge the change of channel state to CLOSED on Chain A.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelCloseConfirm
 */
export class MsgChannelCloseConfirm extends Message<MsgChannelCloseConfirm> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: bytes proof_init = 3;
   */
  proofInit = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 4;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 5;
   */
  signer = "";

  /**
   * @generated from field: uint64 counterparty_upgrade_sequence = 6;
   */
  counterpartyUpgradeSequence = protoInt64.zero;

  constructor(data?: PartialMessage<MsgChannelCloseConfirm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelCloseConfirm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "proof_init", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
    { no: 5, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "counterparty_upgrade_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelCloseConfirm {
    return new MsgChannelCloseConfirm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelCloseConfirm {
    return new MsgChannelCloseConfirm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelCloseConfirm {
    return new MsgChannelCloseConfirm().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelCloseConfirm | PlainMessage<MsgChannelCloseConfirm> | undefined, b: MsgChannelCloseConfirm | PlainMessage<MsgChannelCloseConfirm> | undefined): boolean {
    return proto3.util.equals(MsgChannelCloseConfirm, a, b);
  }
}

/**
 * MsgChannelCloseConfirmResponse defines the Msg/ChannelCloseConfirm response
 * type.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelCloseConfirmResponse
 */
export class MsgChannelCloseConfirmResponse extends Message<MsgChannelCloseConfirmResponse> {
  constructor(data?: PartialMessage<MsgChannelCloseConfirmResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelCloseConfirmResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelCloseConfirmResponse {
    return new MsgChannelCloseConfirmResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelCloseConfirmResponse {
    return new MsgChannelCloseConfirmResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelCloseConfirmResponse {
    return new MsgChannelCloseConfirmResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelCloseConfirmResponse | PlainMessage<MsgChannelCloseConfirmResponse> | undefined, b: MsgChannelCloseConfirmResponse | PlainMessage<MsgChannelCloseConfirmResponse> | undefined): boolean {
    return proto3.util.equals(MsgChannelCloseConfirmResponse, a, b);
  }
}

/**
 * MsgRecvPacket receives incoming IBC packet
 *
 * @generated from message ibc.core.channel.v1.MsgRecvPacket
 */
export class MsgRecvPacket extends Message<MsgRecvPacket> {
  /**
   * @generated from field: ibc.core.channel.v1.Packet packet = 1;
   */
  packet?: Packet;

  /**
   * @generated from field: bytes proof_commitment = 2;
   */
  proofCommitment = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 4;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgRecvPacket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgRecvPacket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packet", kind: "message", T: Packet },
    { no: 2, name: "proof_commitment", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
    { no: 4, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRecvPacket {
    return new MsgRecvPacket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRecvPacket {
    return new MsgRecvPacket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRecvPacket {
    return new MsgRecvPacket().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRecvPacket | PlainMessage<MsgRecvPacket> | undefined, b: MsgRecvPacket | PlainMessage<MsgRecvPacket> | undefined): boolean {
    return proto3.util.equals(MsgRecvPacket, a, b);
  }
}

/**
 * MsgRecvPacketResponse defines the Msg/RecvPacket response type.
 *
 * @generated from message ibc.core.channel.v1.MsgRecvPacketResponse
 */
export class MsgRecvPacketResponse extends Message<MsgRecvPacketResponse> {
  /**
   * @generated from field: ibc.core.channel.v1.ResponseResultType result = 1;
   */
  result = ResponseResultType.UNSPECIFIED;

  constructor(data?: PartialMessage<MsgRecvPacketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgRecvPacketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ResponseResultType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRecvPacketResponse {
    return new MsgRecvPacketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRecvPacketResponse {
    return new MsgRecvPacketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRecvPacketResponse {
    return new MsgRecvPacketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRecvPacketResponse | PlainMessage<MsgRecvPacketResponse> | undefined, b: MsgRecvPacketResponse | PlainMessage<MsgRecvPacketResponse> | undefined): boolean {
    return proto3.util.equals(MsgRecvPacketResponse, a, b);
  }
}

/**
 * MsgTimeout receives timed-out packet
 *
 * @generated from message ibc.core.channel.v1.MsgTimeout
 */
export class MsgTimeout extends Message<MsgTimeout> {
  /**
   * @generated from field: ibc.core.channel.v1.Packet packet = 1;
   */
  packet?: Packet;

  /**
   * @generated from field: bytes proof_unreceived = 2;
   */
  proofUnreceived = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 3;
   */
  proofHeight?: Height;

  /**
   * @generated from field: uint64 next_sequence_recv = 4;
   */
  nextSequenceRecv = protoInt64.zero;

  /**
   * @generated from field: string signer = 5;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgTimeout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgTimeout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packet", kind: "message", T: Packet },
    { no: 2, name: "proof_unreceived", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
    { no: 4, name: "next_sequence_recv", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTimeout {
    return new MsgTimeout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTimeout {
    return new MsgTimeout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTimeout {
    return new MsgTimeout().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTimeout | PlainMessage<MsgTimeout> | undefined, b: MsgTimeout | PlainMessage<MsgTimeout> | undefined): boolean {
    return proto3.util.equals(MsgTimeout, a, b);
  }
}

/**
 * MsgTimeoutResponse defines the Msg/Timeout response type.
 *
 * @generated from message ibc.core.channel.v1.MsgTimeoutResponse
 */
export class MsgTimeoutResponse extends Message<MsgTimeoutResponse> {
  /**
   * @generated from field: ibc.core.channel.v1.ResponseResultType result = 1;
   */
  result = ResponseResultType.UNSPECIFIED;

  constructor(data?: PartialMessage<MsgTimeoutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgTimeoutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ResponseResultType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTimeoutResponse {
    return new MsgTimeoutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTimeoutResponse {
    return new MsgTimeoutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTimeoutResponse {
    return new MsgTimeoutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTimeoutResponse | PlainMessage<MsgTimeoutResponse> | undefined, b: MsgTimeoutResponse | PlainMessage<MsgTimeoutResponse> | undefined): boolean {
    return proto3.util.equals(MsgTimeoutResponse, a, b);
  }
}

/**
 * MsgTimeoutOnClose timed-out packet upon counterparty channel closure.
 *
 * @generated from message ibc.core.channel.v1.MsgTimeoutOnClose
 */
export class MsgTimeoutOnClose extends Message<MsgTimeoutOnClose> {
  /**
   * @generated from field: ibc.core.channel.v1.Packet packet = 1;
   */
  packet?: Packet;

  /**
   * @generated from field: bytes proof_unreceived = 2;
   */
  proofUnreceived = new Uint8Array(0);

  /**
   * @generated from field: bytes proof_close = 3;
   */
  proofClose = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 4;
   */
  proofHeight?: Height;

  /**
   * @generated from field: uint64 next_sequence_recv = 5;
   */
  nextSequenceRecv = protoInt64.zero;

  /**
   * @generated from field: string signer = 6;
   */
  signer = "";

  /**
   * @generated from field: uint64 counterparty_upgrade_sequence = 7;
   */
  counterpartyUpgradeSequence = protoInt64.zero;

  constructor(data?: PartialMessage<MsgTimeoutOnClose>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgTimeoutOnClose";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packet", kind: "message", T: Packet },
    { no: 2, name: "proof_unreceived", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_close", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
    { no: 5, name: "next_sequence_recv", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "counterparty_upgrade_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTimeoutOnClose {
    return new MsgTimeoutOnClose().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTimeoutOnClose {
    return new MsgTimeoutOnClose().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTimeoutOnClose {
    return new MsgTimeoutOnClose().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTimeoutOnClose | PlainMessage<MsgTimeoutOnClose> | undefined, b: MsgTimeoutOnClose | PlainMessage<MsgTimeoutOnClose> | undefined): boolean {
    return proto3.util.equals(MsgTimeoutOnClose, a, b);
  }
}

/**
 * MsgTimeoutOnCloseResponse defines the Msg/TimeoutOnClose response type.
 *
 * @generated from message ibc.core.channel.v1.MsgTimeoutOnCloseResponse
 */
export class MsgTimeoutOnCloseResponse extends Message<MsgTimeoutOnCloseResponse> {
  /**
   * @generated from field: ibc.core.channel.v1.ResponseResultType result = 1;
   */
  result = ResponseResultType.UNSPECIFIED;

  constructor(data?: PartialMessage<MsgTimeoutOnCloseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgTimeoutOnCloseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ResponseResultType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTimeoutOnCloseResponse {
    return new MsgTimeoutOnCloseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTimeoutOnCloseResponse {
    return new MsgTimeoutOnCloseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTimeoutOnCloseResponse {
    return new MsgTimeoutOnCloseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTimeoutOnCloseResponse | PlainMessage<MsgTimeoutOnCloseResponse> | undefined, b: MsgTimeoutOnCloseResponse | PlainMessage<MsgTimeoutOnCloseResponse> | undefined): boolean {
    return proto3.util.equals(MsgTimeoutOnCloseResponse, a, b);
  }
}

/**
 * MsgAcknowledgement receives incoming IBC acknowledgement
 *
 * @generated from message ibc.core.channel.v1.MsgAcknowledgement
 */
export class MsgAcknowledgement extends Message<MsgAcknowledgement> {
  /**
   * @generated from field: ibc.core.channel.v1.Packet packet = 1;
   */
  packet?: Packet;

  /**
   * @generated from field: bytes acknowledgement = 2;
   */
  acknowledgement = new Uint8Array(0);

  /**
   * @generated from field: bytes proof_acked = 3;
   */
  proofAcked = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 4;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 5;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgAcknowledgement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgAcknowledgement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packet", kind: "message", T: Packet },
    { no: 2, name: "acknowledgement", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_acked", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
    { no: 5, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAcknowledgement {
    return new MsgAcknowledgement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAcknowledgement {
    return new MsgAcknowledgement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAcknowledgement {
    return new MsgAcknowledgement().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAcknowledgement | PlainMessage<MsgAcknowledgement> | undefined, b: MsgAcknowledgement | PlainMessage<MsgAcknowledgement> | undefined): boolean {
    return proto3.util.equals(MsgAcknowledgement, a, b);
  }
}

/**
 * MsgAcknowledgementResponse defines the Msg/Acknowledgement response type.
 *
 * @generated from message ibc.core.channel.v1.MsgAcknowledgementResponse
 */
export class MsgAcknowledgementResponse extends Message<MsgAcknowledgementResponse> {
  /**
   * @generated from field: ibc.core.channel.v1.ResponseResultType result = 1;
   */
  result = ResponseResultType.UNSPECIFIED;

  constructor(data?: PartialMessage<MsgAcknowledgementResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgAcknowledgementResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ResponseResultType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAcknowledgementResponse {
    return new MsgAcknowledgementResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAcknowledgementResponse {
    return new MsgAcknowledgementResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAcknowledgementResponse {
    return new MsgAcknowledgementResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAcknowledgementResponse | PlainMessage<MsgAcknowledgementResponse> | undefined, b: MsgAcknowledgementResponse | PlainMessage<MsgAcknowledgementResponse> | undefined): boolean {
    return proto3.util.equals(MsgAcknowledgementResponse, a, b);
  }
}

/**
 * MsgChannelUpgradeInit defines the request type for the ChannelUpgradeInit rpc
 * WARNING: Initializing a channel upgrade in the same block as opening the channel
 * may result in the counterparty being incapable of opening.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelUpgradeInit
 */
export class MsgChannelUpgradeInit extends Message<MsgChannelUpgradeInit> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: ibc.core.channel.v1.UpgradeFields fields = 3;
   */
  fields?: UpgradeFields;

  /**
   * @generated from field: string signer = 4;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgChannelUpgradeInit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelUpgradeInit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fields", kind: "message", T: UpgradeFields },
    { no: 4, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelUpgradeInit {
    return new MsgChannelUpgradeInit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelUpgradeInit {
    return new MsgChannelUpgradeInit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelUpgradeInit {
    return new MsgChannelUpgradeInit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelUpgradeInit | PlainMessage<MsgChannelUpgradeInit> | undefined, b: MsgChannelUpgradeInit | PlainMessage<MsgChannelUpgradeInit> | undefined): boolean {
    return proto3.util.equals(MsgChannelUpgradeInit, a, b);
  }
}

/**
 * MsgChannelUpgradeInitResponse defines the MsgChannelUpgradeInit response type
 *
 * @generated from message ibc.core.channel.v1.MsgChannelUpgradeInitResponse
 */
export class MsgChannelUpgradeInitResponse extends Message<MsgChannelUpgradeInitResponse> {
  /**
   * @generated from field: ibc.core.channel.v1.Upgrade upgrade = 1;
   */
  upgrade?: Upgrade;

  /**
   * @generated from field: uint64 upgrade_sequence = 2;
   */
  upgradeSequence = protoInt64.zero;

  constructor(data?: PartialMessage<MsgChannelUpgradeInitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelUpgradeInitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "upgrade", kind: "message", T: Upgrade },
    { no: 2, name: "upgrade_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelUpgradeInitResponse {
    return new MsgChannelUpgradeInitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelUpgradeInitResponse {
    return new MsgChannelUpgradeInitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelUpgradeInitResponse {
    return new MsgChannelUpgradeInitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelUpgradeInitResponse | PlainMessage<MsgChannelUpgradeInitResponse> | undefined, b: MsgChannelUpgradeInitResponse | PlainMessage<MsgChannelUpgradeInitResponse> | undefined): boolean {
    return proto3.util.equals(MsgChannelUpgradeInitResponse, a, b);
  }
}

/**
 * MsgChannelUpgradeTry defines the request type for the ChannelUpgradeTry rpc
 *
 * @generated from message ibc.core.channel.v1.MsgChannelUpgradeTry
 */
export class MsgChannelUpgradeTry extends Message<MsgChannelUpgradeTry> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: repeated string proposed_upgrade_connection_hops = 3;
   */
  proposedUpgradeConnectionHops: string[] = [];

  /**
   * @generated from field: ibc.core.channel.v1.UpgradeFields counterparty_upgrade_fields = 4;
   */
  counterpartyUpgradeFields?: UpgradeFields;

  /**
   * @generated from field: uint64 counterparty_upgrade_sequence = 5;
   */
  counterpartyUpgradeSequence = protoInt64.zero;

  /**
   * @generated from field: bytes proof_channel = 6;
   */
  proofChannel = new Uint8Array(0);

  /**
   * @generated from field: bytes proof_upgrade = 7;
   */
  proofUpgrade = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 8;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 9;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgChannelUpgradeTry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelUpgradeTry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "proposed_upgrade_connection_hops", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "counterparty_upgrade_fields", kind: "message", T: UpgradeFields },
    { no: 5, name: "counterparty_upgrade_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "proof_channel", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "proof_upgrade", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "proof_height", kind: "message", T: Height },
    { no: 9, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelUpgradeTry {
    return new MsgChannelUpgradeTry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelUpgradeTry {
    return new MsgChannelUpgradeTry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelUpgradeTry {
    return new MsgChannelUpgradeTry().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelUpgradeTry | PlainMessage<MsgChannelUpgradeTry> | undefined, b: MsgChannelUpgradeTry | PlainMessage<MsgChannelUpgradeTry> | undefined): boolean {
    return proto3.util.equals(MsgChannelUpgradeTry, a, b);
  }
}

/**
 * MsgChannelUpgradeTryResponse defines the MsgChannelUpgradeTry response type
 *
 * @generated from message ibc.core.channel.v1.MsgChannelUpgradeTryResponse
 */
export class MsgChannelUpgradeTryResponse extends Message<MsgChannelUpgradeTryResponse> {
  /**
   * @generated from field: ibc.core.channel.v1.Upgrade upgrade = 1;
   */
  upgrade?: Upgrade;

  /**
   * @generated from field: uint64 upgrade_sequence = 2;
   */
  upgradeSequence = protoInt64.zero;

  /**
   * @generated from field: ibc.core.channel.v1.ResponseResultType result = 3;
   */
  result = ResponseResultType.UNSPECIFIED;

  constructor(data?: PartialMessage<MsgChannelUpgradeTryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelUpgradeTryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "upgrade", kind: "message", T: Upgrade },
    { no: 2, name: "upgrade_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "result", kind: "enum", T: proto3.getEnumType(ResponseResultType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelUpgradeTryResponse {
    return new MsgChannelUpgradeTryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelUpgradeTryResponse {
    return new MsgChannelUpgradeTryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelUpgradeTryResponse {
    return new MsgChannelUpgradeTryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelUpgradeTryResponse | PlainMessage<MsgChannelUpgradeTryResponse> | undefined, b: MsgChannelUpgradeTryResponse | PlainMessage<MsgChannelUpgradeTryResponse> | undefined): boolean {
    return proto3.util.equals(MsgChannelUpgradeTryResponse, a, b);
  }
}

/**
 * MsgChannelUpgradeAck defines the request type for the ChannelUpgradeAck rpc
 *
 * @generated from message ibc.core.channel.v1.MsgChannelUpgradeAck
 */
export class MsgChannelUpgradeAck extends Message<MsgChannelUpgradeAck> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: ibc.core.channel.v1.Upgrade counterparty_upgrade = 3;
   */
  counterpartyUpgrade?: Upgrade;

  /**
   * @generated from field: bytes proof_channel = 4;
   */
  proofChannel = new Uint8Array(0);

  /**
   * @generated from field: bytes proof_upgrade = 5;
   */
  proofUpgrade = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 6;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 7;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgChannelUpgradeAck>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelUpgradeAck";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "counterparty_upgrade", kind: "message", T: Upgrade },
    { no: 4, name: "proof_channel", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "proof_upgrade", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "proof_height", kind: "message", T: Height },
    { no: 7, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelUpgradeAck {
    return new MsgChannelUpgradeAck().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelUpgradeAck {
    return new MsgChannelUpgradeAck().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelUpgradeAck {
    return new MsgChannelUpgradeAck().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelUpgradeAck | PlainMessage<MsgChannelUpgradeAck> | undefined, b: MsgChannelUpgradeAck | PlainMessage<MsgChannelUpgradeAck> | undefined): boolean {
    return proto3.util.equals(MsgChannelUpgradeAck, a, b);
  }
}

/**
 * MsgChannelUpgradeAckResponse defines MsgChannelUpgradeAck response type
 *
 * @generated from message ibc.core.channel.v1.MsgChannelUpgradeAckResponse
 */
export class MsgChannelUpgradeAckResponse extends Message<MsgChannelUpgradeAckResponse> {
  /**
   * @generated from field: ibc.core.channel.v1.ResponseResultType result = 1;
   */
  result = ResponseResultType.UNSPECIFIED;

  constructor(data?: PartialMessage<MsgChannelUpgradeAckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelUpgradeAckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ResponseResultType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelUpgradeAckResponse {
    return new MsgChannelUpgradeAckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelUpgradeAckResponse {
    return new MsgChannelUpgradeAckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelUpgradeAckResponse {
    return new MsgChannelUpgradeAckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelUpgradeAckResponse | PlainMessage<MsgChannelUpgradeAckResponse> | undefined, b: MsgChannelUpgradeAckResponse | PlainMessage<MsgChannelUpgradeAckResponse> | undefined): boolean {
    return proto3.util.equals(MsgChannelUpgradeAckResponse, a, b);
  }
}

/**
 * MsgChannelUpgradeConfirm defines the request type for the ChannelUpgradeConfirm rpc
 *
 * @generated from message ibc.core.channel.v1.MsgChannelUpgradeConfirm
 */
export class MsgChannelUpgradeConfirm extends Message<MsgChannelUpgradeConfirm> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: ibc.core.channel.v1.State counterparty_channel_state = 3;
   */
  counterpartyChannelState = State.UNINITIALIZED_UNSPECIFIED;

  /**
   * @generated from field: ibc.core.channel.v1.Upgrade counterparty_upgrade = 4;
   */
  counterpartyUpgrade?: Upgrade;

  /**
   * @generated from field: bytes proof_channel = 5;
   */
  proofChannel = new Uint8Array(0);

  /**
   * @generated from field: bytes proof_upgrade = 6;
   */
  proofUpgrade = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 7;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 8;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgChannelUpgradeConfirm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelUpgradeConfirm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "counterparty_channel_state", kind: "enum", T: proto3.getEnumType(State) },
    { no: 4, name: "counterparty_upgrade", kind: "message", T: Upgrade },
    { no: 5, name: "proof_channel", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "proof_upgrade", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "proof_height", kind: "message", T: Height },
    { no: 8, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelUpgradeConfirm {
    return new MsgChannelUpgradeConfirm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelUpgradeConfirm {
    return new MsgChannelUpgradeConfirm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelUpgradeConfirm {
    return new MsgChannelUpgradeConfirm().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelUpgradeConfirm | PlainMessage<MsgChannelUpgradeConfirm> | undefined, b: MsgChannelUpgradeConfirm | PlainMessage<MsgChannelUpgradeConfirm> | undefined): boolean {
    return proto3.util.equals(MsgChannelUpgradeConfirm, a, b);
  }
}

/**
 * MsgChannelUpgradeConfirmResponse defines MsgChannelUpgradeConfirm response type
 *
 * @generated from message ibc.core.channel.v1.MsgChannelUpgradeConfirmResponse
 */
export class MsgChannelUpgradeConfirmResponse extends Message<MsgChannelUpgradeConfirmResponse> {
  /**
   * @generated from field: ibc.core.channel.v1.ResponseResultType result = 1;
   */
  result = ResponseResultType.UNSPECIFIED;

  constructor(data?: PartialMessage<MsgChannelUpgradeConfirmResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelUpgradeConfirmResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ResponseResultType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelUpgradeConfirmResponse {
    return new MsgChannelUpgradeConfirmResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelUpgradeConfirmResponse {
    return new MsgChannelUpgradeConfirmResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelUpgradeConfirmResponse {
    return new MsgChannelUpgradeConfirmResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelUpgradeConfirmResponse | PlainMessage<MsgChannelUpgradeConfirmResponse> | undefined, b: MsgChannelUpgradeConfirmResponse | PlainMessage<MsgChannelUpgradeConfirmResponse> | undefined): boolean {
    return proto3.util.equals(MsgChannelUpgradeConfirmResponse, a, b);
  }
}

/**
 * MsgChannelUpgradeOpen defines the request type for the ChannelUpgradeOpen rpc
 *
 * @generated from message ibc.core.channel.v1.MsgChannelUpgradeOpen
 */
export class MsgChannelUpgradeOpen extends Message<MsgChannelUpgradeOpen> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: ibc.core.channel.v1.State counterparty_channel_state = 3;
   */
  counterpartyChannelState = State.UNINITIALIZED_UNSPECIFIED;

  /**
   * @generated from field: uint64 counterparty_upgrade_sequence = 4;
   */
  counterpartyUpgradeSequence = protoInt64.zero;

  /**
   * @generated from field: bytes proof_channel = 5;
   */
  proofChannel = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 6;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 7;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgChannelUpgradeOpen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelUpgradeOpen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "counterparty_channel_state", kind: "enum", T: proto3.getEnumType(State) },
    { no: 4, name: "counterparty_upgrade_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "proof_channel", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "proof_height", kind: "message", T: Height },
    { no: 7, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelUpgradeOpen {
    return new MsgChannelUpgradeOpen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelUpgradeOpen {
    return new MsgChannelUpgradeOpen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelUpgradeOpen {
    return new MsgChannelUpgradeOpen().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelUpgradeOpen | PlainMessage<MsgChannelUpgradeOpen> | undefined, b: MsgChannelUpgradeOpen | PlainMessage<MsgChannelUpgradeOpen> | undefined): boolean {
    return proto3.util.equals(MsgChannelUpgradeOpen, a, b);
  }
}

/**
 * MsgChannelUpgradeOpenResponse defines the MsgChannelUpgradeOpen response type
 *
 * @generated from message ibc.core.channel.v1.MsgChannelUpgradeOpenResponse
 */
export class MsgChannelUpgradeOpenResponse extends Message<MsgChannelUpgradeOpenResponse> {
  constructor(data?: PartialMessage<MsgChannelUpgradeOpenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelUpgradeOpenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelUpgradeOpenResponse {
    return new MsgChannelUpgradeOpenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelUpgradeOpenResponse {
    return new MsgChannelUpgradeOpenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelUpgradeOpenResponse {
    return new MsgChannelUpgradeOpenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelUpgradeOpenResponse | PlainMessage<MsgChannelUpgradeOpenResponse> | undefined, b: MsgChannelUpgradeOpenResponse | PlainMessage<MsgChannelUpgradeOpenResponse> | undefined): boolean {
    return proto3.util.equals(MsgChannelUpgradeOpenResponse, a, b);
  }
}

/**
 * MsgChannelUpgradeTimeout defines the request type for the ChannelUpgradeTimeout rpc
 *
 * @generated from message ibc.core.channel.v1.MsgChannelUpgradeTimeout
 */
export class MsgChannelUpgradeTimeout extends Message<MsgChannelUpgradeTimeout> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: ibc.core.channel.v1.Channel counterparty_channel = 3;
   */
  counterpartyChannel?: Channel;

  /**
   * @generated from field: bytes proof_channel = 4;
   */
  proofChannel = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 5;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 6;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgChannelUpgradeTimeout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelUpgradeTimeout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "counterparty_channel", kind: "message", T: Channel },
    { no: 4, name: "proof_channel", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "proof_height", kind: "message", T: Height },
    { no: 6, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelUpgradeTimeout {
    return new MsgChannelUpgradeTimeout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelUpgradeTimeout {
    return new MsgChannelUpgradeTimeout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelUpgradeTimeout {
    return new MsgChannelUpgradeTimeout().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelUpgradeTimeout | PlainMessage<MsgChannelUpgradeTimeout> | undefined, b: MsgChannelUpgradeTimeout | PlainMessage<MsgChannelUpgradeTimeout> | undefined): boolean {
    return proto3.util.equals(MsgChannelUpgradeTimeout, a, b);
  }
}

/**
 * MsgChannelUpgradeTimeoutResponse defines the MsgChannelUpgradeTimeout response type
 *
 * @generated from message ibc.core.channel.v1.MsgChannelUpgradeTimeoutResponse
 */
export class MsgChannelUpgradeTimeoutResponse extends Message<MsgChannelUpgradeTimeoutResponse> {
  constructor(data?: PartialMessage<MsgChannelUpgradeTimeoutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelUpgradeTimeoutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelUpgradeTimeoutResponse {
    return new MsgChannelUpgradeTimeoutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelUpgradeTimeoutResponse {
    return new MsgChannelUpgradeTimeoutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelUpgradeTimeoutResponse {
    return new MsgChannelUpgradeTimeoutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelUpgradeTimeoutResponse | PlainMessage<MsgChannelUpgradeTimeoutResponse> | undefined, b: MsgChannelUpgradeTimeoutResponse | PlainMessage<MsgChannelUpgradeTimeoutResponse> | undefined): boolean {
    return proto3.util.equals(MsgChannelUpgradeTimeoutResponse, a, b);
  }
}

/**
 * MsgChannelUpgradeCancel defines the request type for the ChannelUpgradeCancel rpc
 *
 * @generated from message ibc.core.channel.v1.MsgChannelUpgradeCancel
 */
export class MsgChannelUpgradeCancel extends Message<MsgChannelUpgradeCancel> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: ibc.core.channel.v1.ErrorReceipt error_receipt = 3;
   */
  errorReceipt?: ErrorReceipt;

  /**
   * @generated from field: bytes proof_error_receipt = 4;
   */
  proofErrorReceipt = new Uint8Array(0);

  /**
   * @generated from field: ibc.core.client.v1.Height proof_height = 5;
   */
  proofHeight?: Height;

  /**
   * @generated from field: string signer = 6;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgChannelUpgradeCancel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelUpgradeCancel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "error_receipt", kind: "message", T: ErrorReceipt },
    { no: 4, name: "proof_error_receipt", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "proof_height", kind: "message", T: Height },
    { no: 6, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelUpgradeCancel {
    return new MsgChannelUpgradeCancel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelUpgradeCancel {
    return new MsgChannelUpgradeCancel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelUpgradeCancel {
    return new MsgChannelUpgradeCancel().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelUpgradeCancel | PlainMessage<MsgChannelUpgradeCancel> | undefined, b: MsgChannelUpgradeCancel | PlainMessage<MsgChannelUpgradeCancel> | undefined): boolean {
    return proto3.util.equals(MsgChannelUpgradeCancel, a, b);
  }
}

/**
 * MsgChannelUpgradeCancelResponse defines the MsgChannelUpgradeCancel response type
 *
 * @generated from message ibc.core.channel.v1.MsgChannelUpgradeCancelResponse
 */
export class MsgChannelUpgradeCancelResponse extends Message<MsgChannelUpgradeCancelResponse> {
  constructor(data?: PartialMessage<MsgChannelUpgradeCancelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgChannelUpgradeCancelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChannelUpgradeCancelResponse {
    return new MsgChannelUpgradeCancelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChannelUpgradeCancelResponse {
    return new MsgChannelUpgradeCancelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChannelUpgradeCancelResponse {
    return new MsgChannelUpgradeCancelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChannelUpgradeCancelResponse | PlainMessage<MsgChannelUpgradeCancelResponse> | undefined, b: MsgChannelUpgradeCancelResponse | PlainMessage<MsgChannelUpgradeCancelResponse> | undefined): boolean {
    return proto3.util.equals(MsgChannelUpgradeCancelResponse, a, b);
  }
}

/**
 * MsgUpdateParams is the MsgUpdateParams request type.
 *
 * @generated from message ibc.core.channel.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address that controls the module (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the channel parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: ibc.core.channel.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the MsgUpdateParams response type.
 *
 * @generated from message ibc.core.channel.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgPruneAcknowledgements defines the request type for the PruneAcknowledgements rpc.
 *
 * @generated from message ibc.core.channel.v1.MsgPruneAcknowledgements
 */
export class MsgPruneAcknowledgements extends Message<MsgPruneAcknowledgements> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: uint64 limit = 3;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: string signer = 4;
   */
  signer = "";

  constructor(data?: PartialMessage<MsgPruneAcknowledgements>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgPruneAcknowledgements";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPruneAcknowledgements {
    return new MsgPruneAcknowledgements().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPruneAcknowledgements {
    return new MsgPruneAcknowledgements().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPruneAcknowledgements {
    return new MsgPruneAcknowledgements().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPruneAcknowledgements | PlainMessage<MsgPruneAcknowledgements> | undefined, b: MsgPruneAcknowledgements | PlainMessage<MsgPruneAcknowledgements> | undefined): boolean {
    return proto3.util.equals(MsgPruneAcknowledgements, a, b);
  }
}

/**
 * MsgPruneAcknowledgementsResponse defines the response type for the PruneAcknowledgements rpc.
 *
 * @generated from message ibc.core.channel.v1.MsgPruneAcknowledgementsResponse
 */
export class MsgPruneAcknowledgementsResponse extends Message<MsgPruneAcknowledgementsResponse> {
  /**
   * Number of sequences pruned (includes both packet acknowledgements and packet receipts where appropriate).
   *
   * @generated from field: uint64 total_pruned_sequences = 1;
   */
  totalPrunedSequences = protoInt64.zero;

  /**
   * Number of sequences left after pruning.
   *
   * @generated from field: uint64 total_remaining_sequences = 2;
   */
  totalRemainingSequences = protoInt64.zero;

  constructor(data?: PartialMessage<MsgPruneAcknowledgementsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.core.channel.v1.MsgPruneAcknowledgementsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_pruned_sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "total_remaining_sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPruneAcknowledgementsResponse {
    return new MsgPruneAcknowledgementsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPruneAcknowledgementsResponse {
    return new MsgPruneAcknowledgementsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPruneAcknowledgementsResponse {
    return new MsgPruneAcknowledgementsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPruneAcknowledgementsResponse | PlainMessage<MsgPruneAcknowledgementsResponse> | undefined, b: MsgPruneAcknowledgementsResponse | PlainMessage<MsgPruneAcknowledgementsResponse> | undefined): boolean {
    return proto3.util.equals(MsgPruneAcknowledgementsResponse, a, b);
  }
}

