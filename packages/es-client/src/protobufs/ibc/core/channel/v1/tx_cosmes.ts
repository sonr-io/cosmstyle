// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file ibc/core/channel/v1/tx.proto (package ibc.core.channel.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MsgAcknowledgement, MsgAcknowledgementResponse, MsgChannelCloseConfirm, MsgChannelCloseConfirmResponse, MsgChannelCloseInit, MsgChannelCloseInitResponse, MsgChannelOpenAck, MsgChannelOpenAckResponse, MsgChannelOpenConfirm, MsgChannelOpenConfirmResponse, MsgChannelOpenInit, MsgChannelOpenInitResponse, MsgChannelOpenTry, MsgChannelOpenTryResponse, MsgChannelUpgradeAck, MsgChannelUpgradeAckResponse, MsgChannelUpgradeCancel, MsgChannelUpgradeCancelResponse, MsgChannelUpgradeConfirm, MsgChannelUpgradeConfirmResponse, MsgChannelUpgradeInit, MsgChannelUpgradeInitResponse, MsgChannelUpgradeOpen, MsgChannelUpgradeOpenResponse, MsgChannelUpgradeTimeout, MsgChannelUpgradeTimeoutResponse, MsgChannelUpgradeTry, MsgChannelUpgradeTryResponse, MsgPruneAcknowledgements, MsgPruneAcknowledgementsResponse, MsgRecvPacket, MsgRecvPacketResponse, MsgTimeout, MsgTimeoutOnClose, MsgTimeoutOnCloseResponse, MsgTimeoutResponse, MsgUpdateParams, MsgUpdateParamsResponse } from "./tx_pb.js";

const TYPE_NAME = "ibc.core.channel.v1.Msg";

/**
 * ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.ChannelOpenInit
 */
export const MsgChannelOpenInitService = {
  typeName: TYPE_NAME,
  method: "ChannelOpenInit",
  Request: MsgChannelOpenInit,
  Response: MsgChannelOpenInitResponse,
} as const;

/**
 * ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.ChannelOpenTry
 */
export const MsgChannelOpenTryService = {
  typeName: TYPE_NAME,
  method: "ChannelOpenTry",
  Request: MsgChannelOpenTry,
  Response: MsgChannelOpenTryResponse,
} as const;

/**
 * ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.ChannelOpenAck
 */
export const MsgChannelOpenAckService = {
  typeName: TYPE_NAME,
  method: "ChannelOpenAck",
  Request: MsgChannelOpenAck,
  Response: MsgChannelOpenAckResponse,
} as const;

/**
 * ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.ChannelOpenConfirm
 */
export const MsgChannelOpenConfirmService = {
  typeName: TYPE_NAME,
  method: "ChannelOpenConfirm",
  Request: MsgChannelOpenConfirm,
  Response: MsgChannelOpenConfirmResponse,
} as const;

/**
 * ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.ChannelCloseInit
 */
export const MsgChannelCloseInitService = {
  typeName: TYPE_NAME,
  method: "ChannelCloseInit",
  Request: MsgChannelCloseInit,
  Response: MsgChannelCloseInitResponse,
} as const;

/**
 * ChannelCloseConfirm defines a rpc handler method for
 * MsgChannelCloseConfirm.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.ChannelCloseConfirm
 */
export const MsgChannelCloseConfirmService = {
  typeName: TYPE_NAME,
  method: "ChannelCloseConfirm",
  Request: MsgChannelCloseConfirm,
  Response: MsgChannelCloseConfirmResponse,
} as const;

/**
 * RecvPacket defines a rpc handler method for MsgRecvPacket.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.RecvPacket
 */
export const MsgRecvPacketService = {
  typeName: TYPE_NAME,
  method: "RecvPacket",
  Request: MsgRecvPacket,
  Response: MsgRecvPacketResponse,
} as const;

/**
 * Timeout defines a rpc handler method for MsgTimeout.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.Timeout
 */
export const MsgTimeoutService = {
  typeName: TYPE_NAME,
  method: "Timeout",
  Request: MsgTimeout,
  Response: MsgTimeoutResponse,
} as const;

/**
 * TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.TimeoutOnClose
 */
export const MsgTimeoutOnCloseService = {
  typeName: TYPE_NAME,
  method: "TimeoutOnClose",
  Request: MsgTimeoutOnClose,
  Response: MsgTimeoutOnCloseResponse,
} as const;

/**
 * Acknowledgement defines a rpc handler method for MsgAcknowledgement.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.Acknowledgement
 */
export const MsgAcknowledgementService = {
  typeName: TYPE_NAME,
  method: "Acknowledgement",
  Request: MsgAcknowledgement,
  Response: MsgAcknowledgementResponse,
} as const;

/**
 * ChannelUpgradeInit defines a rpc handler method for MsgChannelUpgradeInit.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.ChannelUpgradeInit
 */
export const MsgChannelUpgradeInitService = {
  typeName: TYPE_NAME,
  method: "ChannelUpgradeInit",
  Request: MsgChannelUpgradeInit,
  Response: MsgChannelUpgradeInitResponse,
} as const;

/**
 * ChannelUpgradeTry defines a rpc handler method for MsgChannelUpgradeTry.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.ChannelUpgradeTry
 */
export const MsgChannelUpgradeTryService = {
  typeName: TYPE_NAME,
  method: "ChannelUpgradeTry",
  Request: MsgChannelUpgradeTry,
  Response: MsgChannelUpgradeTryResponse,
} as const;

/**
 * ChannelUpgradeAck defines a rpc handler method for MsgChannelUpgradeAck.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.ChannelUpgradeAck
 */
export const MsgChannelUpgradeAckService = {
  typeName: TYPE_NAME,
  method: "ChannelUpgradeAck",
  Request: MsgChannelUpgradeAck,
  Response: MsgChannelUpgradeAckResponse,
} as const;

/**
 * ChannelUpgradeConfirm defines a rpc handler method for MsgChannelUpgradeConfirm.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.ChannelUpgradeConfirm
 */
export const MsgChannelUpgradeConfirmService = {
  typeName: TYPE_NAME,
  method: "ChannelUpgradeConfirm",
  Request: MsgChannelUpgradeConfirm,
  Response: MsgChannelUpgradeConfirmResponse,
} as const;

/**
 * ChannelUpgradeOpen defines a rpc handler method for MsgChannelUpgradeOpen.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.ChannelUpgradeOpen
 */
export const MsgChannelUpgradeOpenService = {
  typeName: TYPE_NAME,
  method: "ChannelUpgradeOpen",
  Request: MsgChannelUpgradeOpen,
  Response: MsgChannelUpgradeOpenResponse,
} as const;

/**
 * ChannelUpgradeTimeout defines a rpc handler method for MsgChannelUpgradeTimeout.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.ChannelUpgradeTimeout
 */
export const MsgChannelUpgradeTimeoutService = {
  typeName: TYPE_NAME,
  method: "ChannelUpgradeTimeout",
  Request: MsgChannelUpgradeTimeout,
  Response: MsgChannelUpgradeTimeoutResponse,
} as const;

/**
 * ChannelUpgradeCancel defines a rpc handler method for MsgChannelUpgradeCancel.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.ChannelUpgradeCancel
 */
export const MsgChannelUpgradeCancelService = {
  typeName: TYPE_NAME,
  method: "ChannelUpgradeCancel",
  Request: MsgChannelUpgradeCancel,
  Response: MsgChannelUpgradeCancelResponse,
} as const;

/**
 * UpdateChannelParams defines a rpc handler method for MsgUpdateParams.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.UpdateChannelParams
 */
export const MsgUpdateChannelParamsService = {
  typeName: TYPE_NAME,
  method: "UpdateChannelParams",
  Request: MsgUpdateParams,
  Response: MsgUpdateParamsResponse,
} as const;

/**
 * PruneAcknowledgements defines a rpc handler method for MsgPruneAcknowledgements.
 *
 * @generated from rpc ibc.core.channel.v1.Msg.PruneAcknowledgements
 */
export const MsgPruneAcknowledgementsService = {
  typeName: TYPE_NAME,
  method: "PruneAcknowledgements",
  Request: MsgPruneAcknowledgements,
  Response: MsgPruneAcknowledgementsResponse,
} as const;

