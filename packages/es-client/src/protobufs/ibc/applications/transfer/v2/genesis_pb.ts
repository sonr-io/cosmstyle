// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/applications/transfer/v2/genesis.proto (package ibc.applications.transfer.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Denom } from "./token_pb.js";
import { Params } from "../v1/transfer_pb.js";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";
import { Packet, PacketId } from "../../../core/channel/v1/channel_pb.js";

/**
 * GenesisState defines the ibc-transfer genesis state
 *
 * @generated from message ibc.applications.transfer.v2.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: repeated ibc.applications.transfer.v2.Denom denoms = 2;
   */
  denoms: Denom[] = [];

  /**
   * @generated from field: ibc.applications.transfer.v1.Params params = 3;
   */
  params?: Params;

  /**
   * total_escrowed contains the total amount of tokens escrowed
   * by the transfer module
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_escrowed = 4;
   */
  totalEscrowed: Coin[] = [];

  /**
   * forwarded_packets contains the forwarded packets stored as part of the
   * packet forwarding lifecycle
   *
   * @generated from field: repeated ibc.applications.transfer.v2.ForwardedPacket forwarded_packets = 5;
   */
  forwardedPackets: ForwardedPacket[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.transfer.v2.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denoms", kind: "message", T: Denom, repeated: true },
    { no: 3, name: "params", kind: "message", T: Params },
    { no: 4, name: "total_escrowed", kind: "message", T: Coin, repeated: true },
    { no: 5, name: "forwarded_packets", kind: "message", T: ForwardedPacket, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * ForwardedPacket defines the genesis type necessary to retrieve and store forwarded packets.
 *
 * @generated from message ibc.applications.transfer.v2.ForwardedPacket
 */
export class ForwardedPacket extends Message<ForwardedPacket> {
  /**
   * @generated from field: ibc.core.channel.v1.PacketId forward_key = 1;
   */
  forwardKey?: PacketId;

  /**
   * @generated from field: ibc.core.channel.v1.Packet packet = 2;
   */
  packet?: Packet;

  constructor(data?: PartialMessage<ForwardedPacket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.transfer.v2.ForwardedPacket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "forward_key", kind: "message", T: PacketId },
    { no: 2, name: "packet", kind: "message", T: Packet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForwardedPacket {
    return new ForwardedPacket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForwardedPacket {
    return new ForwardedPacket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForwardedPacket {
    return new ForwardedPacket().fromJsonString(jsonString, options);
  }

  static equals(a: ForwardedPacket | PlainMessage<ForwardedPacket> | undefined, b: ForwardedPacket | PlainMessage<ForwardedPacket> | undefined): boolean {
    return proto3.util.equals(ForwardedPacket, a, b);
  }
}

